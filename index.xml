<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:wfw="http://wellformedweb.org/CommentAPI/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" xmlns:slash="http://purl.org/rss/1.0/modules/slash/" xmlns:georss="http://www.georss.org/georss" xmlns:geo="http://www.w3.org/2003/01/geo/wgs84_pos#">

  <channel>
    <title>LogRocket Blog</title>
    <atom:link href="https://blog.logrocket.com/feed/" rel="self" type="application/rss+xml" />
    <link>https://blog.logrocket.com</link>
    <description>For Frontend Developers and Web App Engineers</description>
    <lastBuildDate>Fri, 01 Jul 2022 00:00:39 +0000</lastBuildDate>
    <language>en-US</language>
    <sy:updatePeriod>
	hourly	</sy:updatePeriod>
    <sy:updateFrequency>
	1	</sy:updateFrequency>


    <image>
      <url>https://blog.logrocket.com/wp-content/uploads/2019/06/cropped-cropped-favicon-196x196-32x32.png</url>
      <title>LogRocket Blog</title>
      <link>https://blog.logrocket.com</link>
      <width>32</width>
      <height>32</height>
    </image>
    <site xmlns="com-wordpress:feed-additions:1">161333275</site>
    <item>
      <title>Pathfinding in Rust: A tutorial with examples</title>
      <link>https://blog.logrocket.com/pathfinding-rust-tutorial-examples/</link>
      <comments>https://blog.logrocket.com/pathfinding-rust-tutorial-examples/#respond</comments>

      <dc:creator>
        <![CDATA[Greg Stoll]]>
      </dc:creator>
      <pubDate>Fri, 01 Jul 2022 17:30:45 +0000</pubDate>
      <category>
        <![CDATA[Uncategorized]]>
      </category>
      <category>
        <![CDATA[rust]]>
      </category>
      <guid isPermaLink="false">https://blog.logrocket.com/?p=122264</guid>

      <description>
        <![CDATA[<p>Let's take a look at some options for pathfinding in Rust using breadth-first search, Dijkstra's algorithm, and the A* search algorithm.</p>
<p>The post <a rel="nofollow" href="https://blog.logrocket.com/pathfinding-rust-tutorial-examples/">Pathfinding in Rust: A tutorial with examples</a> appeared first on <a rel="nofollow" href="https://blog.logrocket.com">LogRocket Blog</a>.</p>
]]>
      </description>
      <content:encoded>
        <![CDATA[<p>Pathfinding is an important problem in many applications. In this article, we’re going to look at some options for pathfinding in the Rust language.</p>
<p>What we’ll cover:</p>
<ul>
<li><a href="#what-pathfinding">What is pathfinding?</a></li>
<li><a href="#usages-pathfinding">Usages of pathfinding</a></li>
<li><a href="#pathfinding-examples-rust">Pathfinding examples in Rust</a>
<ul style="margin-bottom: 0px; padding-bottom: 0px;">
<li><a href="#example-rust-pathfinding-framework">Example Rust pathfinding framework</a></li>
<li><a href="#using-breadth-first-search-pathfinding-rust">Using breadth-first search for pathfinding in Rust</a></li>
<li><a href="#accounting-costs-rust-pathfinding-dijkstras-algorithm">Accounting for costs in Rust pathfinding with Dijkstra’s algorithm</a></li>
<li><a href="#rust-pathfinding-using-a-star-search-algorithm">Rust pathfinding using the A* search algorithm</a></li>
</ul>
</li>
</ul>
<h2 id="what-pathfinding">What is pathfinding?</h2>
<p>Simply put, pathfinding is finding the shortest route between two points. In the simplest case, the answer is “a straight line,” but things can get much more complicated that that!</p>
<p>Some examples of complicating factors are:</p>
<ul>
<li>Obstacles that can’t be moved through</li>
<li>Terrain that is more difficult to move through</li>
</ul>
<p>For example, to handle terrain that is more difficult to move through, you could give the two points a cost to move through. You could then change the goal to be finding the route between those two points with the lowest cost.</p>
<h2 id="usages-pathfinding">Usages of pathfinding</h2>
<p>Pathfinding is used in many applications. Some of the most common ones are robotics and <a href="https://blog.logrocket.com/building-a-roguelike-game-with-rot-js/" target="_blank" rel="noreferrer noopener">video games, such as roguelike games</a>.</p>
<p>In robotics, a common task for robots is to navigate the environment and get from point A to point B as quickly as possible.</p>
<p>In video games, a character controlled by the computer may need to move places in the environment. Also, if the game allows the player to set waypoints, it may also want to show the quickest way to get to the next waypoint.</p>
<h2 id="pathfinding-examples-rust">Pathfinding examples in Rust</h2>
<p>Now that we’ve established the usefulness of pathfinding, let’s take a look at a few examples of pathfinding in <a href="https://blog.logrocket.com/why-is-rust-popular/" target="_blank" rel="noreferrer noopener">Rust, an increasingly popular programming language</a>.</p>
<p>For these examples, we’re going to be using the aptly-named <code><a href="https://crates.io/crates/pathfinding" target="_blank" rel="noreferrer noopener">pathfinding</a></code> crate, which is the most popular pathfinding crate available on <a href="https://crates.io/" target="_blank" rel="noreferrer noopener">the Rust community’s crate registry</a>.</p>
<p>Note that most pathfinding algorithms work in terms of nodes instead of continuous space. This <a href="https://www.gamasutra.com/view/feature/3096/toward_more_realistic_pathfinding.php" target="_blank" rel="noreferrer noopener">Game Developer article</a> discusses some ways to make the results of these algorithms look more natural.</p>
<h3 id="example-rust-pathfinding-framework">Example Rust pathfinding framework</h3>
<p>You can check out the <a href="https://github.com/gregstoll/rust-pathfinding" target="_blank" rel="noreferrer noopener">full code we’re going to be using in this GitHub repo</a>.</p>
<p>The <code><a href="https://github.com/gregstoll/rust-pathfinding/blob/main/src/lib.rs#L11" target="_blank" rel="noreferrer noopener">Board</a></code><a href="https://github.com/gregstoll/rust-pathfinding/blob/main/src/lib.rs#L11" target="_blank" rel="noreferrer noopener"> struct</a> defines a rectangular board where each cell can be an obstacle or have a cost associated with moving to it.</p>
<p><code>Board::new()</code> allows creating the board and specifying these cells with a <code>Vec&lt;string&gt;</code>. In this string, a character with a value between one and nine indicates a cell that can be moved to at the defined cost. Meanwhile, a character of &#8220;X&#8221; indicates an obstacle.</p>
<p>Note that these algorithms support having one-way links between cells. For simplicity, we’re not going to allow that functionality in the <code>Board</code> struct.</p>
<p><code>Board::get_successors()</code> takes in a cell position and returns a <code>Vec</code> of cells that can be directly moved to along with their cost. As we’ll see, this is a key method used in all of the algorithms we’re going to look at in the pathfinding crate.</p>
<p>There’s also <code>Board::draw_to_image()</code>, which is a convenient way to write an image with the <code>Board</code> cells — and optionally, a path as well. This method uses the <code><a href="https://crates.io/crates/imageproc" target="_blank" rel="noreferrer noopener">imageproc</a></code> crate to do the drawing.</p>
<h3 id="using-breadth-first-search-pathfinding-rust">Using breadth-first search for pathfinding in Rust</h3>
<p><a href="https://en.wikipedia.org/wiki/Breadth-first_search" target="_blank" rel="noreferrer noopener">Breadth-first search is a fairly straightforward algorithm</a> for finding a shortest path from a start node to a goal node. Starting at the start node, it processes each connected node at a time.</p>
<p>If that node is the goal node, then we’re done! Otherwise, we put each of its connections in the queue of nodes to look at and continue.</p>
<p>The breadth-first search algorithm does not look at the costs of nodes, but it’s a pretty simple example to start with. You can check out the <a href="https://github.com/gregstoll/rust-pathfinding/blob/main/src/bin/bfs.rs" target="_blank" rel="noreferrer noopener">full source for this example using breadth-first search</a> to follow along.</p>
<p>The code below shows the call to actually do the breadth-first search:</p>
<pre class="language-rust hljs">    let result = bfs(
        &amp;start,
        |p| board.get_successors(p).iter().map(|successor| successor.pos).collect::&lt;Vec&lt;_&gt;&gt;(), 
        |p| *p==goal);
</pre>
<p>Per the <a href="https://docs.rs/pathfinding/3.0.12/pathfinding/directed/bfs/fn.bfs.html" target="_blank" rel="noreferrer noopener">documentation for </a><code><a href="https://docs.rs/pathfinding/3.0.12/pathfinding/directed/bfs/fn.bfs.html" target="_blank" rel="noreferrer noopener">bfs()</a></code>, the arguments are:</p>
<ul>
<li>The node to start with</li>
<li>A function that takes in a node and returns a <code>Vec</code> of nodes that can be directly moved to</li>
<li>A function that takes in a node and returns whether it is the goal node</li>
</ul>
<p>Note that since breadth-first search doesn’t support costs for nodes, we have to map the result of <code>Board::get_successors()</code> to remove the costs.</p>
<p>Additionally, as the documentation notes, taking in a node and returning whether it is the goal node is more flexible than just taking in what the goal node is. This is because it allows for multiple goal nodes, or some sort of dynamic computation for whether a node is a goal or not.</p>
<p>In this case, we just want one goal node, and that’s easy to do as well!</p>
<p><code>bfs()</code> returns <code>Option&lt;Vec&lt;N&gt;&gt;</code> where <code>N</code> is the type of the node you passed in. It’s an <code>Option&lt;&gt;</code> because it’s possible there is no path from start to the goal; in that case <code>None</code> is returned. Otherwise, it returns a <code>Vec</code> of the path to get from the start to the goal, including both endpoints.</p>
<p>To run the example, use <code>cargo run --bin bfs</code>. Here’s the resulting image showing the path from the start (blue) node to the goal (green) node:</p>
<p><img data-attachment-id="122269" data-permalink="https://blog.logrocket.com/pathfinding-rust-tutorial-examples/attachment/result-of-breadth-first-search-from-blue-node-to-green-node/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2022/06/Result-of-breadth-first-search-from-blue-node-to-green-node.png" data-orig-size="500,500" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="Result-of-breadth-first-search-from-blue-node-to-green-node" data-image-description="" data-image-caption="" data-medium-file="https://blog.logrocket.com/wp-content/uploads/2022/06/Result-of-breadth-first-search-from-blue-node-to-green-node-300x300.png" data-large-file="https://blog.logrocket.com/wp-content/uploads/2022/06/Result-of-breadth-first-search-from-blue-node-to-green-node.png" class="aligncenter wp-image-122269 size-full" src="https://blog.logrocket.com/wp-content/uploads/2022/06/Result-of-breadth-first-search-from-blue-node-to-green-node.png" alt="Grey Arrows Indicating Result Of A Breadth-First Search From Blue Node To Green Node" width="500" height="500" srcset="https://blog.logrocket.com/wp-content/uploads/2022/06/Result-of-breadth-first-search-from-blue-node-to-green-node.png 500w, https://blog.logrocket.com/wp-content/uploads/2022/06/Result-of-breadth-first-search-from-blue-node-to-green-node-300x300.png 300w, https://blog.logrocket.com/wp-content/uploads/2022/06/Result-of-breadth-first-search-from-blue-node-to-green-node-150x150.png?crop=1 150w" sizes="(max-width: 500px) 100vw, 500px" /></p>
<h3 id="accounting-costs-rust-pathfinding-dijkstras-algorithm">Accounting for costs in Rust pathfinding with Dijkstra’s algorithm</h3>
<p><a href="https://en.wikipedia.org/wiki/Dijkstra's_algorithm" target="_blank" rel="noreferrer noopener">Dijkstra’s algorithm</a> is another algorithm for finding a shortest path from a start node to a goal node. Unlike breadth-first search, it does use the cost of moving to a node in its calculations.</p>
<p>Make sure to take a look at the <a href="https://github.com/gregstoll/rust-pathfinding/blob/main/src/bin/dijkstra.rs" target="_blank" rel="noreferrer noopener">full source for this example using Dijkstra’s algorithm</a>.</p>
<p>Here’s the call to run Dijkstra’s algorithm:</p>
<pre class="language-rust hljs">    let result = dijkstra(
        &amp;start,
        |p| board.get_successors(p).iter().map(|s| (s.pos, s.cost)).collect::&lt;Vec&lt;_&gt;&gt;(),
        |p| *p==goal);
</pre>
<p>Per the <a href="https://docs.rs/pathfinding/3.0.12/pathfinding/directed/dijkstra/fn.dijkstra.html" target="_blank" rel="noreferrer noopener">documentation for </a><code><a href="https://docs.rs/pathfinding/3.0.12/pathfinding/directed/dijkstra/fn.dijkstra.html" target="_blank" rel="noreferrer noopener">dijkstra()</a></code>, the arguments are very similar to <code>bfs()</code>. The only difference is that the second argument is now a <code>Vec</code> of tuples, each one of which contains the following:</p>
<ul>
<li>A node that can be directly moved to</li>
<li>The cost to move to that node</li>
</ul>
<p>Again, similar to <code>bfs()</code>, <code>dijkstra()</code> returns <code>Option&lt;(Vec&lt;N&gt;, C)&gt;</code>; the second member of the tuple is the total cost to get from the start node to the goal node.</p>
<p>To run the example, use <code>cargo run --bin dijkstra</code>, and here’s the resulting image showing the path from the start node (the one with the blue number) to the goal node (the one with the green number):</p>
<p><img data-attachment-id="122274" data-permalink="https://blog.logrocket.com/pathfinding-rust-tutorial-examples/attachment/result-of-dijkstras-algorithm-from-blue-node-to-green-node/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2022/06/Result-of-Dijkstras-algorithm-from-blue-node-to-green-node.png" data-orig-size="500,500" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="Result-of-Dijkstra&#8217;s-algorithm-from-blue-node-to-green-node" data-image-description="" data-image-caption="" data-medium-file="https://blog.logrocket.com/wp-content/uploads/2022/06/Result-of-Dijkstras-algorithm-from-blue-node-to-green-node-300x300.png" data-large-file="https://blog.logrocket.com/wp-content/uploads/2022/06/Result-of-Dijkstras-algorithm-from-blue-node-to-green-node.png" loading="lazy" class="aligncenter wp-image-122274 size-full" src="https://blog.logrocket.com/wp-content/uploads/2022/06/Result-of-Dijkstras-algorithm-from-blue-node-to-green-node.png" alt="Grid With Various Costs Assigned To Each Square From One To Nine With Grey Arrows Indicating Path From Blue Node To Green Node Using Dijkstra's Algorithm" width="500" height="500" srcset="https://blog.logrocket.com/wp-content/uploads/2022/06/Result-of-Dijkstras-algorithm-from-blue-node-to-green-node.png 500w, https://blog.logrocket.com/wp-content/uploads/2022/06/Result-of-Dijkstras-algorithm-from-blue-node-to-green-node-300x300.png 300w, https://blog.logrocket.com/wp-content/uploads/2022/06/Result-of-Dijkstras-algorithm-from-blue-node-to-green-node-150x150.png?crop=1 150w" sizes="(max-width: 500px) 100vw, 500px" /></p>
<p>Notice how the path is a bit more roundabout than a direct path because of the costs of the nodes.</p>
<h3 id="rust-pathfinding-using-a-star-search-algorithm">Rust pathfinding using the A* search algorithm</h3>
<p>Both of the previous searches we’ve looked at start out by trying every connected node. However, there’s often more structure in the problem that these algorithms aren’t taking advantage of.</p>
<p>For example, if your goal node is directly west of your start node, it probably makes sense for the first move to be in the westward direction!</p>
<p>The <a href="https://en.wikipedia.org/wiki/A*_search_algorithm" target="_blank" rel="noreferrer noopener">A* search algorithm</a> (pronounced “A-star”) takes advantage of this extra structure. It requires that you pass in a heuristic function that estimates the distance from a node to the goal, and that this estimate is always less than or equal to the actual distance.</p>
<p>Using this heuristic, the A* search algorithm can try paths that are more likely to be lower in cost first. It can also figure out when it can stop because there can be no shorter path.</p>
<p>As a warning: if the heuristic doesn’t obey this property, the algorithm might not return the shortest path! If you’re concerned about this, you can run some test cases with Dijkstra’s algorithm and confirm that A* and Dijkstra’s algorithm give the same result to make sure the heuristic is valid.</p>
<p>Often, if you’re doing pathfinding in a two-dimensional space, a heuristic that ignores cost and just calculates the distance between the two nodes works well.</p>
<p>For our example <code>Board</code>, we’re not allowing diagonal moves, so the distance between two cells is the <a href="https://en.wikipedia.org/wiki/Taxicab_geometry" target="_blank" rel="noreferrer noopener">Manhattan distance</a>. Since the minimum cost to get to any cell is <code>1</code>, we can use this as our heuristic.</p>
<p>Here’s the <a href="https://github.com/gregstoll/rust-pathfinding/blob/main/src/bin/astar.rs" target="_blank" rel="noreferrer noopener">full source for this example using the A* search algorithm</a>, and here’s the call to run it:</p>
<pre class="language-rust hljs">    let result = astar(
        &amp;start,
        |p| board.get_successors(p).iter().map(|s| (s.pos, s.cost)).collect::&lt;Vec&lt;_&gt;&gt;(),
        |p| ((p.0 - goal.0).abs() + (p.1 - goal.1).abs()) as u32,
        |p| *p==goal);
</pre>
<p>Per the <a href="https://docs.rs/pathfinding/3.0.12/pathfinding/directed/astar/fn.astar.html" target="_blank" rel="noreferrer noopener">documentation for </a> <code><a href="https://docs.rs/pathfinding/3.0.12/pathfinding/directed/astar/fn.astar.html" target="_blank" rel="noreferrer noopener">astar()</a></code>, the arguments and return value are the same as for <code>dijkstra()</code> except for the heuristic function, which is the third parameter.</p>
<p>As mentioned above, we’re using the Manhattan distance between the cells for the heuristic, which is the difference between the x-values plus the difference between the y-values.</p>
<p>To run the example, use <code>cargo run --bin astar</code>. Here’s the resulting image:</p>
<p><img data-attachment-id="122278" data-permalink="https://blog.logrocket.com/pathfinding-rust-tutorial-examples/attachment/result-of-a-star-search-from-blue-node-to-green-node/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2022/06/Result-of-A-star-search-from-blue-node-to-green-node.png" data-orig-size="500,500" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="Result-of-A-star-search-from-blue-node-to-green-node" data-image-description="" data-image-caption="" data-medium-file="https://blog.logrocket.com/wp-content/uploads/2022/06/Result-of-A-star-search-from-blue-node-to-green-node-300x300.png" data-large-file="https://blog.logrocket.com/wp-content/uploads/2022/06/Result-of-A-star-search-from-blue-node-to-green-node.png" loading="lazy" class="aligncenter wp-image-122278 size-full" src="https://blog.logrocket.com/wp-content/uploads/2022/06/Result-of-A-star-search-from-blue-node-to-green-node.png" alt="Grid With Various Costs Assigned To Each Square With Grey Arrows Indicating Path From Blue Node To Green Node Using A Star Search" width="500" height="500" srcset="https://blog.logrocket.com/wp-content/uploads/2022/06/Result-of-A-star-search-from-blue-node-to-green-node.png 500w, https://blog.logrocket.com/wp-content/uploads/2022/06/Result-of-A-star-search-from-blue-node-to-green-node-300x300.png 300w, https://blog.logrocket.com/wp-content/uploads/2022/06/Result-of-A-star-search-from-blue-node-to-green-node-150x150.png?crop=1 150w" sizes="(max-width: 500px) 100vw, 500px" /></p>
<h2 id="conclusion">Conclusion</h2>
<p>When it comes to pathfinding in Rust, A* search is commonly used in robotics and video game applications. However, one weakness of A* search is that it can take a lot of memory to run.</p>
<p>There are variants such as <a href="https://en.wikipedia.org/wiki/Iterative_deepening_A*" target="_blank" rel="noreferrer noopener">iterative deepening A* search</a> and <a href="https://en.wikipedia.org/wiki/Fringe_search" target="_blank" rel="noreferrer noopener">fringe search</a> that improve on its memory usage, and the pathfinding crate has support for both of these with the <code><a href="https://docs.rs/pathfinding/3.0.12/pathfinding/directed/idastar/fn.idastar.html" target="_blank" rel="noreferrer noopener">idastar()</a></code> and <code><a href="https://docs.rs/pathfinding/3.0.12/pathfinding/directed/fringe/fn.fringe.html" target="_blank" rel="noreferrer noopener">fringe()</a></code> methods. These methods take the same parameters as the <code>astar()</code> method above, so they’re easy to try out.</p>
<p>If you’re looking to do some pathfinding in Rust, <a href="https://github.com/gregstoll/rust-pathfinding" target="_blank" rel="noreferrer noopener">clone the repo and give it a shot</a>!</p>
<p>The post <a rel="nofollow" href="https://blog.logrocket.com/pathfinding-rust-tutorial-examples/">Pathfinding in Rust: A tutorial with examples</a> appeared first on <a rel="nofollow" href="https://blog.logrocket.com">LogRocket Blog</a>.</p>
]]>
      </content:encoded>

      <wfw:commentRss>https://blog.logrocket.com/pathfinding-rust-tutorial-examples/feed/</wfw:commentRss>
      <slash:comments>0</slash:comments>


      <post-id xmlns="com-wordpress:feed-additions:1">122264</post-id>
    </item>
    <item>
      <title>Handling user authentication with Remix</title>
      <link>https://blog.logrocket.com/handling-user-authentication-remix/</link>
      <comments>https://blog.logrocket.com/handling-user-authentication-remix/#respond</comments>

      <dc:creator>
        <![CDATA[Emmanuel John]]>
      </dc:creator>
      <pubDate>Fri, 01 Jul 2022 16:00:06 +0000</pubDate>
      <category>
        <![CDATA[Uncategorized]]>
      </category>
      <category>
        <![CDATA[remix]]>
      </category>
      <guid isPermaLink="false">https://blog.logrocket.com/?p=121948</guid>

      <description>
        <![CDATA[<p>Learn how to implement authentication on Remix apps and build a fullstack quote wall application with support for user authentication.</p>
<p>The post <a rel="nofollow" href="https://blog.logrocket.com/handling-user-authentication-remix/">Handling user authentication with Remix</a> appeared first on <a rel="nofollow" href="https://blog.logrocket.com">LogRocket Blog</a>.</p>
]]>
      </description>
      <content:encoded>
        <![CDATA[<p>Remix is a fullstack React framework with APIs that support server rendering, data loading, and routing. It uses the Web Fetch API to enable fast page loads and seamless transitions between several sites, and it can run anywhere.</p>
<p>Today, we will learn how to manage user authentication in Remix in this tutorial. We&#8217;ll create a quote wall application where authenticated users can view and publish quotes, while unauthenticated users can just view the posts and have no ability to post.</p>
<h2 id="table-of-contents">Table of Contents</h2>
<ul>
<li><a href="#setting-up-a-quote-wall-app-with-remix">Setting up a quote wall app with Remix</a>
<ul>
<li><a href="#creating-a-new-remix-app">Creating a new Remix app</a></li>
<li><a href="#setting-up-tailwind">Setting up Tailwind</a></li>
<li><a href="#setting-up-rootjsx">Setting up root.jsx</a></li>
<li><a href="#routes">Routes</a></li>
<li><a href="#the-navigation-component">The navigation component</a></li>
<li><a href="#a-quote-segment">A quote segment</a></li>
</ul>
</li>
<li><a href="#setting-up-the-database">Setting up the database</a>
<ul>
<li><a href="#setting-up-prisma">Setting up Prisma</a></li>
</ul>
</li>
<li><a href="#connecting-to-the-database">Connecting to the database</a></li>
<li><a href="#fetching-quotes-from-the-database-using-the-remix-loader">Fetching quotes from the database using the Remix loader</a></li>
<li><a href="#creating-new-quotes">Creating new quotes</a></li>
<li><a href="#username-password-authentication">Username/password authentication</a></li>
<li><a href="#form-validation-with-action">Form validation with action</a></li>
<li><a href="#creating-session-helpers">Creating session helpers</a></li>
<li><a href="#processing-login-and-register-form-submissions">Processing login and register form submissions</a></li>
<li><a href="#making-a-logout-feature">Making a logout feature</a></li>
</ul>
<h2 id="prerequisites">Prerequisites</h2>
<p>To follow along with this article, you need to have the following:</p>
<ul>
<li><a href="https://nodejs.org/" target="_blank" rel="noopener">Node.js</a> 14 or greater</li>
<li><a href="https://www.npmjs.com/" target="_blank" rel="noopener">npm</a> 7 or greater</li>
<li>Prior knowledge of HTML, CSS, JavaScript, React</li>
<li>Basic knowledge of Tailwind CSS</li>
</ul>
<h2 id="setting-up-a-quote-wall-app-with-remix">Setting up a quote wall app with Remix</h2>
<h3 id="creating-a-new-remix-app">Creating a new Remix app</h3>
<p>To get started, it’s important to choose <strong>Just the basics</strong>, <strong>Remix App Server</strong>, and then <strong>TypeScript</strong> when prompted.</p>
<p>Let’s scaffold a basic Remix application with the following command:</p>
<pre class="language-bash hljs">npx create-remix@latest remix-quote-wall
cd remix-quote-wall
npm run dev
</pre>
<h3 id="setting-up-tailwind">Setting up Tailwind</h3>
<p>To add Tailwind to our Remix app, let’s do the following:</p>
<ol>
<li>Install Tailwind</li>
</ol>
<p>Install <code>tailwindcss</code>, its peer dependencies, and <code>concurrently</code> via <code>npm</code>, and then run the init command to generate both <code>tailwind.config.js</code> and <code>postcss.config.js</code>:</p>
<pre class="language-bash hljs">npm install -D tailwindcss postcss autoprefixer concurrently
npx tailwindcss init -p
</pre>
<ol>
<li>Configure your template paths</li>
</ol>
<p>Add the paths to all of your template files in your <code>tailwind.config.js</code> file:</p>
<pre class="language-javascript hljs">//tailwind.config.js

module.exports = {
  content: [
    "./app/**/*.{js,ts,jsx,tsx}",
  ],
  theme: {
    extend: {},
  },
  plugins: [],
}
</pre>
<ol>
<li>Update your <code>package.json</code> scripts</li>
</ol>
<p>Update the scripts in your <code>package.json</code> file to build both your development and production CSS:</p>
<pre class="language-json hljs">...
{
  "scripts": {
    "build": "npm run build:css &amp;&amp; remix build",
    "build:css": "tailwindcss -m -i ./styles/app.css -o app/styles/app.css",
    "dev": "concurrently \"npm run dev:css\" \"remix dev\"",
    "dev:css": "tailwindcss -w -o ./app/styles/app.css",
  }
}
...
</pre>
<ol>
<li>Add the Tailwind directives to your CSS</li>
</ol>
<p>Create a <code>./styles/app.css</code> file and add the <code>@tailwind</code> directives for each of Tailwind’s layers:</p>
<pre class="language-css hljs">/*app.css*/

@tailwind base;
@tailwind components;
@tailwind utilities;
</pre>
<ol>
<li>Import CSS file</li>
</ol>
<p>Import the compiled <code>./app/styles/app.css</code> file in your <code>./app/root.jsx</code> file by adding the following:</p>
<pre class="language-css hljs">...
import styles from "~/styles/app.css"

export function links() {
  return [{ rel: "stylesheet", href: styles }]
        }
...
</pre>
<p>Now, let’s run our development server with the following command:</p>
<pre class="language-bash hljs">npm run dev
</pre>
<h3 id="setting-up-rootjsx">Setting up <code>root.jsx</code></h3>
<p>Let’s add some Tailwind classes to the app component by replacing the contents of <code>app/root.jsx</code> with this:</p>
<pre class="language-javascript hljs">// app/root.jsx

import {
    Links,
    LiveReload,
    Meta,
    Outlet
} from "@remix-run/react";
import styles from "./styles/app.css"

export function links() {
    return [{ rel: "stylesheet", href: styles }]
}

export const meta = () =&gt; ({
    charset: "utf-8",
    title: "Quote Wall App",
    viewport: "width=device-width,initial-scale=1",
});

export default function App() {
    return (
        &lt;html lang="en"&gt;
            &lt;head&gt;
                &lt;Meta /&gt;
                &lt;Links /&gt;
            &lt;/head&gt;
            &lt;body className="bg-purple-100 relative px-5"&gt;
                &lt;div className="mt-20 w-full max-w-screen-lg mx-auto"&gt;
                    &lt;Outlet /&gt;
                &lt;/div&gt;
                &lt;LiveReload /&gt;
            &lt;/body&gt;
        &lt;/html&gt;
    );
}
</pre>
<h3 id="routes">Routes</h3>
<p>After that, let’s set up our route structure. We are going to have a few routes:</p>
<pre>/
/login
/new-quote
</pre>
<p>Let&#8217;s start with the index route (<code>/</code>). To do that, create a file <code>app/routes/index.tsx</code> and add the following to it:</p>
<pre class="language-javascript hljs">export default function Index() {

  return (
    &lt;div&gt;
      &lt;div className="grid lg:grid-flow-row grid-cols-1 lg:grid-cols-3"&gt;
        Hello
      &lt;/div&gt;
    &lt;/div&gt;
  )
}
</pre>
<p>Then, let’s update our <code>app/root.tsx</code> file with the following:</p>
<pre class="language-javascript hljs">import {
  Link,
  Links,
  LiveReload,
  Meta,
  Outlet
} from "@remix-run/react";
import styles from "./styles/app.css"

export function links() {
  return [{ rel: "stylesheet", href: styles }]
}

export const meta = () =&gt; ({
  charset: "utf-8",
  title: "Quote Wall App",
  viewport: "width=device-width,initial-scale=1",
});

export default function App() {
  return (
    &lt;html lang="en"&gt;
      &lt;head&gt;
        &lt;Meta /&gt;
        &lt;Links /&gt;
      &lt;/head&gt;
      &lt;body className="bg-purple-100 relative px-5"&gt;
        &lt;div className="mt-20 w-full max-w-screen-lg mx-auto"&gt;
          &lt;Outlet /&gt;
        &lt;/div&gt;
        &lt;LiveReload /&gt;
      &lt;/body&gt;
    &lt;/html&gt;
  );
}
</pre>
<p>Our app is getting in shape! We will create the missing routes as we progress.</p>
<h3 id="the-navigation-component">The navigation component</h3>
<p>Let’s update our <code>app/routes/index.jsx</code> file with the navigation segment as follows:</p>
<pre class="language-javascript hljs">import { Link } from "@remix-run/react";

export default function Index() {

    return (
      &lt;div&gt;
        &lt;nav className="bg-gradient-to-br from-purple-400 via-purple-500 to-purple-500 w-full fixed top-0 left-0 px-5"&gt;
          &lt;div
            className="w-full max-w-screen-lg mx-auto flex justify-between content-center py-3 "&gt;
            &lt;Link className="text-white text-3xl font-bold" to={"/"}&gt;Quote Wall&lt;/Link&gt;
            &lt;div className="flex flex-col md:flex-row items-center justify-between gap-x-4 text-blue-50"&gt;

              &lt;Link to={"login"}&gt;Login&lt;/Link&gt;
              &lt;Link to={"login"}&gt;Register&lt;/Link&gt;

              &lt;Link to={"new-quote"}&gt;Add A Quote&lt;/Link&gt;
              &lt;Link to={"logout"}&gt;Logout&lt;/Link&gt;
            &lt;/div&gt;
          &lt;/div&gt;

        &lt;/nav&gt;
      &lt;/div&gt;
    )
}
</pre>
<h3 id="a-quote-segment">A quote segment</h3>
<p>Since we won’t be using our quote component in more than one file, we’ll add it in the <code>app/routes/index.jsx</code> file.</p>
<p>Let’s update our <code>app/routes/index.jsx</code> file with the quote segment as follows:</p>
<pre class="language-javascript hljs">...

export default function Index() {

    return (
        &lt;div&gt;
          &lt;nav&gt;...&lt;/nav&gt;
            &lt;div className="grid lg:grid-flow-row grid-cols-1 lg:grid-cols-3"&gt;
                &lt;figure className="m-4 py-10 px-4 shadow-md shadow-sky-100"&gt;
                    &lt;blockquote cite="https://wisdomman.com" className="py-3"&gt;
                        &lt;p className="text-gray-800  text-xl"&gt;
                            A stitch in Time saves Nine.
                        &lt;/p&gt;
                    &lt;/blockquote&gt;
                    &lt;figcaption&gt;
                        &lt;cite className="text-gray-600 text-md mb-4 text-right"&gt;
                            - Unknown
                        &lt;/cite&gt;
                    &lt;/figcaption&gt;
                &lt;/figure&gt;
            &lt;/div&gt;
        &lt;/div&gt;
    )
}
</pre>
<p>Let&#8217;s add some additional quotes to our program using dummy data.</p>
<p>We&#8217;ll need to write a loader function to assist with data loading and provisioning. Add the following to our <code>app/routes/index.jsx</code> file:</p>
<pre class="language-javascript hljs">// app/routes/index.jsx
import { Link, useLoaderData } from "@remix-run/react";
import { json } from "@remix-run/node";

export const loader = async () =&gt; {

    return json({
        quotes: [
            {
                quote: 'Light at the end of the tunnel, dey don cut am.',
                by: 'Brain Jotter'
            },
            {
                quote: 'Promised to stand by you, we don sit down.',
                by: 'Brain Jotter'
            },
            {
                quote: 'Polythecnic wey dey in Italy, Napoli.',
                by: 'Comrade with wisdom and Understanding'
            }
        ]
    })
};
...
</pre>
<p>Here, we import the <code>useLoaderData</code> from <code>'@remix-run/react</code> Hook so we can access the provided data from the loader function. Also, we <code>import { json } from ‘@remix-run/node</code> in order to return data in JSON format.</p>
<p>Now, let’s populate the page with the quotes. With the data provided, let’s populate it on the page with the <code>map</code> function:</p>
<pre class="language-javascript hljs">// app/routes/index.jsx
...
export default function Index() {
  const { quotes } = useLoaderData();

  return (
    &lt;div&gt;
      &lt;nav&gt;...&lt;/nav&gt;
      &lt;div className="grid lg:grid-flow-row grid-cols-1 lg:grid-cols-3"&gt;
        {
          quotes.map((q, i) =&gt; {
            const { quote, by } = q;
            return (
              &lt;figure key={i} className="m-4 py-10 px-4 shadow-md shadow-sky-100"&gt;
                &lt;blockquote cite="https://wisdomman.com" className="py-3"&gt;
                  &lt;p className="text-gray-800  text-xl"&gt;
                    {quote}
                  &lt;/p&gt;
                &lt;/blockquote&gt;
                &lt;figcaption&gt;
                  &lt;cite className="text-gray-600 text-md mb-4 text-right"&gt;
                    - {by}
                  &lt;/cite&gt;
                &lt;/figcaption&gt;
              &lt;/figure&gt;
            )
          })
        }
      &lt;/div&gt;
    &lt;/div&gt;
  )
}
</pre>
<h2 id="setting-up-the-database">Setting up the database</h2>
<p>Data persistence is required in almost all real-world applications. We&#8217;d like to save our quotes to a database so that others can read them and possibly submit their own.</p>
<h3 id="setting-up-prisma">Setting up Prisma</h3>
<p>We&#8217;ll utilize our own SQLite database in this article. It&#8217;s basically a database that sits in a file on your computer, is remarkably capable, and best of all is supported by Prisma. If you&#8217;re not sure which database to utilize, this is an excellent place to start.</p>
<p>To get started, we’ll have to install the following packages:</p>
<ul>
<li><code>prisma</code> for interacting with our database and schema during development</li>
<li><code>@prisma/client</code> for making queries to our database during runtime</li>
</ul>
<p>Install the Prisma packages:</p>
<pre class="language-bash hljs">npm install --save-dev prisma
npm install @prisma/client
</pre>
<p>And we can now initialize Prisma with SQLite:</p>
<pre class="language-bash hljs">npx prisma init --datasource-provider sqlite</pre>
<p>The following is what you will get:</p>
<pre>&#x2714; Your Prisma schema was created at prisma/schema.prisma
  You can now open it in your favorite editor.

warn You already have a .gitignore. Don't forget to exclude .env to not commit any secret.

Next steps:
1. Set the DATABASE_URL in the .env file to point to your existing database. If your database has no tables yet, read https://pris.ly/d/getting-started
2. Run prisma db pull to turn your database schema into a Prisma schema.
3. Run prisma generate to generate the Prisma Client. You can then start querying your database.

More information in our documentation:
<blockquote class="embedly-card" data-card-controls="1" data-card-align="center" data-card-theme="light"><h4><a href="https://pris.ly/d/getting-started">Getting started</a></h4><p>Getting started</p></blockquote><script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"></script>
</pre>
<p>We should notice new files and folders like <code>prisma/schema.prisma</code> after running the command above.</p>
<p>Our <code>prisma/schema.prisma</code> should look like this:</p>
<pre class="language-prisma hljs">// prisma/schema.prisma
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}
</pre>
<p>Now that <a href="https://blog.logrocket.com/prisma-2-introduction/" target="_blank" rel="noopener">Prisma</a> is installed and set up, let&#8217;s begin modeling our app.</p>
<p>Update <code>prisma/schema.prisma</code> with the following:</p>
<pre class="language-prisma hljs">// prisma/schema.prisma
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Quote {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  by        String
  quote     String
}
</pre>
<p>With this, let’s run the following command:</p>
<pre class="language-bash hljs">npx prisma db push
</pre>
<p>The command&#8217;s output will be as follows:</p>
<pre>Environment variables loaded from .env
Prisma schema loaded from prisma/schema.prisma
Datasource "db": SQLite database "dev.db" at "file:./dev.db"

SQLite database dev.db created at file:./dev.db

&#x1f680;  Your database is now in sync with your schema. Done in 158ms

&#x2714; Generated Prisma Client (3.14.0 | library) to ./node_modules/@prisma/client in
 1.44s
</pre>
<p>What occurred was that our database <code>prisma/dev.db</code> was created first, and then all of the essential changes were made to the database to reflect the schema that we specified in the (<code>prisma/schema.prisma</code>) file. Finally, it built Prisma&#8217;s TypeScript types so that when we use its API to connect with the database, we&#8217;ll get fantastic autocomplete and type checking.</p>
<p>Next, let’s add that <code>prisma/dev.db</code> and .<code>env</code> to our <code>.gitignore</code> so we don’t commit them to our GitHub repository:</p>
<pre>node_modules
.output
.cache

/.cache
/build/
/public/build
/api/index.js

`
</pre>
<p>In case your database gets messed up, you can delete the <code>prisma/dev.db</code> file and run the <code>npx prisma db push</code> command again.</p>
<h2 id="connecting-to-the-database">Connecting to the database</h2>
<p>This is how we connect our app with the database. We’ll add the following at the top of our <code>prisma/seed.ts file</code>, which we’ll create later as we progress:</p>
<pre class="language-typescript hljs">import { PrismaClient } from "@prisma/client";
const db = new PrismaClient();
</pre>
<p>While this works perfectly, we don&#8217;t want to have to shut down and restart our server every time we make a server-side modification during development. As a result, <code>@remix-run/serve</code> rebuilds the code from the ground up.</p>
<p>The problem with this strategy is that every time we alter the code, we&#8217;ll create a new database connection, and we&#8217;ll soon run out of connections. With database-accessing apps, this is a prevalent problem. As a result, Prisma issues a caution:</p>
<blockquote><p>Warning: 10 Prisma Clients are already running</p></blockquote>
<p>To avoid this development time problem, we&#8217;ve got a little bit of extra work to do.</p>
<p>Create a new file <code>app/utils/db.server.ts</code> and paste the following code into it:</p>
<pre class="language-typescript hljs">import { PrismaClient } from "@prisma/client";

let db: PrismaClient;

declare global {
  var __db: PrismaClient | undefined;
}

// this is needed because in development we don't want to restart
// the server with every change, but we want to make sure we don't
// create a new connection to the DB with every change either.
if (process.env.NODE_ENV === "production") {
  db = new PrismaClient();
} else {
  if (!global.__db) {
    global.__db = new PrismaClient();
  }
  db = global.__db;
}

export { db };
</pre>
<p>The file naming convention is one thing I&#8217;d like to point out. The <code>.server</code> piece of the filename tells Remix that this code should never be displayed in a browser. This isn&#8217;t required because Remix does a fantastic job at keeping server code out of the client.</p>
<p>However, because some server-only dependencies can be difficult to tree shake, appending <code>.server</code> to the filename tells the compiler to ignore this module and its imports when bundling for the browser. For the compiler, the <code>.server</code> works as a sort of barrier.</p>
<p>Let’s create a new file called <code>prisma/seed.ts</code> and paste the following code snippet:</p>
<pre class="language-typescript hljs">import { PrismaClient } from "@prisma/client";

const db = new PrismaClient();

async function seed() {
    await Promise.all(
        getQuotes().map((quote) =&gt; {
            return db.quote.create({ data: quote })
        })
    )
}
seed();

function getQuotes() {
    return [
        {
            quote: 'The greatest glory in living lies not in never falling, but in rising every time we fall.',
            by: 'Nelson Mandela'
        },
        {
            quote: 'The way to get started is to quit talking and begin doing.',
            by: 'Walt Disney'
        },
        {
            quote: "Your time is limited, so don't waste it living someone else's life. Don't be trapped by dogma – which is living with the results of other people's thinking.",
            by: 'Steve Jobs'
        },
        {
            quote: "If life were predictable it would cease to be life, and be without flavor.",
            by: 'Eleanor Roosevelt'
        },
        {
            quote: "If you look at what you have in life, you'll always have more. If you look at what you don't have in life, you'll never have enough.",
            by: 'Oprah Winfrey'
        },
        {
            quote: "If you set your goals ridiculously high and it's a failure, you will fail above everyone else's success.",
            by: 'James Cameron'
        },
        {
            quote: "Life is what happens when you're busy making other plans.",
            by: 'John Lennon'
        }
    ]
}
</pre>
<p>You are welcome to contribute new quotes to this list.</p>
<p>We must now run this program in order to seed our database with dummy quotes.</p>
<p>Install <code>esbuild-register</code> as a dev dependency in order to run the seed file:</p>
<pre class="language-bash hljs">npm install --save-dev esbuild-register
</pre>
<p>And now we can run our <code>seed.ts</code> file with the following command:</p>
<pre class="language-bash hljs">node --require esbuild-register prisma/seed.ts
</pre>
<p>The dummy quotes have now been seeded into our database.<br />
We don&#8217;t need to run the above command each time we reset the database, so we&#8217;ll put it to our <code>package.json</code> file:</p>
<pre class="language-json hljs">// ...
  "prisma": {
    "seed": "node --require esbuild-register prisma/seed.ts"
  },
  "scripts": {
// ...
</pre>
<p>Now, any time we reset the database, Prisma will call our seed file as well.</p>
<h2 id="fetching-quotes-from-the-database-using-the-remix-loader">Fetching quotes from the database using the Remix loader</h2>
<p>Our aim is to put a list of the quotes on the <code>/</code> route</p>
<p>A <code>loader</code> is used to load data into a Remix route module. This is essentially an <code>async</code> function you export that returns a response and is accessed via the <code>useLoaderData</code> hook on the component.</p>
<p>Let&#8217;s make some changes to <code>app/route/index.tsx</code>:</p>
<pre class="language-typescript hljs">...
import { db } from "~/utils/db.server";


export const loader = async () =&gt; {

  return json({
    quotes: await db.quote.findMany()
  })
};

export default function Index() {
  const { quotes } = useLoaderData();

  return (
    &lt;div&gt;
      &lt;nav&gt;&lt;/nav&gt;
      &lt;div className="grid lg:grid-flow-row grid-cols-1 lg:grid-cols-3"&gt;
        {
          quotes.map((q, i) =&gt; {
            const { id, quote, by } = q;
            return (
              &lt;figure key={id} className="m-4 py-10 px-4 shadow-md shadow-sky-100"&gt;
                &lt;blockquote  className="py-3"&gt;
                  &lt;p className="text-gray-800  text-xl"&gt;
                    {quote}
                  &lt;/p&gt;
                &lt;/blockquote&gt;
                &lt;figcaption&gt;
                  &lt;cite className="text-gray-600 text-md mb-4 text-right"&gt;
                    - {by}
                  &lt;/cite&gt;
                &lt;/figcaption&gt;
              &lt;/figure&gt;
            )
          })
        }
      &lt;/div&gt;
    &lt;/div&gt;
  )
}
</pre>
<p>Run <code>npm run dev</code> and here is what you will get:</p>
<p><img data-attachment-id="121960" data-permalink="https://blog.logrocket.com/handling-user-authentication-remix/attachment/quote-wall/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2022/07/quote-wall.png" data-orig-size="730,368" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="Quote wall" data-image-description="" data-image-caption="" data-medium-file="https://blog.logrocket.com/wp-content/uploads/2022/07/quote-wall-300x151.png" data-large-file="https://blog.logrocket.com/wp-content/uploads/2022/07/quote-wall.png" loading="lazy" class="aligncenter size-full wp-image-121960" src="https://blog.logrocket.com/wp-content/uploads/2022/07/quote-wall.png" alt="Quote Wall" width="730" height="368" srcset="https://blog.logrocket.com/wp-content/uploads/2022/07/quote-wall.png 730w, https://blog.logrocket.com/wp-content/uploads/2022/07/quote-wall-300x151.png 300w" sizes="(max-width: 730px) 100vw, 730px" /></p>
<h2 id="creating-new-quotes">Creating new quotes</h2>
<p>Let&#8217;s build a means to add new quotes to the database now that we&#8217;ve been able to display them from the database storage, shall we?</p>
<p>Create <code>app/routes/new-quote.tsx</code> file and add the following to the file:</p>
<pre class="language-typescript hljs">const inputClassName = `w-full rounded border border-gray-500 px-2 py-1 text-lg text-purple-900 outline-purple-300 `;
export default function NewQuoteRoute() {
    return (
      &lt;div className="flex justify-center items-center content-center"&gt;
            &lt;div className="lg:m-10 my-10 md:w-2/3 lg:w-1/2 bg-gradient-to-br from-purple-500 via-purple-400 to-purple-300  font-bold px-5 py-6 rounded-md"&gt;
                &lt;form method="post"&gt;
                    &lt;label className="text-lg leading-7 text-white"&gt;
                        Quote Master (Quote By):
                        &lt;input
                            type="text"
                            className={inputClassName}
                            name="by"
                            required
                        /&gt;
                    &lt;/label&gt;
                    &lt;label className="text-lg leading-7 text-white"&gt;
                        Quote Content:
                        &lt;textarea required className={`${inputClassName} resize-none `} id="" cols={30} rows={10} name="quote"&gt;&lt;/textarea&gt;
                    &lt;/label&gt;
                    &lt;button className="my-4 py-3 px-10 text-purple-500 font-bold border-4 hover:scale-105 border-purple-500 rounded-lg bg-white" type="submit"&gt;Add&lt;/button&gt;
                &lt;/form&gt;
            &lt;/div&gt;
        &lt;/div&gt;
    )
}
</pre>
<p>Here is the what the form page looks like:</p>
<p><img data-attachment-id="121962" data-permalink="https://blog.logrocket.com/handling-user-authentication-remix/attachment/quote-wall-fields/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2022/07/quote-wall-fields.png" data-orig-size="730,359" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="Quote wall fields" data-image-description="" data-image-caption="" data-medium-file="https://blog.logrocket.com/wp-content/uploads/2022/07/quote-wall-fields-300x148.png" data-large-file="https://blog.logrocket.com/wp-content/uploads/2022/07/quote-wall-fields.png" loading="lazy" class="aligncenter size-full wp-image-121962" src="https://blog.logrocket.com/wp-content/uploads/2022/07/quote-wall-fields.png" alt="Quote Wall Fields" width="730" height="359" srcset="https://blog.logrocket.com/wp-content/uploads/2022/07/quote-wall-fields.png 730w, https://blog.logrocket.com/wp-content/uploads/2022/07/quote-wall-fields-300x148.png 300w" sizes="(max-width: 730px) 100vw, 730px" /></p>
<p>Let’s update the <code>app/routes/new-quote.tsx</code> file with the following in order to submit data.</p>
<pre class="language-typescript hljs">import { redirect } from "@remix-run/node";
import { db } from "~/utils/db.server";

export const action = async ({ request }) =&gt; {

    const form = await request.formData();
    const by = form.get('by');
    const quote = form.get('quote');

    if (
        typeof by !== "string" || by === "" ||
        typeof quote !== "string" || quote === ""
    ) {
        redirect('/new-quote')
        throw new Error(`Form not submitted correctly.`);
    }
    const fields = { by, quote };

    await db.quote.create({ data: fields });
    return redirect('/');
}
...
</pre>
<p>The action method is called for <code>POST</code>, <code>PATCH</code>, <code>PUT</code>, and <code>DELETE</code> HTTP methods, and it is used to edit or mutate data. The request attribute gives us access to the form data so we can validate it and submit the request to the server.</p>
<p>We can now add quotes, which will take us to the main page, which will display the new quotes we&#8217;ve added.</p>
<p>Notice how we processed the form submission without needing to use any React Hooks.</p>
<h2 id="username-password-authentication">Username/password authentication</h2>
<p>Let’s look at how we can handle authentication to restrict unregistered users from posting.</p>
<p>In this article, we’ll implement the traditional username/password authentication strategy.</p>
<p>We&#8217;ll be using <code><a href="https://npm.im/bcryptjs" target="_blank" rel="noopener">bcryptjs</a></code> to hash our passwords so nobody will be able to reasonably brute-force their way into an account.</p>
<p>We’ll install the bcrypt library and its type definition as follows:</p>
<pre class="language-bash hljs">npm install bcryptjs
npm install --save-dev @types/bcryptjs
</pre>
<p>We have to update the <code>prisma/schema.prisma</code> file with the user model and it should look like this:</p>
<pre>generator client {
  provider = "prisma-client-js"
}
datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}
model User {
  id           String   @id @default(uuid())
  createAt     DateTime @default(now())
  updatedAt    DateTime @updatedAt
  username     String   @unique
  passwordHash String
  quotes       Quote[]
}
model Quote {
  id        String   @id @default(uuid())
  userId    String
  addedBy   User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  by        String
  quote     String
}
</pre>
<p>Next, we’ll reset our database with this schema by running the following command:</p>
<pre class="language-bash hljs">npx prisma db push
</pre>
<p>Running this command will prompt you to reset the database, hit <strong>Y</strong> to confirm.</p>
<p>Next, we’ll update the seed function in our <code>prisma/seed.ts</code> file as follows:</p>
<pre class="language-typescript hljs">...
async function seed() {
    // WisdomMan is a default user with the password   'twixrox'
    const wisdomMan = await db.user.create({
        data: {
          username: "WisdomMan",
          // this is a hashed version of "twixrox"
          passwordHash:
            "$2b$10$K7L1OJ45/4Y2nIvhRVpCe.FSmhDdWoXehVzJptJ/op0lSsvqNu/1u",
        },
      });
    await Promise.all(
        getQuotes().map((quote) =&gt; {
            const data = {userId:wisdomMan.id, ...quote}
            return db.quote.create({ data })
        })
    )
}
seed();
...
</pre>
<p>Here, we seed in a user with the username &#8220;WisdomMan&#8221; and the password hash of &#8220;twixrox&#8221;.” Also, we seed the database with all our dummy quotes.</p>
<p>We have to run the seed again with the following:</p>
<pre class="language-bash hljs">npx prisma db seed
</pre>
<h2 id="form-validation-with-action">Form validation with <code>action</code></h2>
<p>Let’s create a <code>/login</code> route by adding a <code>app/routes/login.tsx</code> file with the following validation logics for our login and registration forms:</p>
<pre class="language-typescript hljs">import { json } from "@remix-run/node";

function validateUsername(username: unknown) {
    if (typeof username !== "string" || username.length &lt; 3) {
        return `Usernames must be at least 3 characters long`;
    }
}
function validatePassword(password: unknown) {
    if (typeof password !== "string" || password.length &lt; 6) {
        return `Passwords must be at least 6 characters long`;
    }
}
function validateUrl(url: any) {
    console.log(url);
    let urls = ["/"];
    if (urls.includes(url)) {
        return url;
    }
    return "/";
}
const badRequest = (data: any) =&gt;
    json(data, { status: 400 }
);
</pre>
<p>Here, we wrote some custom validation logic for username, password and the url.</p>
<p>Next, we’ll update the <code>app/routes/login.tsx</code> file with the following JSX template:</p>
<pre class="language-typescript hljs">import type {
  ActionFunction,
  LinksFunction,
} from "@remix-run/node";
import {
  useActionData,
  Link,
  useSearchParams,
} from "@remix-run/react";
import { db } from "~/utils/db.server";
...

const inputClassName = `w-full rounded border border-gray-500 px-2 py-1 text-lg text-purple-900 outline-purple-300 `;
export default function LoginRoute() {
    const actionData = useActionData();
    const [searchParams] = useSearchParams();
    return (
        &lt;div className="flex justify-center items-center content-center text-white"&gt;
            &lt;div className="lg:m-10 my-10 md:w-2/3 lg:w-1/2 bg-gradient-to-br from-purple-500 via-purple-400 to-purple-300  font-bold px-5 py-6 rounded-md"&gt;
                &lt;form method="post"&gt;
                    &lt;h1 className="text-center text-2xl text-white"&gt;Login&lt;/h1&gt;
                    &lt;input
                        type="hidden"
                        name="redirectTo"
                        value={
                            searchParams.get("redirectTo") ?? undefined
                        }
                    /&gt;
                    &lt;fieldset className="text-center "&gt;
                        &lt;legend className="sr-only"&gt;
                            Login or Register?
                        &lt;/legend&gt;
                        &lt;label&gt;
                            &lt;input
                                type="radio"
                                name="loginType"
                                value="login"
                                defaultChecked={
                                    !actionData?.fields?.loginType ||
                                    actionData?.fields?.loginType === "login"
                                }
                            /&gt;{" "}
                            Login
                        &lt;/label&gt;
                        &lt;label&gt;
                            &lt;input
                                type="radio"
                                name="loginType"
                                value="register"
                                defaultChecked={
                                    actionData?.fields?.loginType ===
                                    "register"
                                }
                            /&gt;{" "}
                            Register
                        &lt;/label&gt;
                    &lt;/fieldset&gt;
                    &lt;label className="text-lg leading-7 text-white"&gt;
                        Username:
                        &lt;input
                            type="text"
                            className={inputClassName}
                            name="username"
                            required
                            minLength={3}
                            defaultValue={actionData?.fields?.username}
                            aria-invalid={Boolean(
                                actionData?.fieldErrors?.username
                            )}
                            aria-errormessage={
                                actionData?.fieldErrors?.username
                                    ? "username-error"
                                    : undefined
                            }
                        /&gt;
                        {actionData?.fieldErrors?.username ? (
                            &lt;p
                                className="text-red-500"
                                role="alert"
                                id="username-error"
                            &gt;
                                {actionData.fieldErrors.username}
                            &lt;/p&gt;
                        ) : null}
                    &lt;/label&gt;
                    &lt;label className="text-lg leading-7 text-white"&gt;
                        Password
                        &lt;input
                            name="password"
                            className={inputClassName}
                            required
                            defaultValue={actionData?.fields?.password}
                            type="password"
                            aria-invalid={
                                Boolean(
                                    actionData?.fieldErrors?.password
                                ) || undefined
                            }
                            aria-errormessage={
                                actionData?.fieldErrors?.password
                                    ? "password-error"
                                    : undefined
                            }
                        /&gt;
                        {actionData?.fieldErrors?.password ? (
                            &lt;p
                                className="text-red-500"
                                role="alert"
                                id="password-error"
                            &gt;
                                {actionData.fieldErrors.password}
                            &lt;/p&gt;
                        ) : null}
                    &lt;/label&gt;
                    &lt;div id="form-error-message"&gt;
                        {actionData?.formError ? (
                            &lt;p
                                className="text-red-500"
                                role="alert"
                            &gt;
                                {actionData.formError}
                            &lt;/p&gt;
                        ) : null}
                    &lt;/div&gt;
                    &lt;button className="my-4 py-2 px-7 text-purple-500 font-bold border-2 hover:scale-105 border-purple-500 rounded-lg bg-white" type="submit"&gt;Login&lt;/button&gt;
                &lt;/form&gt;
            &lt;/div&gt;
        &lt;/div&gt;
    )
}
</pre>
<p>Here, we use <code>useSearchParams</code> to get the <code>redirectTo</code> query parameter and putting that in a hidden input. This way, our <code>action</code> can know where to redirect the user. We’ll use this to redirect a user to the login and registration page. We added some conditions to our JSX to display error messages in the form if any occurs.</p>
<h2 id="creating-session-helpers">Creating session helpers</h2>
<p>Before creating our session helpers, let’s add session secret to our <code>.env</code> file as follows:</p>
<pre>SESSION_SECRET=secret
</pre>
<p>Let’s create a file called <code>app/utils/session.server.ts</code> and add the following session helper functions:</p>
<pre class="language-typescript hljs">import bcrypt from "bcryptjs";
import {
    createCookieSessionStorage,
    redirect,
} from "@remix-run/node";
import { db } from "./db.server";
const sessionSecret = process.env.SESSION_SECRET;
if (!sessionSecret) {
    throw new Error("SESSION_SECRET must be set");
}
const storage = createCookieSessionStorage({
    cookie: {
        name: "RJ_session",
        // normally you want this to be `secure: true`
        // but that doesn't work on localhost for Safari
        // https://web.dev/when-to-use-local-https/
        secure: process.env.NODE_ENV === "production",
        secrets: [sessionSecret],
        sameSite: "lax",
        path: "/",
        maxAge: 60 * 60 * 24 * 30,
        httpOnly: true,
    },
});
export async function createUserSession(
    userId: string,
    redirectTo: string
) {
    const session = await storage.getSession();
    session.set("userId", userId);
    return redirect(redirectTo, {
        headers: {
            "Set-Cookie": await storage.commitSession(session),
        },
    });
}
function getUserSession(request: Request) {
    return storage.getSession(request.headers.get("Cookie"));
}
</pre>
<p>Here, we create our session storage using the <code>createCookieSessionStorage</code> method. The <code>createUserSession</code> function gets the stored session and sets it to our unique user ID and sets the cookie to the request header. The <code>getUser</code> function retrieves the user cookie from the request headers.</p>
<p>Next, we’ll add helper functions to retrieve users by their unique ID.</p>
<p>Add the following to the <code>app/utils/session.server.ts</code> file:</p>
<pre class="language-typescript hljs">...

export async function getUserId(request: Request) {
  const session = await getUserSession(request);
  const userId = session.get("userId");
  if (!userId || typeof userId !== "string") return null;
  return userId;
}

export async function getUser(request: Request) {
  const userId = await getUserId(request);
  if (typeof userId !== "string") {
    return null;
  }
  try {
    const user = await db.user.findUnique({
      where: { id: userId },
      select: { id: true, username: true },
    });
    return user;
  } catch {
    throw logout(request);
  }
}
</pre>
<p>Here, the <code>getUserId</code> function retrieves the user id from the existing session while the <code>getUser</code> function uses the retrieved user ID to query the database for a user with a matching ID. We’ll implement the logout session helper as we proceed.</p>
<p>Next, we’ll create a helper function to prevent unauthenticated users from creating quotes.</p>
<p>Add the following to the <code>app/utils/session.server.ts</code> file:</p>
<pre class="language-typescript hljs">export async function requireUserId(
  request: Request,
  redirectTo: string = new URL(request.url).pathname
) {
  const session = await getUserSession(request);
  const userId = session.get("userId");
  if (!userId || typeof userId !== "string") {
    const searchParams = new URLSearchParams([
      ["redirectTo", redirectTo],
    ]);
    throw redirect(`/login?${searchParams}`);
  }
  return userId;
}
</pre>
<p>With the following implementation, users who are not signed in will be redirected to the login route whenever they try to create a quote.</p>
<p>Next, the login, register, and logout helper functions.</p>
<p>Add the following to the <code>app/utils/session.server.ts</code> file:</p>
<pre class="language-typescript hljs">...
type LoginForm = {
  username: string;
  password: string;
};

export async function register({
  username,
  password,
}: LoginForm) {
  const passwordHash = await bcrypt.hash(password, 10);
  const user = await db.user.create({
    data: { username, passwordHash },
  });
  return { id: user.id, username };
}

export async function login({
  username,
  password,
}: LoginForm) {
  const user = await db.user.findUnique({
    where: { username },
  });
  if (!user) return null;
  const isCorrectPassword = await bcrypt.compare(
    password,
    user.passwordHash
  );
  if (!isCorrectPassword) return null;
  return { id: user.id, username };
}

export async function logout(request: Request) {
  const session = await getUserSession(request);
  return redirect("/login", {
    headers: {
      "Set-Cookie": await storage.destroySession(session),
    },
  });
}
</pre>
<p>The <code>register</code> function uses <code>bcrypt.hash</code> to hash the password before we store it in the database and then return the user ID and username. The <code>login</code> function query the database by username. If found, the <code>bcrypt.compare</code> method is used to compare the password with the passwordhash then return the user id and username. The <code>logout</code> function destroys the existing user session and redirects to the login route.</p>
<h2 id="processing-login-and-register-form-submissions">Processing login and register form submissions</h2>
<p>You should have a fair knowledge on how to handle form submission since we’ve done the same in the create new quote section.</p>
<p>Similarly, we’ll create an action method that will accept the request object, which is used to modify or mutate data on the server.</p>
<p>Now, let’s update the <code>app/routes/login.tsx</code> file with the following:</p>
<pre class="language-typescript hljs">import { createUserSession, login, register } from "~/utils/session.server";
...
export const action: ActionFunction = async ({ request }) =&gt; {
    const form = await request.formData();
    const loginType = form.get("loginType");
    const username = form.get("username");
    const password = form.get("password");
    const redirectTo = validateUrl(
        form.get("redirectTo") || "/"
    );
    if (
        typeof loginType !== "string" ||
        typeof username !== "string" ||
        typeof password !== "string" ||
        typeof redirectTo !== "string"
    ) {
        return badRequest({
            formError: `Form not submitted correctly.`,
        });
    }
    const fields = { loginType, username, password };
    const fieldErrors = {
        username: validateUsername(username),
        password: validatePassword(password),
    };
    if (Object.values(fieldErrors).some(Boolean))
        return badRequest({ fieldErrors, fields });
    switch (loginType) {
        case "login": {
            const user = await login({ username, password });
            console.log({ user });
            if (!user) {
                return badRequest({
                    fields,
                    formError: `Username/Password combination is incorrect`,
                });
            }
            return createUserSession(user.id, redirectTo);
        }
        case "register": {
            const userExists = await db.user.findFirst({
                where: { username },
            });
            if (userExists) {
                return badRequest({
                    fields,
                    formError: `User with username ${username} already exists`,
                });
            }
            const user = await register({ username, password });
            if (!user) {
                return badRequest({
                    fields,
                    formError: `Something went wrong trying to create a new user.`,
                });
            }
            return createUserSession(user.id, redirectTo);
        }
        default: {
            return badRequest({
                fields,
                formError: `Login type invalid`,
            });
        }
    }
};
</pre>
<p>Here, we wrote a control flow using the <code>switch</code> statement for both login and register cases. For the login flow, if there&#8217;s no user, the fields and a <code>formError</code> will be returned. If there is a user, we’ll create their session and redirect to <code>/quotes</code>. For the register flow, we check if the user exists. If there&#8217;s no user, we’ll create one alongside a session and redirect to <code>/</code>.</p>
<h2 id="making-a-logout-feature">Making a logout feature</h2>
<p>Let’s create a file called <code>app/routes/logout.tsx</code> and add the following:</p>
<pre class="language-typescript hljs">import type { ActionFunction, LoaderFunction } from "@remix-run/node";
import { redirect } from "@remix-run/node";
import { logout } from "~/utils/session.server";
export const action: ActionFunction = async ({ request }) =&gt; {
  return logout(request);
};
export const loader: LoaderFunction = async () =&gt; {
  return redirect("/");
};
</pre>
<p>Update the <code>app/routes/index.tsx</code> file with the following:</p>
<pre class="language-typescript hljs">...
import { getUser } from "~/utils/session.server";

export const loader = async ({ request }) =&gt; {
  const user = await getUser(request);
  return json({
    quotes: await db.quote.findMany(),
    user
  })
};
export default function Index() {
  const { quotes, user } = useLoaderData();
  return (
    &lt;div&gt;
      &lt;nav className="bg-gradient-to-br from-purple-400 via-purple-500 to-purple-500 w-full fixed top-0 left-0 px-5"&gt;
        &lt;div
          className="w-full max-w-screen-lg mx-auto flex justify-between content-center py-3 "&gt;
          &lt;Link className="text-white text-3xl font-bold" to={"/"}&gt;Quote Wall&lt;/Link&gt;
          &lt;div className="flex flex-row items-center justify-between gap-x-4 text-blue-50"&gt;
            {
              user ? (
                &lt;&gt;
                  &lt;Link to={"new-quote"}&gt;Add A Quote&lt;/Link&gt;

                  &lt;form action="/logout" method="post"&gt;
                    &lt;button type="submit" className="button"&gt;
                      Logout
                    &lt;/button&gt;
                  &lt;/form&gt;
                &lt;/&gt;) : (
                &lt;&gt;
                  &lt;Link to={"login"}&gt;Login&lt;/Link&gt;
                  &lt;Link to={"login"}&gt;Register&lt;/Link&gt;
                &lt;/&gt;
              )
            }

          &lt;/div&gt;
        &lt;/div &gt;
      &lt;/nav &gt;
      &lt;div className="grid lg:grid-flow-row grid-cols-1 lg:grid-cols-3"&gt;
        ...
      &lt;/div&gt;
    &lt;/div &gt;
  )
}
</pre>
<p>Now that we are done with all the authentication logic, we’ll need to update <code>routes/new-quote</code> so that only authenticated users can create new quotes.</p>
<p>Update the <code>app/routes/new-quote.tsx</code> file with the following:</p>
<pre class="language-typescript hljs">import { redirect, json } from "@remix-run/node";
import { db } from "~/utils/db.server";
import { requireUserId, getUser } from "~/utils/session.server";
import { Link, useLoaderData } from "@remix-run/react";

export const action = async ({ request }) =&gt; {
  const userId = await requireUserId(request);
  const form = await request.formData();
  const by = form.get("by");
  const quote = form.get("quote");
  if (
    typeof by !== "string" ||
    by === "" ||
    typeof quote !== "string" ||
    quote === ""
  ) {
    redirect("/new-quote");
    throw new Error(`Form not submitted correctly.`);
  }
  const fields = { by, quote };
  await db.quote.create({
    data: { ...fields, userId: userId },
  });
  return redirect("/");
};
export const loader = async ({ request }) =&gt; {
  const user = await getUser(request);
  return json({
    user,
  });
};
</pre>
<p>Next, we’ll update our TSX template as follows:</p>
<pre class="language-typescript hljs">...

const inputClassName = `w-full rounded border border-gray-500 px-2 py-1 text-lg text-purple-900 outline-purple-300 `;
export default function NewQuoteRoute() {
    const { user } = useLoaderData();
  return (
    &lt;&gt;
      &lt;nav className="bg-gradient-to-br from-purple-400 via-purple-500 to-purple-500 w-full fixed top-0 left-0 px-5"&gt;
        &lt;div className="w-full max-w-screen-lg mx-auto flex justify-between content-center py-3 "&gt;
          &lt;Link className="text-white text-3xl font-bold" to={"/"}&gt;
            Quote Wall
          &lt;/Link&gt;
          &lt;div className="flex flex-row items-center justify-between gap-x-4 text-blue-50"&gt;
            {user ? (
              &lt;&gt;
                &lt;Link to={"new-quote"}&gt;Add A Quote&lt;/Link&gt;
                &lt;form action="/logout" method="post"&gt;
                  &lt;button type="submit" className="button"&gt;
                    Logout
                  &lt;/button&gt;
                &lt;/form&gt;
              &lt;/&gt;
            ) : (
              &lt;&gt;
                &lt;Link to={"login"}&gt;Login&lt;/Link&gt;
                &lt;Link to={"register"}&gt;Register&lt;/Link&gt;
              &lt;/&gt;
            )}
          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/nav&gt;
      &lt;div className="flex justify-center items-center content-center"&gt;
        &lt;div className="lg:m-10 my-10 md:w-2/3 lg:w-1/2 bg-gradient-to-br from-purple-500 via-purple-400 to-purple-300  font-bold px-5 py-6 rounded-md"&gt;
          &lt;form method="post"&gt;
            &lt;label className="text-lg leading-7 text-white"&gt;
              Quote Master (Quote By):
              &lt;input
                type="text"
                className={inputClassName}
                name="by"
                required
              /&gt;
            &lt;/label&gt;
            &lt;label className="text-lg leading-7 text-white"&gt;
              Quote Content:
              &lt;textarea
                required
                className={`${inputClassName} resize-none `}
                id=""
                cols={30}
                rows={10}
                name="quote"
              &gt;&lt;/textarea&gt;
            &lt;/label&gt;
            &lt;button
              className="my-4 py-3 px-10 text-purple-500 font-bold border-4 hover:scale-105 border-purple-500 rounded-lg bg-white"
              type="submit"
            &gt;
              Add
            &lt;/button&gt;
          &lt;/form&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/&gt;
  );
}
</pre>
<p>Now, only the authenticated users can create new quotes in our app while unauthenticated users will be redirected to the <code>/login</code> route when they try to create a new quote. We can check out the final version of our project by spinning up our development server with the following command:</p>
<pre class="language-bash hljs">npm run dev
</pre>
<h2 id="conclusion">Conclusion</h2>
<p>We have finally come to the end of this tutorial. We have taken a look at how to implement authentication on <a href="https://blog.logrocket.com/remix-guide-newly-open-sourced-react-framework/" target="_blank" rel="noopener">Remix</a> apps, and we have successfully built a fullstack quote wall application with support for user authentication. There are so many ways this can be improved, and I can’t wait to see what you build next with Remix. Thanks for reading.</p>
<p>The post <a rel="nofollow" href="https://blog.logrocket.com/handling-user-authentication-remix/">Handling user authentication with Remix</a> appeared first on <a rel="nofollow" href="https://blog.logrocket.com">LogRocket Blog</a>.</p>
]]>
      </content:encoded>

      <wfw:commentRss>https://blog.logrocket.com/handling-user-authentication-remix/feed/</wfw:commentRss>
      <slash:comments>0</slash:comments>


      <post-id xmlns="com-wordpress:feed-additions:1">121948</post-id>
    </item>
    <item>
      <title>Using barrel exports to organize React components</title>
      <link>https://blog.logrocket.com/using-barrel-exports-organize-react-components/</link>
      <comments>https://blog.logrocket.com/using-barrel-exports-organize-react-components/#respond</comments>

      <dc:creator>
        <![CDATA[Nelson Michael]]>
      </dc:creator>
      <pubDate>Fri, 01 Jul 2022 14:30:30 +0000</pubDate>
      <category>
        <![CDATA[Uncategorized]]>
      </category>
      <category>
        <![CDATA[react]]>
      </category>
      <guid isPermaLink="false">https://blog.logrocket.com/?p=121829</guid>

      <description>
        <![CDATA[<p>Here, we introduce the concept of barrel exports in React and discuss how to use barrel exports to save development time.</p>
<p>The post <a rel="nofollow" href="https://blog.logrocket.com/using-barrel-exports-organize-react-components/">Using barrel exports to organize React components</a> appeared first on <a rel="nofollow" href="https://blog.logrocket.com">LogRocket Blog</a>.</p>
]]>
      </description>
      <content:encoded>
        <![CDATA[<p>A common task when developing React applications is the act of bringing components or modules from different files into the parts of the application where they are needed. You may find that you often have to dig deep into your folder structure just to import a single React module.</p>
<p>Now, imagine having to do the same thing for multiple modules. This would be very tedious and would also make our codebase a bit messy, which nobody likes!</p>
<p>In this article, we’ll introduce the concept of barrel exports in React, and we’ll discuss how to use barrel exports to save development time and improve collaboration and efficiency. We’ll even look at an advanced use case for when you want to use multiple aliases on a single import statement.</p>
<p><em>Jump ahead:</em></p>
<ul>
<li><a href="#what-are-barrel-exports">What are barrel exports?</a></li>
<li><a href="#benefits-of-barrel-exports">What are the benefits of barrel exports?</a></li>
<li><a href="#how-to-use-barrel-exports">How do you use barrel exports in React?</a></li>
<li><a href="#advanced-use-case-multiple-aliases">Advanced use case: multiple aliases</a></li>
</ul>
<h2 id="what-are-barrel-exports">What are barrel exports?</h2>
<p>A barrel enables us to consolidate, or roll up, exports from multiple files or modules into one single module. Barrels streamline imports, simplify exports, and help us avoid a lot of clutter in our codebase.</p>
<p>Let’s look at how barrels can simplify imports, both mentally and visually.</p>
<p>This code shows how we’d typically handle imports in our React application:</p>
<pre class="language-javascript hljs">import Button from '../../components/utilities/Button.js';
import Alert from '../../components/utilities/Alert.js';
import SnackBar from '../../components/utilities/SnackBar.js'
import Loader from '../../components/utilities/Loader.js'
import Success from '../../components/utilities/Success.js'
</pre>
<p>These are just five import statements, but imagine if we needed more components, we’d have even more lines of code.</p>
<p>Now, here’s how the code looks if we use barrel exports to handle the same five imports:</p>
<pre class="language-javascript hljs">import { Button, Alert, SnackBar, Loader, Success  } from '../../components';
</pre>
<p>We can make the code even cleaner by aliasing everything, so whenever we need a component we just prefix the alias with the React component name, like so:</p>
<pre class="language-javascript hljs">import * as com from '../../components';
</pre>
<p>Here&#8217;s how we use it:</p>
<pre class="language-javascript hljs">const Home=()=&gt;{
    return(
        &lt;div className="home"&gt;
            //aliasing our imports
            &lt;com.Button /&gt;
        &lt;/div&gt;
    )
}
</pre>
<p>Our local imports are cleaner and easier on the eyes, and it doesn&#8217;t take much mental effort to remember where we&#8217;re importing from because it&#8217;s all from one folder.</p>
<p>Isn&#8217;t this exciting? let’s take a look at some additional benefits of working with barrel exports.</p>
<h2 id="benefits-of-barrel-exports">Benefits of barrel exports</h2>
<p>Barrel exports are not just about looks. They do more than keep our codebase clean.</p>
<p>One of the most significant advantages of barrel exports is collaboration. Consider working on an application where multiple teams use a shared UI component. A change to the project structure could break a large number of imports in the application.</p>
<p>We don&#8217;t have to worry about this with barrel exports. We can change the location of React components without having to refactor our import statements.</p>
<p>Here are some of the benefits you get when you load multiple exports into one barrel:</p>
<ul>
<li>Improved component auto-importing</li>
<li>The ability to organize the application folder as we see fit</li>
<li>Improved IntelliSense</li>
<li>Single source of truth for all exports defined in the barrel</li>
</ul>
<p>Now, let’s see how barrel exports actually work.</p>
<h2 id="how-to-use-barrel-exports">How to use barrel exports</h2>
<p>To use barrel exports, here&#8217;s what we need to do:</p>
<ol>
<li>Change from default exports to <a href="https://developer.mozilla.org/en-US/docs/web/javascript/reference/statements/export" target="_blank" rel="noopener">named exports</a>, when exporting React components or modules</li>
<li>Add an <code>index.js</code> file to any directory we want to barrel from (this will effectively become our barrel; we’ll re-export all of our components from this file</li>
</ol>
<p>Let’s walk through a simple example so that we can see how this works.</p>
<p><img data-attachment-id="121837" data-permalink="https://blog.logrocket.com/using-barrel-exports-organize-react-components/attachment/folder-structure-6/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2022/07/folder-structure.png" data-orig-size="256,238" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="Folder structure" data-image-description="" data-image-caption="" data-medium-file="https://blog.logrocket.com/wp-content/uploads/2022/07/folder-structure.png" data-large-file="https://blog.logrocket.com/wp-content/uploads/2022/07/folder-structure.png" loading="lazy" class="aligncenter size-full wp-image-121837" src="https://blog.logrocket.com/wp-content/uploads/2022/07/folder-structure.png" alt="Folder Structure" width="256" height="238" /></p>
<p>The above file tree helps us visualize our folder structure. At the root of the <code>components</code> folder, we have an <code>index.js</code> file, which will be our barrel. The <code>components</code> folder also has three nested folders: <code>layout</code>, <code>modals</code>, and <code>utilities</code>.</p>
<p>In the <code>layout</code> folder, we have three layout component files: <code>Aside.js</code>, <code>Footer.js</code>, and <code>NavBar.js</code>. In the <code>utilities</code> folder we have five files; <code>Alert.js</code>, <code>Loader.js</code>, <code>SnackBar.js</code>, <code>Success.js</code>, and <code>Button.js</code>.</p>
<p>Here’s the full file tree:</p>
<p><img data-attachment-id="121839" data-permalink="https://blog.logrocket.com/using-barrel-exports-organize-react-components/attachment/full-file-tree/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2022/07/full-file-tree.png" data-orig-size="247,388" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="Full file tree" data-image-description="" data-image-caption="" data-medium-file="https://blog.logrocket.com/wp-content/uploads/2022/07/full-file-tree-191x300.png" data-large-file="https://blog.logrocket.com/wp-content/uploads/2022/07/full-file-tree.png" loading="lazy" class="aligncenter size-full wp-image-121839" src="https://blog.logrocket.com/wp-content/uploads/2022/07/full-file-tree.png" alt="Full File Tree" width="247" height="388" srcset="https://blog.logrocket.com/wp-content/uploads/2022/07/full-file-tree.png 247w, https://blog.logrocket.com/wp-content/uploads/2022/07/full-file-tree-191x300.png 191w" sizes="(max-width: 247px) 100vw, 247px" /></p>
<p>To access a React component with barrel exports and use it across our application, we simply use named exports to export the component.</p>
<p>Here’s an example using named exports with the <code>Alert.js</code> file:</p>
<pre class="language-javascript hljs">export const Alert=()=&gt;{
    return&lt;h1&gt;Alert&lt;/h1&gt;
}
</pre>
<p>Now that’s all set up, we can export all the components in a barrel. In the <code>index.js</code> file, at the root of the components folder, we can export all the components using the following commands:</p>
<pre class="language-javascript hljs">export { Alert } from './utilities/Alerts';
export { Button } from './utilities/Button';
export { Loader } from './utilities/Loader';
export {SnackBar} from './utilities/SnackBar';
export { Success } from './utilities/Success';
</pre>
<p>In the above code, we’re only exporting components from the <code>utilities</code> folder.</p>
<p>Now, we can simply use the components, like so:</p>
<pre class="language-javascript hljs">import * as util from './components'
function App() {
  return (
    &lt;div className="App"&gt;
      &lt;h1&gt;Hello World&lt;/h1&gt;
      &lt;util.Button /&gt;
      &lt;util.Loader /&gt;
      &lt;util.Alert /&gt;
      &lt;util.SnackBar /&gt;
      &lt;util.Success /&gt;
    &lt;/div&gt;
  );
}
</pre>
<p>Consider the following scenario: team A and team B are both collaborating on our application. Team A is reorganizing the application and has moved the <code>Button.js</code> file to a different folder located elsewhere in the application.</p>
<p>What do you think will happen to our React application? If you said: “It will break”, you’re correct. Why? Because our barrel is no longer aware of the <code>Button.js</code> file&#8217;s path.</p>
<p>Fortunately, team A can easily fix this issue. Our barrel serves as a single source of truth for all exports defined in it, so team A simply needs to update the <code>Button.js</code> file path in our barrel, and every component that uses it will regain access. There will be no need to manually update the path for each file.</p>
<h2 id="advanced-use-case-multiple-aliases">Advanced use case: multiple aliases</h2>
<p>Now, let’s take our learning a step further. In the previous example, we had just one barrel file in the components folder handling all of the exports from the <code>utilities</code> folder, and we imported the components using the <code>util</code> alias.</p>
<p>That was pretty neat, but don&#8217;t forget we also have a <code>layout</code> folder and a <code>modals</code> folder in our <code>components</code> folder. We can&#8217;t import their respective components using the same <code>util</code> alias, because that would be confusing.</p>
<p>Here&#8217;s how we can have multiple aliases from one central barrel file:</p>
<ol>
<li><a href="#ensure-each-folder-has-its-own-barrel">Ensure each components folder has its own barrel</a></li>
<li><a href="#export-using-an-alias-in-the-main-barrel-file">Export using an alias in the main barrel file</a></li>
<li><a href="#import-using-each-individual-alias">Import using each individual alias</a></li>
</ol>
<p>Let’s see this action:</p>
<h3 id="ensure-each-folder-has-its-own-barrel">Each folder has its own barrel</h3>
<p><img data-attachment-id="121841" data-permalink="https://blog.logrocket.com/using-barrel-exports-organize-react-components/attachment/components-folder-subfolders/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2022/07/components-folder-subfolders.png" data-orig-size="145,337" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="Components folders and subfolders" data-image-description="" data-image-caption="" data-medium-file="https://blog.logrocket.com/wp-content/uploads/2022/07/components-folder-subfolders-129x300.png" data-large-file="https://blog.logrocket.com/wp-content/uploads/2022/07/components-folder-subfolders.png" loading="lazy" class="aligncenter size-full wp-image-121841" src="https://blog.logrocket.com/wp-content/uploads/2022/07/components-folder-subfolders.png" alt="Components Folders and Subfolders" width="145" height="337" srcset="https://blog.logrocket.com/wp-content/uploads/2022/07/components-folder-subfolders.png 145w, https://blog.logrocket.com/wp-content/uploads/2022/07/components-folder-subfolders-129x300.png 129w" sizes="(max-width: 145px) 100vw, 145px" /></p>
<p>The above file tree shows our <code>components</code> folder and subfolders: <code>layout</code>, <code>modals</code>, and <code>utilities</code>. Each subfolder now has its own barrel, or <code>index.js</code> file.</p>
<p>Here’s what the code looks like:</p>
<pre class="language-javascript hljs">//layouts barrel
export { Aside } from "./Aside";
export { Footer } from "./Footer";
export { NavBar } from "./NavBar";

//modals barrel
export {Failure} from './Failure';
export {Success} from './Success';

//utilities barrel
export { Alert } from './Alerts';
export { Button } from './Button';
export { Loader } from './Loader';
export {SnackBar} from './SnackBar';
export { Success } from './Success';
</pre>
<h3 id="export-using-an-alias-in-the-main-barrel-file">Export using an alias in the main barrel file</h3>
<p>Now, we can export the subfolder files in our main barrel using an alias (<code>util</code>, <code>mod</code>, and <code>lay</code>) for each sub-barrel:</p>
<pre class="language-javascript hljs">export * as util from './utilities'
export * as mod from './modals'
export * as lay from './layout'
</pre>
<h3 id="import-using-each-individual-alias">Import using each individual alias</h3>
<p>Now, we can import the subfolder files using their individual alias (<code>util</code>, <code>mod</code>, and <code>lay</code>):</p>
<pre class="language-javascript hljs">import {util, mod, lay} from './components'
</pre>
<p>Components from the <code>utilities</code> folder will have the <code>util</code> prefix, while components from the <code>modals</code> and <code>layout</code> folders will have the <code>mod</code> and <code>lay</code> prefixes, respectively.</p>
<p>Here&#8217;s what the code looks like:</p>
<pre class="language-javascript hljs">&gt;import {util, mod, lay} from './components'
function App() {
  return (
    &lt;div className="App"&gt;
      &lt;h1&gt;Hello World&lt;/h1&gt;
        //Utilities
      &lt;util.Button /&gt;
      &lt;util.Loader /&gt;
      &lt;util.Alert /&gt;
      &lt;util.SnackBar /&gt;
      &lt;util.Success /&gt;

      //modals
      &lt;mod.Failure /&gt;
      &lt;mod.Success /&gt;

      //layouts
      &lt;lay.Aside /&gt;
      &lt;lay.Footer /&gt;
      &lt;lay.NavBar /&gt;
    &lt;/div&gt;
  );
}
</pre>
<h2 id="conclusion">Conclusion</h2>
<p>A well-architected React application is easier to design, deploy, maintain, and scale. Barrel exports help by enabling us to clean up our local imports, resulting in a cleaner codebase, better collaboration, and enhanced organization.</p>
<p>The post <a rel="nofollow" href="https://blog.logrocket.com/using-barrel-exports-organize-react-components/">Using barrel exports to organize React components</a> appeared first on <a rel="nofollow" href="https://blog.logrocket.com">LogRocket Blog</a>.</p>
]]>
      </content:encoded>

      <wfw:commentRss>https://blog.logrocket.com/using-barrel-exports-organize-react-components/feed/</wfw:commentRss>
      <slash:comments>0</slash:comments>


      <post-id xmlns="com-wordpress:feed-additions:1">121829</post-id>
    </item>
    <item>
      <title>How to build a notes app with React and localStorage</title>
      <link>https://blog.logrocket.com/notes-app-react-localstorage/</link>
      <comments>https://blog.logrocket.com/notes-app-react-localstorage/#respond</comments>

      <dc:creator>
        <![CDATA[Saleh Mubashar]]>
      </dc:creator>
      <pubDate>Fri, 01 Jul 2022 13:00:26 +0000</pubDate>
      <category>
        <![CDATA[Uncategorized]]>
      </category>
      <category>
        <![CDATA[react]]>
      </category>
      <guid isPermaLink="false">https://blog.logrocket.com/?p=121676</guid>

      <description>
        <![CDATA[<p>We can use localStorage to persist our React app to the browser so we don't lose our data when we close the app. </p>
<p>The post <a rel="nofollow" href="https://blog.logrocket.com/notes-app-react-localstorage/">How to build a notes app with React and &lt;code&gt;localStorage&lt;/code&gt;</a> appeared first on <a rel="nofollow" href="https://blog.logrocket.com">LogRocket Blog</a>.</p>
]]>
      </description>
      <content:encoded>
        <![CDATA[<p>In this article, we’ll learn how to create a notes app in React and integrate the app with <code>localStorage</code>. The main functions of our app will include creating a note, setting a character limit, deleting notes, and saving them in <code>localStorage</code>. Let&#8217;s get started!</p>
<ul style="margin-bottom: 0px; padding-bottom: 0px;">
<li><a href="#creating-new-react-app">Creating a new React app</a>
<ul style="margin-bottom: 0px; padding-bottom: 0px;">
<li><a href="#file-structure">File structure</a></li>
</ul>
</li>
<li><a href="#notes-grid">The notes grid</a></li>
<li><a href="#adding-title">Adding the title</a></li>
<li><a href="#creating-note">Creating the note</a></li>
<li><a href="#adding-styling">Adding styling</a></li>
<li><a href="#creating-notes-container">Creating the notes container</a></li>
<li><a href="#creating-note-form">Creating the note form</a></li>
<li><a href="#main-functions">The main functions</a>
<ul style="margin-bottom: 0px; padding-bottom: 0px;">
<li><a href="#input-text-function">Input text function</a></li>
<li><a href="#save-note-function">Save note Function</a></li>
<li><a href="#delete-note-function">Delete note function</a></li>
</ul>
</li>
<li><a href="#linking-functions">Linking the functions</a></li>
<li><a href="#displaying-notes">Displaying the notes</a></li>
<li><a href="#adding-character-counter">Adding the character counter</a></li>
<li><a href="#adding-progress-bar">Adding a progress bar</a></li>
<li><a href="#saving-notes-localstorage">Saving the notes to <code>localStorage</code></a></li>
</ul>
<h2 id="creating-new-react-app">Creating a new React app</h2>
<p>To get started, we need to create a blank React app for our project. Use the following commands to create a React app from scratch:</p>
<pre class="language-bash">npx create-react-app my-app
cd my-app
npm start
</pre>
<p>Next, delete all of the content from the <code>App.js</code> file so that it is blank. We’ll add all of our components here.</p>
<h3 id="file-structure">File structure</h3>
<p>Since we’ll have many files for our app, file structure is important. First, create a <code>Components</code> folder in the <code>src</code> folder. Within the <code>Components</code> folder, create three more folders called <code>NoteComponents</code>, <code>css</code>, and <code>img</code>.</p>
<p>Your directory may look like the following:</p>
<p><img data-attachment-id="121683" data-permalink="https://blog.logrocket.com/notes-app-react-localstorage/attachment/file-structure-directory/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2022/06/file-structure-directory.png" data-orig-size="388,247" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="file-structure-directory" data-image-description="" data-image-caption="" data-medium-file="https://blog.logrocket.com/wp-content/uploads/2022/06/file-structure-directory-300x191.png" data-large-file="https://blog.logrocket.com/wp-content/uploads/2022/06/file-structure-directory.png" loading="lazy" class="aligncenter wp-image-121683 size-full" src="https://blog.logrocket.com/wp-content/uploads/2022/06/file-structure-directory.png" alt="File Structure Directory" width="388" height="247" srcset="https://blog.logrocket.com/wp-content/uploads/2022/06/file-structure-directory.png 388w, https://blog.logrocket.com/wp-content/uploads/2022/06/file-structure-directory-300x191.png 300w" sizes="(max-width: 388px) 100vw, 388px" /></p>
<p>Next, create a new file called <code>App.css</code> within the CSS folder and add the following code to your <code>App.js</code> file:</p>
<pre class="language-css">import { React } from "react";
import "./Components/css/App.css";
function App() {
  return (
    &lt;div className="main"&gt;
    &lt;/div&gt;
  );
}
export default App;
</pre>
<h2 id="notes-grid">The notes grid</h2>
<p>In the <code>App.css</code> file, we need to style the page and the main <code>div</code>. In addition to that, we’ll use CSS Grid to create a three column grid of notes and make it responsive. Therefore, on tablets, we&#8217;ll have two columns, and on mobile devices, we&#8217;ll have a single column.</p>
<p>I&#8217;ve also added a background image, but you can replace it with any image of your choice. The image is saved in the <code>img</code> folder that we created previously.</p>
<pre class="language-css">@import url('https://fonts.googleapis.com/css2?family=Montserrat:wght@400;800&amp;display=swap');
body {
    background-image: url("../img/background.jpg");
    background-repeat: no-repeat;
    background-size: cover;
    font-family: "Montserrat";
}
.main {
    max-width: 960px;
    margin: 0px auto;
    padding: 0px 15px;
    min-height: 100vh;
}
.header {
    display: flex;
    width: 100%;
    justify-content: space-between;
    align-items: center;
    margin: 10px 0px;
}
.notes__title {
    color: #fff;
    font-size: 38px;
    font-family: "Montserrat";
    font-weight: 400;
}
.notes {
    max-width: 1200px;
    margin: 0 auto;
    display: grid;
    grid-gap: 1rem;
    grid-template-columns: repeat(3, minmax(300px, 1fr));
}
@media screen and (max-width: 900px) {
    .notes {
        grid-template-columns: repeat(2, minmax(300px, 1fr));
    }
}
@media screen and (max-width: 500px) {
    .notes {
        grid-template-columns: repeat(1, minmax(300px, 1fr));
    }
}
</pre>
<h2 id="adding-title">Adding the title</h2>
<p>Now, we need to create a file called <code>Header.js</code> inside the <code>NoteComponents</code> folder. <code>Header.js</code> will contain the page title, so it is entirely optional:</p>
<pre class="language-javascript">import React from "react";
function Header() {
  return (
    &lt;div className="header"&gt;
      &lt;h1 className="notes__title"&gt;Notes&lt;/h1&gt;
    &lt;/div&gt;
  );
}
export default Header;
</pre>
<h2 id="creating-note">Creating the note</h2>
<p>Let&#8217;s create the following basic layout and template for a single note that we&#8217;ll use later:</p>
<ul>
<li>The note body: Contains the user input text</li>
<li>The note footer: Contains the delete icon</li>
</ul>
<p>Additionally, the footer will have an add button and a character counter. Now, create a new file called <code>Note.js</code> and add the following code:</p>
<pre class="language-javascript">import React from "react";
import DeleteForeverOutlinedIcon from "@mui/icons-material/DeleteForeverOutlined";
function Note() {
  return (
    &lt;div className="note"&gt;
      &lt;div className="note__body"&gt;&lt;/div&gt;
      &lt;div className="note__footer" style={{ justifyContent: "flex-end" }}&gt;
        &lt;DeleteForeverOutlinedIcon
          className="note__delete"
          aria-hidden="true"
        &gt;&lt;/DeleteForeverOutlinedIcon&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  );
}
export default Note;
</pre>
<p>The delete icon is <a href="https://mui.com/">imported from MUI icons</a>. You can install MUI icons with the following command:</p>
<pre class="language-javascript">npm install @mui/icons-material
</pre>
<h2 id="adding-styling">Adding styling</h2>
<p>Next, create a new CSS file called <code>Note.css</code>, which will contain the styles for the notes. We&#8217;ll use glassmorphism to improve the look of the note. Glassmorphism is a UI design trend that imitates the look of frosted glass. It is achieved by using semi-transparent backgrounds and blur effects.</p>
<p>The CSS code below also contains the styles for the Note Form that we&#8217;ll create later. Add the following code to <code>Note.css</code>:</p>
<pre class="language-css">.note {
    background: rgba(255, 255, 255, 0.1);
    backdrop-filter: blur(5px);
    box-shadow: inset -6px -4px 2px rgba(255, 255, 255, 0.03);
    border-radius: 15px;
    border: 1.5px solid rgba(255, 255, 255, 0.326);
    color: #fff;
    padding: 15px;
    min-height: 140px;
    display: flex;
    flex-direction: column;
    justify-content: space-between;
    word-wrap: break-word;
}
.note__footer {
    display: flex;
    align-items: center;
    justify-content: space-between;
    margin-bottom: 15px;
}
.note textarea {
    white-space: pre-wrap;
    background: transparent;
    border: none;
    color: #fff;
    resize: none;
    font-size: 18px;
}
.note textarea:focus {
    outline: none;
}
.note textarea::placeholder {
    color: #fff;
}
.note__save {
    background: transparent;
    transition: 0.1s ease-in-out;
    border: 1.5px solid #fff;
    border-radius: 10px;
    color: #fff;
    padding: 4px 10px;
    font-size: 13px;
    cursor: pointer;
}
.note__save:hover {
    background: #fff;
    border: 1.5px solid #fff;
    color: #4b1589;
}
.note__delete {
    cursor: pointer;
}
.note__delete:hover {
    transform: scale(1.1);
}
.char__progress {
    background-color: #fff!important;
}
</pre>
<h2 id="creating-notes-container">Creating the notes container</h2>
<p>Now, we&#8217;ll create a new file called <code>Notes.js</code> within the <code>NoteComponents</code> folder. <code>Notes.js</code> will contain all the states and functions, and it will link together all the components. Inside <code>Notes.js</code>, we will first import the <code>Note</code> component that we just created as well as the <code>Note.css</code> file:</p>
<pre class="language-css">import { React, useState, useEffect } from "react";
import "../css/Note.css";
import Note from "./Note"
function Notes() {
  return (
    &lt;div className="notes"&gt;
      &lt;Note /&gt;
      &lt;Note /&gt;
      &lt;Note /&gt;
    &lt;/div&gt;
  );
}
export default Notes;
</pre>
<p>In the code above, I am rendering a few example notes to see what our app looks like. Remember to import the <code>Header.js</code> and the <code>Notes.js</code> files into <code>App.js</code>. So far, your <code>App.js</code> file should look like the following:</p>
<pre class="language-javascript">import { React } from "react";
import "./Components/css/App.css";
import Header from "./Components/NoteComponents/Header";
import Notes from "./Components/NoteComponents/Notes";
function App() {
  return (
    &lt;div className="main"&gt;
      &lt;Header /&gt;
      &lt;Notes /&gt;
    &lt;/div&gt;
  );
}
export default App;
</pre>
<p>At this point, your app should look like the following image:</p>
<p><img data-attachment-id="121685" data-permalink="https://blog.logrocket.com/notes-app-react-localstorage/attachment/creating-header-notes-app-js/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2022/06/creating-header-notes-app-js.png" data-orig-size="730,332" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="creating-header-notes-app-js" data-image-description="" data-image-caption="" data-medium-file="https://blog.logrocket.com/wp-content/uploads/2022/06/creating-header-notes-app-js-300x136.png" data-large-file="https://blog.logrocket.com/wp-content/uploads/2022/06/creating-header-notes-app-js.png" loading="lazy" class="aligncenter wp-image-121685 size-full" src="https://blog.logrocket.com/wp-content/uploads/2022/06/creating-header-notes-app-js.png" alt="Creating Header Notes App JS" width="730" height="332" srcset="https://blog.logrocket.com/wp-content/uploads/2022/06/creating-header-notes-app-js.png 730w, https://blog.logrocket.com/wp-content/uploads/2022/06/creating-header-notes-app-js-300x136.png 300w" sizes="(max-width: 730px) 100vw, 730px" /></p>
<p>Now, we&#8217;ll create two states inside of <code>Notes.js</code>. The first will store all our notes as an array, and the second one will store the input text:</p>
<pre class="language-javascript">//states
const [notes, setNotes] = useState([]);
const [inputText, setInputText] = useState("");
</pre>
<h2 id="creating-note-form">Creating the note form</h2>
<p>Now, we’ll create a fixed note that will be used as a form. It will have a similar look to a regular note, but instead of a delete icon, it will have a save button and a character counter with a progress bar. Within the fixed note, the user will enter the text in the <code>texarea</code>, and they can create a new note by clicking the save button.</p>
<p>Create a new file called <code>CreateNote.js</code>, then add the following code to it:</p>
<pre class="language-javascript">import { React } from "react";
function CreateNote() {
  return (
    &lt;div className="note" style={{ background: "rgba(255, 255, 255, 0)" }}&gt;
      &lt;textarea
        cols="10"
        rows="5"
        placeholder="Type...."
        maxLength="100"
      &gt;&lt;/textarea&gt;
      &lt;div className="note__footer"&gt;
        &lt;span className="label"&gt; left&lt;/span&gt;
        &lt;button className="note__save"&gt;Save&lt;/button&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  );
}
export default CreateNote;
</pre>
<p>You may notice the <code>maxLength</code> attribute on the <code>texarea</code>. This limits the number of characters a user can enter to a specified value, 100 in our case. This is necessary, otherwise, a user could enter as many characters as they want, causing issues with the states and the UI. Go ahead and import the <code>CreateNote</code> component:</p>
<pre class="language-javascript">import CreateNote from "./CreateNote";
</pre>
<p>Now, call it within the <code>Notes.js</code> file:</p>
<pre class="language-javascript">&lt;div className="notes"&gt;
  &lt;Note /&gt;
  &lt;Note /&gt;
  &lt;CreateNote /&gt;
&lt;/div&gt;
</pre>
<p>Your page should look like the following:</p>
<p><img data-attachment-id="121687" data-permalink="https://blog.logrocket.com/notes-app-react-localstorage/attachment/app-js-browser-view/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2022/06/app-js-browser-view.png" data-orig-size="730,329" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="app-js-browser-view" data-image-description="" data-image-caption="" data-medium-file="https://blog.logrocket.com/wp-content/uploads/2022/06/app-js-browser-view-300x135.png" data-large-file="https://blog.logrocket.com/wp-content/uploads/2022/06/app-js-browser-view.png" loading="lazy" class="aligncenter wp-image-121687 size-full" src="https://blog.logrocket.com/wp-content/uploads/2022/06/app-js-browser-view.png" alt="App JS Browser View" width="730" height="329" srcset="https://blog.logrocket.com/wp-content/uploads/2022/06/app-js-browser-view.png 730w, https://blog.logrocket.com/wp-content/uploads/2022/06/app-js-browser-view-300x135.png 300w" sizes="(max-width: 730px) 100vw, 730px" /></p>
<h2 id="main-functions">The main functions</h2>
<p>At this point, we&#8217;ve basically created the main components for our example application. Now, we need to create a few functions that will take the user input from the form, save it in the input state, and then use that to generate a new note each time the user clicks the save button.</p>
<p>All of these functions will be added in the <code>Notes.js</code> file, which is the main file that connects each individual note and the form.</p>
<h3 id="input-text-function">Input text function</h3>
<p>The input text function will take the user input and set it to the input state. Later, we&#8217;ll call this in the note form as a prop:</p>
<pre class="language-javascript">// get text and store in state
const textHandler = (e) =&gt; {
  setInputText(e.target.value);
};
</pre>
<h3 id="save-note-function">Save note function</h3>
<p>The save note function will run when the user clicks the save button on the form. We will also call this in the note form later as a prop.</p>
<p>Firstly, the save note function will create a new note in the <code>note</code> state. It will take the user input from the input state and, along with a unique ID, create an object within the array. Secondly, it will clear the text area so that after submitting, the box is empty.</p>
<p><a href="https://www.npmjs.com/package/uuid">uuid v4</a> will create the unique ID, which will also be used as a key mapping out the notes. You can install uuid v4 using the following command:</p>
<pre class="language-bash">npm install uuidv4
</pre>
<p>Use it as follows:</p>
<pre class="language-javascript">import { v4 as uuid } from "uuid";
</pre>
<p>Below is the complete code for the save button function:</p>
<pre class="language-javascript">// add new note to the state array
const saveHandler = () =&gt; {
  setNotes((prevState) =&gt; [
    ...prevState,
    {
      id: uuid(),
      text: inputText,
    },
  ]);
  //clear the textarea
  setInputText("");
};
</pre>
<h3 id="delete-note-function">Delete note function</h3>
<p>When the user clicks on the delete icon, we will run the delete note function, which will remove the note from the array by filtering it out. The ID parameter will be the unique ID of the note being clicked:</p>
<pre class="language-javascript">//delete note function
const deleteNote = (id) =&gt; {
  const filteredNotes = notes.filter((note) =&gt; note.id !== id);
  setNotes(filteredNotes);
};
</pre>
<h2 id="linking-functions">Linking the functions</h2>
<p>Now that we&#8217;ve created our functions, we need to pass them to our note form. We&#8217;ll use props for this. To pass the props to the <code>CreateNote</code> component, make the following changes in the <code>Notes.js</code> file:</p>
<pre class="language-javascript">&amp;lt;CreateNote
  textHandler={textHandler}
  saveHandler={saveHandler}
  inputText={inputText}
/&gt;
</pre>
<p>Now, the save and text functions, along with the input state, are passed to the <code>CreateNote</code> component. Next, within the <code>CreateNote.js</code> file, call the props as follows:</p>
<pre class="language-javascript">function CreateNote({ textHandler, saveHandler, inputText })
</pre>
<p>We will use these in three places:</p>
<ol>
<li>We will set the value of the <code>textarea</code> to <code>inputText</code></li>
<li>We will run the <code>textHandler</code> function when any change happens to the <code>textarea</code> using <code>onChange</code></li>
<li>We will run the <code>saveHandler</code> function <code>onClick</code> on the save button</li>
</ol>
<p>Your <code>CreateNote.js</code> file should now look like the following code:</p>
<pre class="language-javascript">import { React } from "react";
function CreateNote({ textHandler, saveHandler, inputText }) {
  return (
    &lt;div className="note" style={{ background: "rgba(255, 255, 255, 0)" }}&gt;
      &lt;textarea
        cols="10"
        rows="5"
        value={inputText}
        placeholder="Type...."
        onChange={textHandler}
        maxLength="100"
      &gt;&lt;/textarea&gt;
      &lt;div className="note__footer"&gt;
        &lt;span className="label"&gt; left&lt;/span&gt;
        &lt;button className="note__save" onClick={saveHandler}&gt;
          Save
        &lt;/button&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  );
}
export default CreateNote;
</pre>
<h2 id="displaying-notes">Displaying the notes</h2>
<p>A few sections back, we rendered a few <code>Note</code> components to see how they look for testing purposes only. To make the application dynamic, we&#8217;ll map out the notes from the <code>notes</code> array. The <code>map()</code> function creates a new array by calling a function for every array element, which is the <code>notes</code> array in our case.</p>
<p>We&#8217;ve added the <code>map()</code> function inside the return function within the <code>Notes.js</code> file:</p>
<pre class="language-javascript">return (
  &lt;div className="notes"&gt;
    {notes.map((note) =&gt; (
      &lt;Note
        key={note.id}
        id={note.id}
        text={note.text}
        deleteNote={deleteNote}
      /&gt;
    ))}
    &lt;CreateNote
      textHandler={textHandler}
      saveHandler={saveHandler}
      inputText={inputText}
    /&gt;
  &lt;/div&gt;
);
</pre>
<p>The code above goes through each element in the <code>notes</code> array. Then, it creates a new note using the user input and the unique ID that we created. The ID will be used for the parameter of the delete function</p>
<p>A <code>key</code> is a special string attribute that you need to include when creating lists of elements, like notes in our case.</p>
<p>As you can see in the code above, we are passing the delete function and the text to the <code>Note</code> component as a prop. Now, inside the <code>Note.js</code> file, we can add the <code>text</code> and the delete function to the <code>note</code> body and the <code>delete</code> icon, respectively:</p>
<pre class="language-javascript">function Note({ id, text, deleteNote }) {
  return (
    &lt;div className="note"&gt;
      &lt;div className="note__body"&gt;{text}&lt;/div&gt;
      &lt;div className="note__footer" style={{ justifyContent: "flex-end" }}&gt;
        &lt;DeleteForeverOutlinedIcon
          className="note__delete"
          onClick={() =&gt; deleteNote(id)}
          aria-hidden="true"
        &gt;&lt;/DeleteForeverOutlinedIcon&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  );
}
</pre>
<p>Now, our notes app is fully functional!</p>
<h2 id="adding-character-counter">Adding the character counter</h2>
<p>We&#8217;ve already added a character limit to the <code>textarea</code> when we were creating the note form, as well as a label that will show us the remaining characters.</p>
<p>Now, let&#8217;s calculate how many characters are left out of 100 and display it in our app.</p>
<p>In the <code>CreateNote.js</code> file, add the following code before the return statement:</p>
<pre class="language-javascript">//character limit
const charLimit = 100;
const charLeft = charLimit - inputText.length;
</pre>
<p>The code above calculates the characters left by subtracting the current input length, which we have received as a prop, from 100. As the user is typing, this value will keep on decreasing.</p>
<p>We can simply call it within the <code>span</code> tag:</p>
<pre class="language-javascript">&lt;span className="label"&gt;{charLeft} left&lt;/span&gt;
</pre>
<h2 id="adding-progress-bar">Adding a progress bar</h2>
<p>We can further improve the form by adding a linear progress bar to mirror the character count. The linear progress bar will be used from MUI, which has many prebuilt progress bars. You can install MUI with the following command:</p>
<pre class="language-javascript">npm install @mui/material
</pre>
<p>Import it in the <code>CreateNote.js</code> file like this:</p>
<pre class="language-javascript">import LinearProgress from "@mui/material/LinearProgress";
</pre>
<p>To match our requirements, we will set its variant to discriminant and its value to the <code>charLeft</code> that we already calculated.</p>
<p>Your complete <code>CreateNote.js</code> file will look like the following code:</p>
<pre class="language-javascript">import { React } from "react";
import LinearProgress from "@mui/material/LinearProgress";
function CreateNote({ textHandler, saveHandler, inputText }) {
  //character limit
  const charLimit = 100;
  const charLeft = charLimit - inputText.length;
  return (
    &lt;div className="note" style={{ background: "rgba(255, 255, 255, 0)" }}&gt;
      &lt;textarea
        cols="10"
        rows="5"
        value={inputText}
        placeholder="Type...."
        onChange={textHandler}
        maxLength="100"
      &gt;&lt;/textarea&gt;
      &lt;div className="note__footer"&gt;
        &lt;span className="label"&gt;{charLeft} left&lt;/span&gt;
        &lt;button className="note__save" onClick={saveHandler}&gt;
          Save
        &lt;/button&gt;
      &lt;/div&gt;
      &lt;LinearProgress
        className="char__progress"
        variant="determinate"
        value={charLeft}
      /&gt;
    &lt;/div&gt;
  );
}
export default CreateNote;
</pre>
<h2 id="saving-notes-localstorage">Saving the notes to <code>localStorage</code></h2>
<p>Finally, we need to save the notes to our browser <code>localStorage</code> so that our data is not lost when we refresh the page or close it and then open it.</p>
<p>In the <code>Notes.js</code> file, we will create two functions: one to save the data and one to read it. We will run the code to save the data inside <code>useEffect</code> and add the <code>notes</code> state as a second argument so that we save the data each time it is changed:</p>
<pre class="language-javascript">//saving data to local storage
useEffect(() =&gt; {
  localStorage.setItem("Notes", JSON.stringify(notes));
}, [notes]);
</pre>
<p>We are using <code>JSON.stringify</code> to convert the object to a string so that it can be stored. Similarly, to read the data, we will also use the <code>useEffect</code> Hook. However, this time, the second argument will be an empty array because we only want to get data once on page load:</p>
<pre class="language-javascript">//get the saved notes and add them to the array
useEffect(() =&gt; {
  const data = JSON.parse(localStorage.getItem("Notes"));
  if (data) {
    setNotes(data);
  }
}, []);
</pre>
<h2>Conclusion</h2>
<p>And we&#8217;re done! You can find the complete code on <a href="https://codesandbox.io/s/notes-app-with-react-js-and-localstorage-ifsglz">CodeSandbox</a>.</p>
<p>In this article, we built a notes app from scratch using React and <code>localStorage</code>. Our app has all the required functionalities, for example, storing a user input, saving it, and deleting it. We used <code>localStorage</code> to persist the data to our browser. Therefore, it is not lost when we refresh the page. We even went a step further to add a character count and a progress bar so the user knows how much space they have left to type.</p>
<p>I hope you enjoyed this article, and be sure to leave a comment if you have any questions. Thank you for reading!</p>
<p>The post <a rel="nofollow" href="https://blog.logrocket.com/notes-app-react-localstorage/">How to build a notes app with React and &lt;code&gt;localStorage&lt;/code&gt;</a> appeared first on <a rel="nofollow" href="https://blog.logrocket.com">LogRocket Blog</a>.</p>
]]>
      </content:encoded>

      <wfw:commentRss>https://blog.logrocket.com/notes-app-react-localstorage/feed/</wfw:commentRss>
      <slash:comments>0</slash:comments>


      <post-id xmlns="com-wordpress:feed-additions:1">121676</post-id>
    </item>
    <item>
      <title>What metrics and KPIs do product managers track?</title>
      <link>https://blog.logrocket.com/product-management/what-metrics-kpis-product-managers-track/</link>
      <comments>https://blog.logrocket.com/product-management/what-metrics-kpis-product-managers-track/#respond</comments>

      <dc:creator>
        <![CDATA[Sara Nguyen]]>
      </dc:creator>
      <pubDate>Fri, 01 Jul 2022 13:00:05 +0000</pubDate>
      <category>
        <![CDATA[Product Management]]>
      </category>
      <category>
        <![CDATA[product-management]]>
      </category>
      <guid isPermaLink="false">https://blog.logrocket.com/?p=122579</guid>

      <description>
        <![CDATA[<p>Quantitative product data is crucial to understanding user behavior. Learn how your product team can use this knowledge to improve the user experience, reduce churn rate, and generate ROI.</p>
<p>The post <a rel="nofollow" href="https://blog.logrocket.com/product-management/what-metrics-kpis-product-managers-track/">What metrics and KPIs do product managers track?</a> appeared first on <a rel="nofollow" href="https://blog.logrocket.com">LogRocket Blog</a>.</p>
]]>
      </description>
      <content:encoded>
        <![CDATA[<p><!-- Output copied to clipboard! --></p>
<p><!----- You have some errors, warnings, or alerts. If you are using reckless mode, turn it off to see inline alerts. * ERRORs: 0 * WARNINGs: 0 * ALERTS: 2 Conversion time: 0.702 seconds. Using this HTML file: 1. Paste this output into your source file. 2. See the notes and action items below regarding this conversion run. 3. Check the rendered output (headings, lists, code blocks, tables) for proper formatting and use a linkchecker before you publish this page. Conversion notes: * Docs to Markdown version 1.0β33 * Thu Jun 30 2022 15:34:42 GMT-0700 (PDT) * Source doc: What is product analytics? * This document has images: check for >>>>>  gd2md-html alert:  inline image link in generated source and store images to your server. NOTE: Images in exported zip file from Google Docs may not appear in  the same order as they do in your doc. Please check the images!

-----></p>
<p>Choosing the right metrics and analysis methods to track them can make the difference between delivering an OK product and delivering a great product.</p>
<p>In this guide, we’ll give an overview of how product teams define KPIs and use data to measure the success and health of their product. We&#8217;ll list some specific metrics <a href="https://blog.logrocket.com/product-management/what-does-a-product-manager-do-role-responsibilities/" target="_blank" rel="noopener">product managers</a> commonly track and describe several types of analysis your team can use to pull actionable insights from that data.</p>
<p>Finally, we&#8217;ll offer some tips to help you determine what metrics your team should be collecting and select the right type of tool to help you get the most out of your product analytics.</p>
<hr />
<h2>Table of contents</h2>
<ul>
<li><a href="#what-is-product-analytics">What is product analytics?</a></li>
<li><a href="#why-is-product-analytics-essential">Why is product analytics essential?</a></li>
<li><a href="#how-do-product-managers-define-kpis">How do product managers define KPIs?</a></li>
<li><a href="#how-do-product-managers-use-product-metrics">How do product managers use product metrics?</a></li>
<li><a href="#what-are-aarrr-priate-metrics">What are AARRR (pirate) metrics?</a></li>
<li><a href="#how-to-gain-insight-from-product-analytics">How to gain insight from product analytics</a></li>
<li><a href="#choosing-the-right-tools-to-track-product-metrics">Choosing the right tools to track product metrics</a></li>
</ul>
<hr />
<h2 id="what-is-product-analytics">What is product analytics?</h2>
<p><a href="https://heap.io/topics/what-is-product-analytics" target="_blank" rel="noopener">Product analytics</a> refers to a set of tools and techniques that reveal details about how users are interacting and responding to your product. Objective data about users&#8217; actual behavior is incredibly valuable to a product team. Tracking these metrics can answer questions such as which features customers are using most, how long they are using a feature, what makes them stop using it, etc.</p>
<p>Without product analytics, your product team would miss out on meaningful insight into its customers. While surveys and customer interviews can provide a glimpse into a customer&#8217;s perception of the product, behavioral data can reveal trends and missed opportunities.</p>
<h2 id="why-is-product-analytics-essential">Why is product analytics essential?</h2>
<p>When building a product, conflicting opinions tend to disrupt the development process. By providing hard data without emotional bias, you can ensure your product team is building features that appeal to users while still maintaining business goals.</p>
<p>Product analytics is also crucial to building a loyal customer base. It’s important to understand why your customers choose your product over your competitors. Data can provide insight into what makes people convert into customers and what features they use most frequently. Organizations can take this data and try to replicate it with other users to increase their conversion rate.</p>
<p>On the other hand, you can also use product analytics to determine why a user didn&#8217;t complete a process by revealing where they may have become frustrated and dropped out of the funnel.</p>
<h2 id="how-do-product-managers-define-kpis">How do product managers define KPIs?</h2>
<p>Before you can define your KPIs and determine which metrics to analyze, you need to <a href="https://blog.logrocket.com/product-management/how-to-build-product-roadmap-overview-examples/" target="_blank" rel="noopener">establish a desired outcome or goal</a>. There’s no point in gathering data if you don’t have a plan on how to use that data.</p>
<p>By creating list a of questions first, you can make sure your team is collecting the most relevant data without wasting time or resources.</p>
<p>Some examples of questions you might ask to help narrow down which KPIs, metrics, and events to analyze:</p>
<ul>
<li>Why are users not completing the funnel?</li>
<li>What actions within a journey led to a conversion?</li>
<li>How often are users engaging with the product?</li>
<li>What actions did a free trial user complete to become a paid user?</li>
</ul>
<h2 id="how-do-product-managers-use-product-metrics">How do product managers use product metrics?</h2>
<p>Tracking product metrics comes in handy when formulating a hypothesis or goal for testing a new beta feature. For example, you might hypothesize that adding a &#8220;Help&#8221; link to a checkout page will increase sales. This would prompt your team to start gathering data and performing analysis on events related to checking out items from the shopping cart.</p>
<p>Because this data has a purpose, it can actually help the product team generate actionable insights rather than waste time collecting disparate data points that are filed away and seldom referenced again.</p>
<h2 id="what-are-aarrr-priate-metrics">What are AARRR (pirate) metrics?</h2>
<p>There are numerous frameworks designed to help product managers and their teams focus on goals and decide which metrics to measure. One of the most popular product analytics frameworks is called AARRR or pirate metrics.</p>
<p>The <a href="https://blog.logrocket.com/product-management/6-product-management-frameworks-you-should-know/#aarrr-metrics">AARRR framework</a> follows the entire customer journey and demonstrates which user behavior metrics are analyzed for each stage. This helps product managers evaluate whether a product is meeting user needs throughout the customer journey.</p>
<figure id="attachment_122592" aria-describedby="caption-attachment-122592" style="width: 500px" class="wp-caption aligncenter"><img data-attachment-id="122592" data-permalink="https://blog.logrocket.com/product-management/what-metrics-kpis-product-managers-track/attachment/aarrr-diagram-2/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2022/07/aarrr-diagram-1.png" data-orig-size="500,300" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="AARRR metrics product management framework" data-image-description="" data-image-caption="&lt;p&gt;Source: &lt;a href=&quot;https://www.product-frameworks.com/AARRR-Metrics.html&quot;&gt;Product Frameworks&lt;/a&gt;&lt;/p&gt;
" data-medium-file="https://blog.logrocket.com/wp-content/uploads/2022/07/aarrr-diagram-1-300x180.png" data-large-file="https://blog.logrocket.com/wp-content/uploads/2022/07/aarrr-diagram-1.png" loading="lazy" class="size-full wp-image-122592" src="https://blog.logrocket.com/wp-content/uploads/2022/07/aarrr-diagram-1.png" alt="Diagram Showing The AARRR Metrics Product Management Framework" width="500" height="300" srcset="https://blog.logrocket.com/wp-content/uploads/2022/07/aarrr-diagram-1.png 500w, https://blog.logrocket.com/wp-content/uploads/2022/07/aarrr-diagram-1-300x180.png 300w" sizes="(max-width: 500px) 100vw, 500px" /><figcaption id="caption-attachment-122592" class="wp-caption-text">Source: <a href="https://www.product-frameworks.com/AARRR-Metrics.html">Product Frameworks</a></figcaption></figure>
<p>The steps to the AARRR framework are as follows.</p>
<h3>Acquisition</h3>
<p>Acquisition focuses on where people are discovering a product. This is usually a summary of the different marketing channels and their effectiveness.</p>
<p>Some insights you can gain from tracking acquisition metrics include:</p>
<ul>
<li>How long do people stay on a page?</li>
<li>What do they click?</li>
<li>Which pages do they view?</li>
<li>Which marketing channels are most engaging?</li>
</ul>
<h3>Activation</h3>
<p>Activation refers to how many people have a happy first experience with a product and indicate they want to continue engaging with it.</p>
<p>Some user behavior metrics to monitor include:</p>
<ul>
<li>Do users tend to create an account?</li>
<li>What events led to a conversion?</li>
<li>Which pages or features do they interact with?</li>
<li>How long do they spend on each page or feature?</li>
</ul>
<h3>Retention</h3>
<p>Retention describes how long users stay engaged with a product or app over time.</p>
<p>Below are some examples of user behavior metrics to help you determine retention:</p>
<ul>
<li>Daily/weekly/monthly active users</li>
<li>Clickthrough rate of email newsletters</li>
<li>Which features are most used and which are not</li>
<li>What events lead to users closing the app</li>
</ul>
<h3>Referral</h3>
<p>It’s always valuable to track referrals to gauge customer satisfaction because happy customers are more likely to share or recommend your product.</p>
<p>Some metrics to monitor for insight into referrals include:</p>
<ul>
<li>Number of active users sharing invites</li>
<li>Clickthrough rate of referral links</li>
<li>Conversion rate of referral links</li>
<li>What events lead to conversions?</li>
</ul>
<h3>Revenue</h3>
<p>As a product manager, it’s your responsibility to prove that features are or will be profitable.</p>
<p>Some product analytics software can create revenue insights for funnels to pinpoint critical areas. Otherwise, you can look at metrics that answer questions such as:</p>
<ul>
<li>What is the average revenue per user?</li>
<li>What is the customer acquisition cost?</li>
<li>What is the customer lifetime value?</li>
<li>What is the conversion rate of marketing campaigns?</li>
</ul>
<p>Once you&#8217;ve identified which AARRR stage and metrics you want to analyze, product teams can then implement tools to collect data. The next step is to analyze the data and make necessary adjustments to improve the product and marketing strategies.</p>
<h2 id="how-to-gain-insight-from-product-analytics">How to gain insight from product analytics</h2>
<p>It&#8217;s one thing to track product metrics, but it&#8217;s an entirely different skill to glean meaningful and actionable insights from the resultant data. This is where data analysis comes into play.</p>
<p>The most relevant type of analysis depends on on the kind of answers your team needs. Let&#8217;s review some common types of product analysis you can use to measure and understand the product data you collect.</p>
<h3>Trends analysis</h3>
<p>A trends analysis evaluates how certain features perform over time. The main goal of a trends analysis is to determine whether the adoption rate is increasing or decreasing. This can help you decide whether a product feature needs adjustments.</p>
<p>For example, many tools will reveal the <a href="https://docs.logrocket.com/docs/click-maps">exact click action</a> that caused a person to stop using your product. This type of data can show whether an action is an isolated incident or a trend among users.</p>
<p>By noticing trends such as rage clicks (when a user repeatedly clicks on an element, indicating frustration), you can remedy the issue to improve the user experience.</p>
<h3>Path analysis</h3>
<p>A <a href="https://docs.logrocket.com/docs/path-analysis">path analysis</a> evaluates the steps a user takes to complete a journey. Some examples might include the making a purchase or submitting a form.</p>
<p>By evaluating the user journey, you can see where users dropped out of the desired funnel and how successful the conversion rate was for the funnel.</p>
<h3>Attribution analysis</h3>
<p>Attribution analysis evaluates the users who completed the expected journey and identifies what attributes contributed to the successful completion. This can reveal positive insights into what is influencing users to continue to use the product.</p>
<p>For example, attribution analysis might reveal that a &#8220;Help&#8221; button has helped increase the user conversion rate.</p>
<h3>Cohort analysis</h3>
<p>A cohort analysis groups together users with similar characteristics and analyzes their behavior. This data can help you identify, among other things, what high-value customers are doing on the platform, how a newer cohort responded to a customer service experience, etc.</p>
<p>You can also group users by browser or device. This can help you discover and resolve inconsistencies in the user experience between customers who use your product on a mobile device versus those who are using a laptop.</p>
<h3>Retention analysis</h3>
<p>Retention analysis focuses on users who continually use or engage with your product over time. Metrics such as customer satisfaction rate, active users, or feedback surveys can help you determine what makes a user continue to use your product.</p>
<p>Retention analysis also evaluates the <a href="https://www.salesforce.com/resources/articles/how-calculate-customer-churn-and-revenue-churn/">churn rate</a>, which is the rate at which users stop using your product.</p>
<h3>Funnel analysis</h3>
<p>Last, but not least, a <a href="https://logrocket.com/funnel-insights">funnel analysis</a> evaluates the entire funnel and helps you identify areas for improvement.</p>
<p>The first step is to analyze user journeys that failed to complete the funnel.</p>
<p>For example, let’s say only 27 percent of users moved to the next step in the funnel. This rate obviously has the potential to grow, so you might decide to analyze video playback, or sessions, of users who didn&#8217;t complete the funnel.</p>
<p>You may also evaluate the funnel insights provided, which will delve into possible reasons for a lost conversion, such as rage clicks, dead clicks, exceptions, and network errors.</p>
<h2 id="choosing-the-right-tools-to-track-product-metrics">Choosing the right tools to track product metrics</h2>
<p>Product teams often need to use more than one tool to gather and analyze data. That’s because it&#8217;s difficult to find a singular data analytics tool that can produce every report and chart a product team requires.</p>
<p>When choosing product analytics software, ask yourself:</p>
<ul>
<li>Does this tool integrate with other tools the product management team uses?</li>
<li>Is the user interface easy for team members to use?</li>
<li>Does it generate actionable reports?</li>
<li>Can the team track custom events?</li>
<li>Does it cover essential product metrics?</li>
<li>Is it cost-effective?</li>
</ul>
<p>The most popular and widely used data analytics tools help product managers and teams accomplish two tasks:</p>
<ul>
<li>Gather relevant data</li>
<li>Produce actionable insights</li>
</ul>
<p>Product managers frequently invest in multiple tools to gain access to all of the data they want to monitor and evaluate.</p>
<p>Begin your search by determining what questions they need to answer. This will help you discern which tools have the necessary features to track and analyze the data you need to keep your users happy, gain new customers, and grow your product and business.</p>
<p>Quantitative product data is crucial to understanding user behavior. Once you have obtained statistically significant data, your product team can use this knowledge to improve the user experience, reduce churn rate, and generate ROI.</p>
<p>It all begins with choosing the right tools and monitoring the most relevant metrics.</p>
<p>The post <a rel="nofollow" href="https://blog.logrocket.com/product-management/what-metrics-kpis-product-managers-track/">What metrics and KPIs do product managers track?</a> appeared first on <a rel="nofollow" href="https://blog.logrocket.com">LogRocket Blog</a>.</p>
]]>
      </content:encoded>

      <wfw:commentRss>https://blog.logrocket.com/product-management/what-metrics-kpis-product-managers-track/feed/</wfw:commentRss>
      <slash:comments>0</slash:comments>


      <post-id xmlns="com-wordpress:feed-additions:1">122579</post-id>
    </item>
    <item>
      <title>Fast prototyping in Unity: Scriptable objects</title>
      <link>https://blog.logrocket.com/fast-prototyping-unity-scriptable-objects/</link>
      <comments>https://blog.logrocket.com/fast-prototyping-unity-scriptable-objects/#respond</comments>

      <dc:creator>
        <![CDATA[Yvens Rebouças Serpa]]>
      </dc:creator>
      <pubDate>Thu, 30 Jun 2022 17:30:51 +0000</pubDate>
      <category>
        <![CDATA[Uncategorized]]>
      </category>
      <category>
        <![CDATA[unity]]>
      </category>
      <guid isPermaLink="false">https://blog.logrocket.com/?p=122089</guid>

      <description>
        <![CDATA[<p>In this article, we're going to be exploring fast prototyping in Unity and how you can use scriptable objects effectively in your game development.</p>
<p>The post <a rel="nofollow" href="https://blog.logrocket.com/fast-prototyping-unity-scriptable-objects/">Fast prototyping in Unity: Scriptable objects</a> appeared first on <a rel="nofollow" href="https://blog.logrocket.com">LogRocket Blog</a>.</p>
]]>
      </description>
      <content:encoded>
        <![CDATA[<p>Consider that you are developing a merchant system for your game in Unity, where the merchant sells a list of items with a different name, price, description, and image.</p>
<p>The game designer in your team already wrote a 100-page document on various items with an entire chapter dedicated to the multiple potion types. As the lead programmer, you need to decide where to store each one of these items in your system, so where would you?</p>
<p>In this article, we&#8217;re going to be exploring fast prototyping in Unity and how you can use scriptable objects effectively in your game development.</p>
<ul>
<li><a href="#serializable-structs">Serializable structs</a></li>
<li><a href="#the-issue-with-the-itemstruct-approach">The issue with the ItemStruct approach</a></li>
<li><a href="#using-scriptable-objects">Using scriptable objects</a></li>
<li><a href="#detaching-data-from-game-objects">Detaching data from game objects</a></li>
<li><a href="#expanding-scriptable-objects">Expanding scriptable objects</a></li>
<li><a href="#using-custom-editor-scripts">Using custom editor scripts</a></li>
<li><a href="#additional-advantages-of-scriptable-objects">Additional advantages of scriptable objects</a></li>
<li><a href="#transmuting-scriptable-objects">Transmuting scriptable objects</a></li>
<li><a href="#scriptable-object-alternatives">Scriptable object alternatives</a>
<ul style="margin-bottom: 0px; padding-bottom: 0px;">
<li><a href="#string">String</a></li>
<li><a href="#enum">Enum</a></li>
</ul>
</li>
<li><a href="#why-scriptable-objects-are-beneficial">Why scriptable objects are beneficial</a></li>
<li><a href="#judging-scriptable-objects">Judging scriptable Objects</a>
<ul style="margin-bottom: 0px; padding-bottom: 0px;">
<li><a href="#flexibility">Flexibility</a></li>
<li><a href="#performance">Performance</a></li>
</ul>
</li>
</ul>
<h2 id="serializable-structs">Serializable structs</h2>
<p>I believe the initial attempt to tackle this system is to use a <a href="https://docs.unity3d.com/ScriptReference/Serializable.html" target="_blank" rel="noopener">serializable struct</a> that encapsulates the items&#8217; properties. Let&#8217;s call it the ItemStruct. Then, you would add a List of ItemStruct in the merchant.</p>
<p>Thus, via the inspector, the game designer can input each one of these items manually while leaving you to program the other systems for the game. The code and inspector for such a system can be seen below:</p>
<pre class="language-c# hljs">[Serializable]
public struct ItemStruct
{
   public string name;
   public int price;
   [TextArea]
   public string description;
   public Sprite image;
}
</pre>
<p><img data-attachment-id="122142" data-permalink="https://blog.logrocket.com/fast-prototyping-unity-scriptable-objects/attachment/item-struct-inspector-example-2/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2022/06/item-struct-inspector-example-1.png" data-orig-size="730,655" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="item-struct-inspector-example" data-image-description="" data-image-caption="" data-medium-file="https://blog.logrocket.com/wp-content/uploads/2022/06/item-struct-inspector-example-1-300x269.png" data-large-file="https://blog.logrocket.com/wp-content/uploads/2022/06/item-struct-inspector-example-1.png" loading="lazy" class="aligncenter wp-image-122142 size-full" src="https://blog.logrocket.com/wp-content/uploads/2022/06/item-struct-inspector-example-1.png" alt="Item Struct Inspector Example" width="730" height="655" srcset="https://blog.logrocket.com/wp-content/uploads/2022/06/item-struct-inspector-example-1.png 730w, https://blog.logrocket.com/wp-content/uploads/2022/06/item-struct-inspector-example-1-300x269.png 300w" sizes="(max-width: 730px) 100vw, 730px" /></p>
<p>This approach is actually quite versatile, and for many simple systems, it is certainly the easiest and more stable way to go.</p>
<p>The serializable structs provide an easy way of making changes via the Inspector, while also using the advantages of being a struct in C# such as being more adequate for <a href="https://www.c-sharpcorner.com/article/what-is-structure-and-when-to-use-in-c-sharp/" target="_blank" rel="noopener">smaller data aggregation</a> compared to classes, and for having <a href="https://www.c-sharpcorner.com/article/what-is-structure-and-when-to-use-in-c-sharp/" target="_blank" rel="noopener">value semantics.</a></p>
<p>However, your merchant system allows for different merchants across the game world.</p>
<p>One of them, in the starting area, is supposed to sell low-level potions and weak temporary buffs. For the sake of supporting slower players, the more advanced areas in the game have merchants still selling starting potions that cost less than their higher-level alternatives.</p>
<h2 id="the-issue-with-the-itemstruct-approach">The issue with the ItemStruct approach</h2>
<p>If we stick to the ItemStruct approach, it is probably the case now that the different instances of the merchants now have copies of the same ItemStructs.</p>
<p>If you raised one eyebrow already, prepare to raise the other, because there is a very high chance that your game designer will, at some point, try to balance the game and give a discount to all low-level potions. Since the ItemStructs are not connected to each other, every instance of every merchant that sells them needs to be updated. Applause from me if you are already using prefabs and <a href="https://docs.unity3d.com/Manual/PrefabVariants.html" target="_blank" rel="noopener">prefab variants</a>, but they all still need updating.</p>
<p>Buying is one of the difficulties with programming these items, but consider that the game also has combat. Defeating enemies yields loot, such as potions.</p>
<p>It should be clear that the solution we are looking for revolves around detaching the ItemStruct from the merchants (and other mechanisms) and letting each one of them use a reference to it.</p>
<p>Thus, any change made to the ItemStruct will immediately affect those who refer to it. Gladly, Unity offers an easy way of doing that: scriptable objects.</p>
<h2 id="using-scriptable-objects">Using scriptable objects</h2>
<p>Scriptable objects are data-holding objects in Unity that do not need to be attached to game objects.</p>
<p>Thus, we can create them without adding them to an object in our scene or a prefab. They exist on their own and any entity that uses them uses a reference.</p>
<p>Scriptable objects do not inherit from MonoBehavior, the default class for Unity scripts, but they do hold some analogous behaviors and can be used in a similar fashion.</p>
<p>For instance, they have their <a href="https://docs.unity3d.com/ScriptReference/ScriptableObject.html" target="_blank" rel="noopener">Awake call</a>, as well as OnEnable and OnDisable. They can have their methods and member variables, as well as benefit from using Attributes.</p>
<p>Moreover, they are as easy to create as regular mono behavior scripts:</p>
<pre class="language-c# hljs">[CreateAssetMenu(fileName = "New Item", menuName = "Item", order = 0)]
public class ItemScriptableObject : ScriptableObject
{
   public string name;
   public int price;
   [TextArea]
   public string description;
   public Sprite image;
}
</pre>
<p><img data-attachment-id="122146" data-permalink="https://blog.logrocket.com/fast-prototyping-unity-scriptable-objects/attachment/item-scriptable-object/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2022/06/item-scriptable-object.png" data-orig-size="730,404" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="item-scriptable-object" data-image-description="" data-image-caption="" data-medium-file="https://blog.logrocket.com/wp-content/uploads/2022/06/item-scriptable-object-300x166.png" data-large-file="https://blog.logrocket.com/wp-content/uploads/2022/06/item-scriptable-object.png" loading="lazy" class="aligncenter wp-image-122146 size-full" src="https://blog.logrocket.com/wp-content/uploads/2022/06/item-scriptable-object.png" alt="Item Scriptable Object" width="730" height="404" srcset="https://blog.logrocket.com/wp-content/uploads/2022/06/item-scriptable-object.png 730w, https://blog.logrocket.com/wp-content/uploads/2022/06/item-scriptable-object-300x166.png 300w" sizes="(max-width: 730px) 100vw, 730px" /></p>
<p>As you saw in the example above, to increase the efficiency of creating instances of a scriptable object, we can use the <code>CreateAssetMenuAttribute</code> to <a href="https://docs.unity3d.com/ScriptReference/CreateAssetMenuAttribute.html" target="_blank" rel="noopener">add an editor menu</a> that generates files of that type.</p>
<h2 id="detaching-data-from-game-objects">Detaching data from game objects</h2>
<p>Getting back to the problem we discussed previously with detaching the ItemStructs from the elements in the game, a simple solution now is to replace ItemStructs with the ItemScriptableObject. Every merchant holds a list of the ItemScriptableObjects it sells.</p>
<p>Any discounts or increases in the prices of an item are now done to the item itself. The change is immediately reflected in any entity that refers to it. Let the game designer now rejoice in <a href="https://yvensserpa.medium.com/the-pillars-of-internal-economy-an-introduction-to-game-economics-38d8e73d5afa" target="_blank" rel="noopener">balancing</a> the game economy.</p>
<p>Furthermore, other mechanisms, such as item drops from monsters or looting treasure chests, benefit just the same. You could even take this further and use the same scriptable objects to devise an inventory system or a crafting system.</p>
<p>The scriptable object we designed as an example can be easily extended to contain other data, such as the image it displays on the UI or a crafting type.</p>
<p>On that, there are two exciting extensions we can do with scriptable objects that are worth mentioning: Inheritance and CustomEditorScripts.</p>
<h2 id="expanding-scriptable-objects">Expanding scriptable objects</h2>
<p>Let us start with Inheritance. Scriptable objects inherit from the <a href="https://docs.unity3d.com/ScriptReference/ScriptableObject.html" target="_blank" rel="noopener">Object base class</a>; thus, they can be used in any context a regular C# class can be used.</p>
<p><span style="font-weight: 400;">That means we can have abstract scriptable objects and use them to model behavior, benefiting from all those good old object-oriented programming advantages such as data abstraction and polymorphism.</span></p>
<p>For example, we could have an abstract scriptable object for the items in our game, which hold standard information such as name, cost, and display image. It would also contain an abstract method <code>Use( )</code>. Then each item type can specify what it does when it is used.</p>
<p>Then, we could create a concrete scriptable object for the Potions, which extends Item. The Potions scriptable object inherits the member variables from its parent class and is forced to implement the <code>Use</code> method.</p>
<p>From here we could even branch the hierarchy further by creating a HealthPotion extension or a RejuvenationPotion so that the <code>Use</code> method has a more precise implementation and we add member variables that better suit the needs of each type.</p>
<p>You might have now stopped to wonder why we could not have done that before as this is a standard object-oriented programming practice.</p>
<p>The fact is that we always could and that is the beauty of using scriptable objects: we do not need to change how we model our systems. The advantage now is that we can create instances for our data detached from the systems themselves.</p>
<p>Moreover, we can implement our systems to be based on Items, as we noted, even though our game designer is now adding the data for the LegendarySwordScriptableObject type.</p>
<pre class="language-c# hljs">public abstract class ItemScriptableObject : ScriptableObject
{
   public string name;
   public int price;
   [TextArea]
   public string description;
   public Sprite image;

   public abstract void Use();
}
</pre>
<pre class="language-c# hljs">[CreateAssetMenu(fileName = "New Potion", menuName = "Items/Potion", order = 0)]
public class PotionScriptableObject : ItemScriptableObject
{
   public override void Use()
   {
       //Do Something
   }
}
</pre>
<h2 id="using-custom-editor-scripts">Using custom editor scripts</h2>
<p>The other aspect I raised before was empowering scriptable objects with custom editor scripts. Custom editor scripts allow us to change and add behaviors to how a certain entity is displayed in the Unity Inspector.</p>
<p>They are commonly used in regular MonoBehavior scripts to add buttons or to display labels, and generally to <a href="https://docs.unity3d.com/Manual/editor-CustomEditors.html" target="_blank" rel="noopener">speed up</a> development.</p>
<p>ScriptableObjects can also be extended with their own custom editor scripts, which makes them powerful edit tools directly in the inspector and, again, detached from other entities.</p>
<p>For example, we suggested that our Item scriptable object could contain its display image. With custom editor scripts, we could show the selected image directly in the inspector to facilitate checking if the correct sprites are being used.</p>
<p>Specifically for the potions, we could add a button that prints the result of using the potion given its attributes, to quickly assess if its outcomes are appropriate.</p>
<pre class="language-c# hljs">[CustomEditor(typeof(PotionScriptableObject))]
public class PotionScriptableObjectEditor : UnityEditor.Editor
{
   public override void OnInspectorGUI()
   {
       base.OnInspectorGUI();

       var potionScriptableObject = (PotionScriptableObject) target;
       if (potionScriptableObject.image == null) return;
       GUILayout.Box(potionScriptableObject.image.texture);

       if (GUILayout.Button("Test Use"))
       {
           potionScriptableObject.Use();
       }
   }
}
</pre>
<p><img data-attachment-id="122154" data-permalink="https://blog.logrocket.com/fast-prototyping-unity-scriptable-objects/attachment/potion-scriptable-object-example/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2022/06/potion-scriptable-object-example.png" data-orig-size="730,469" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="potion-scriptable-object-example" data-image-description="" data-image-caption="" data-medium-file="https://blog.logrocket.com/wp-content/uploads/2022/06/potion-scriptable-object-example-300x193.png" data-large-file="https://blog.logrocket.com/wp-content/uploads/2022/06/potion-scriptable-object-example.png" loading="lazy" class="aligncenter wp-image-122154 size-full" src="https://blog.logrocket.com/wp-content/uploads/2022/06/potion-scriptable-object-example.png" alt="Potion Scriptable Object Example" width="730" height="469" srcset="https://blog.logrocket.com/wp-content/uploads/2022/06/potion-scriptable-object-example.png 730w, https://blog.logrocket.com/wp-content/uploads/2022/06/potion-scriptable-object-example-300x193.png 300w" sizes="(max-width: 730px) 100vw, 730px" /><br />
(Note: The sprites used here are originally from the <a href="https://assetstore.unity.com/packages/2d/free-2d-mega-pack-177430" target="_blank" rel="noopener">2D Mega Pack</a> for Brackeys)</p>
<h2 id="additional-advantages-of-scriptable-objects">Additional advantages of scriptable objects</h2>
<p>Adjusting the values of a scriptable object, using a custom editor script or not, has another advantage compared to regular MonoBehavior scripts: they are persistent between editor and play mode.</p>
<p>This means that if you alter a scriptable object while testing the game in play mode, the changes are saved to the scriptable object and persist in the editor mode.</p>
<p>Notice that this is not the case for persistency between instances of a built game, i.e., you <a href="https://forum.unity.com/threads/scriptable-objects-for-store-data.899555/" target="_blank" rel="noopener">should not</a> use scriptable objects as an alternative to your save system.</p>
<p>Moreover, changes made in scriptable objects also persist between scenes. This advantage allows for a better alternative to singletons when transferring information between scenes and game states.</p>
<p>For example, you could store your player&#8217;s information such as health and experience in a scriptable object and have it be referenced by the multiple systems in your game.</p>
<p>If your character loses health in a combat scene and then returns to the world map, the changes to the health are persisted in the scriptable object and do not have to be shared via other mechanisms, such as a PlayerManager flagged to not be <a href="https://docs.unity3d.com/ScriptReference/Object.DontDestroyOnLoad.html" target="_blank" rel="noopener">destroyed</a> on loading new scenes.</p>
<p>However, there is even another use for scriptable objects that sounds quite counter-intuitive: data-less scriptable objects.</p>
<h2 id="transmuting-scriptable-objects">Transmuting scriptable objects</h2>
<p>Scriptable object instances are unique by default since each of them will <a href="https://bronsonzgeb.com/index.php/2021/09/11/the-scriptable-object-asset-registry-pattern/" target="_blank" rel="noopener">hold a GUID.</a></p>
<p>Thus, multiple references to an instance of a scriptable object are bound to use the correct one, especially since they are most likely linked in the inspector to their corresponding reference holders.</p>
<p>On the other hand, we could also benefit from this property to compare scriptable objects, either by their content (overriding the Equals method, for example) or by their identifiers.</p>
<p>This also allows them to be excellent keys for dictionaries and other key-based data structures.</p>
<h2 id="scriptable-object-alternatives">Scriptable object alternatives</h2>
<p>As I hinted previously, we could use scriptable objects solely for the purpose of being keys, but maintaining all of their benefits. Consider, for example, that for the global market system in your game, you want to specify a dictionary that links merchants to their corresponding cities.</p>
<p>Every merchant can only be linked to one city and cities can host multiple merchants. What would you use to make the link between merchant and city? A string? An enum?</p>
<p>As you might have guessed, a scriptable object CityScriptableObject, for example, could easily solve this dilemma.</p>
<p>Let&#8217;s discuss the alternatives first.</p>
<h3 id="string">String</h3>
<p>A string is bound to typos and other mistakes, besides being very inefficient for maintenance and updates (a city changed its name mid-development due to an argument between the game writers, for example). Comparing strings is also <a href="https://rhale78.wordpress.com/2011/05/16/string-equality-and-performance-in-c/" target="_blank" rel="noopener">not very efficient.</a></p>
<h3 id="enum">Enum</h3>
<p>An enum works very well, but changes in the code base need to be done for every new addition. Moreover, it can be catastrophic if you remove one entry in the enum and have to fix all of the code that references it (a city was destroyed now due to another argument between the game writers — those folks!).</p>
<h2 id="why-scriptable-objects-are-beneficial">Why scriptable objects are beneficial</h2>
<p>On the other hand, the scriptable object instance can be created in the Project View (no code is necessary), and it can be referenced as a regular object in the code, instead of relying on switch statements and other control flow structures that specify the possible entries.</p>
<p>As presented before, this same scriptable object can be expanded further by just adding new fields and methods. If we need a key to refer to a city, our scriptable object can be empty and use the asset&#8217;s file name itself as the key (it has a GUID anyway).</p>
<p>But, if later we want the merchant to use its city name in the user interface, we can easily add that as a property inside the CityScriptableObject code and that has no collateral effect on any other part of the code.</p>
<p>If you are thinking now about how this seems quite an unorthodox usage of scriptable objects, remember that this practice was initially proposed by Richard Fine, an employee of Unity Technologies itself, and has been validated by many other developers in the community.</p>
<p>Implementing a system that uses scriptable objects instead of enums is not much different than implementing a system that uses a self-made key system.</p>
<p>Entities will hold references to the scriptable objects and systems will consume these scriptable objects for comparison and even use their own member methods. Remember our <code>Use</code> method? The excerpt of the code below should help you envision a possible approach to this strategy.</p>
<pre class="language-c# hljs">[UnityEngine.CreateAssetMenu(fileName = "New Magic Element", menuName = "Magic/Magic Element", order = 0)]

public class MagicElementScriptableObject : UnityEngine.ScriptableObject
{
//Nothing 
}
</pre>
<pre class="language-c# hljs">public class MagicPotionScriptableObject : PotionScriptableObject
{
   public MagicElementScriptableObject magicElement;
   public int increaseBy;
  
   public override void Use()
   {   
character.IncreaseMagicElementPower(magicElement, increaseBy);
   }
</pre>
<pre class="language-c# hljs">public class Character
{
   public Dictionary&lt;MagicElementScriptableObject, int&gt; magicElements;
  
   public void IncreaseMagicElementPower (MagicElementScriptableObject magicElement, int value)
   {
magicElements[magicElement] += value;
   }
}
</pre>
<h2 id="judging-scriptable-objects">Judging scriptable Objects</h2>
<p>With their great flexibility and simplicity, scriptable objects offer many new approaches to systems, persistency, data storage, and even as substitutes for singletons and enums.</p>
<p>As stated before, due to their inheritance, their behavior is similar to many other components we are already used to, which makes the process of starting to use them more approachable.</p>
<p>Surely, all good things come at a cost — some of the approaches discussed before could also be implemented with different techniques that might achieve a higher level of performance or stability for the code base.</p>
<h3 id="flexibility">Flexibility</h3>
<p>The flexibility of using scriptable objects to replace enums might be too unorthodox and yield diminishing returns after your game is already well established. It can be then time to perform an inverse substitution and get enums back for their advantages.</p>
<p>Notice that this is likely to happen only after long brainstorming and play test sessions have been done during the prototyping stages.</p>
<h3 id="performance">Performance</h3>
<p>In terms of performance, scriptable objects behave just like a C# object. Their performance impact could be perceived during their serialization while starting the game and deserialization while saving them to a disk.</p>
<p>However, since they are essentially implemented as YAML files, the cost of both operations is essentially the same as if you were doing that with a regular JSON file. In a sense, using scriptable objects will be as performance heavy as most of your other strategies for data-driven development.</p>
<p>It is worth mentioning that if you are consistently saving data to a scriptable object and you want it to be saved to disk immediately, you might need to call the Unity API through the <code>AssetDatabase.SaveAssets</code> <a href="https://docs.unity3d.com/ScriptReference/AssetDatabase.SaveAssets.html" target="_blank" rel="noopener">call</a>, for example.</p>
<h2>Conclusion</h2>
<p>Besides all of that, there is still plenty of room for experimentation and design. Scriptable objects can be useful tools in Runtime Sets, which help keep track of information among entities by sharing the same scriptable object, abolishing the need for an intermediary singleton.</p>
<p>In the context of mixed reality (MR), a <a href="https://ieeexplore-ieee-org.saxion.idm.oclc.org/abstract/document/9757432" target="_blank" rel="noopener">toolkit</a> for MR which uses scriptable objects was developed as a layer to code sequences, instructions, and even questionnaires for a training tool.</p>
<p>Increase the freedom and versatility of your game design and speed up your prototype stage. The worst thing that can happen is that, after your game is stable and fun, you might need to refactor some parts of the system, which undoubtedly is way better than optimizing a framework for a boring or uninteresting game.</p>
<p>Thanks for reading and let me know if you would like more unorthodox Unity strategies for fast development and prototyping. You can see more of my work <a href="http://www.dagongraphics.com/" target="_blank" rel="noopener">here</a>.</p>
<p>The post <a rel="nofollow" href="https://blog.logrocket.com/fast-prototyping-unity-scriptable-objects/">Fast prototyping in Unity: Scriptable objects</a> appeared first on <a rel="nofollow" href="https://blog.logrocket.com">LogRocket Blog</a>.</p>
]]>
      </content:encoded>

      <wfw:commentRss>https://blog.logrocket.com/fast-prototyping-unity-scriptable-objects/feed/</wfw:commentRss>
      <slash:comments>0</slash:comments>


      <post-id xmlns="com-wordpress:feed-additions:1">122089</post-id>
    </item>
    <item>
      <title>Using coroutines in Unity</title>
      <link>https://blog.logrocket.com/using-coroutines-unity/</link>
      <comments>https://blog.logrocket.com/using-coroutines-unity/#respond</comments>

      <dc:creator>
        <![CDATA[Uriel Carrillo]]>
      </dc:creator>
      <pubDate>Thu, 30 Jun 2022 16:00:30 +0000</pubDate>
      <category>
        <![CDATA[Uncategorized]]>
      </category>
      <category>
        <![CDATA[unity]]>
      </category>
      <guid isPermaLink="false">https://blog.logrocket.com/?p=120480</guid>

      <description>
        <![CDATA[<p>Coroutines can be used to execute a piece of code across multiple frames and can continue executing a section of code until you tell it to stop.</p>
<p>The post <a rel="nofollow" href="https://blog.logrocket.com/using-coroutines-unity/">Using coroutines in Unity</a> appeared first on <a rel="nofollow" href="https://blog.logrocket.com">LogRocket Blog</a>.</p>
]]>
      </description>
      <content:encoded>
        <![CDATA[<p>As your Unity project grows, there will be a need to create more complex logic. You might need to load different resources or prepare time-sensitive scenes. Ultimately, we want players to have the most seamless experience without breaking their immersion.</p>
<p>With coroutines, you can use various approaches to achieve this. In this tutorial, we will go over different uses of coroutines and when to use them.</p>
<ul>
<li><a href="#what-are-coroutines">What are coroutines?</a></li>
<li><a href="#when-use-coroutines">When to use coroutines</a></li>
<li><a href="#example-coroutine">An example of a coroutine</a></li>
<li><a href="#implementing-coroutine-never-stops">Implementing a coroutine that never stops</a></li>
<li><a href="#how-stop-coroutine">How to stop a coroutine</a></li>
<li><a href="#pausing-games-coroutines">Pausing games with coroutines</a></li>
<li><a href="#using-multiple-coroutines-stopping-at-once">Using multiple coroutines and stopping them all at once</a></li>
<li><a href="#coroutines-vs-threads">Coroutines vs. threads</a></li>
<li><a href="#additional-thoughts">Additional thoughts</a></li>
</ul>
<h2 id="what-are-coroutines">What are coroutines?</h2>
<p>Unity uses frames as a way to represent time. Normal methods will execute in one frame and move into the next instruction.</p>
<p><a href="https://docs.unity3d.com/Manual/Coroutines.html" target="_blank" rel="noopener">Coroutines can be used to execute a piece of code across multiple frames.</a> They can also be used to keep executing a section of code until you tell it to stop. A coroutine contains a yield instruction that will wait a certain amount of time you tell it to.</p>
<h2 id="when-use-coroutines">When to use coroutines</h2>
<p>Let’s say you want to use a normal call method with a <code>for</code> loop to fill a health bar from 1–100 HP. The player will see a full health bar at the end of your method. That’s because the time it takes the method to count to 100 is faster than a frame on Unity, and is also faster than your players’ eyes.</p>
<p>This is a good example of when to use coroutines. You’d tell the coroutine to fill 1 HP, wait a fraction of a second, and do it again until we reach the full 100 HP.</p>
<p>This way, your players will watch the health bar fill up smoothly over time.</p>
<pre class="language-csharp hljs">​​using System.Collections;
using UnityEngine;

public class HealthBar : MonoBehaviour
{
   int maxHP=100;
   int currentHP=0;


   void Start()
   {
       Debug.Log("Start Increasing Health");
       StartCoroutine(HealthIncrease());
       Debug.Log("Finish start event");
   }

   IEnumerator HealthIncrease(){
       Debug.Log("Start Coroutine");
       for(int x=1; x&lt;=maxHP;x++){
           currentHP=x;
           //Increase or decrease the parameter of WaitForSeconds
           //to test different speeds.
           yield return new WaitForSeconds(0.2f);
           Debug.Log("HP: "+currentHP+" / "+maxHP);
       }
       Debug.Log("Current health is "+maxHP);
       Debug.Log("End Coroutine");
   }
}
</pre>
<p>Another potential use case could be if a player is being hit by an object and you want to add a few seconds when nothing else can hit them. This will create temporary invincibility to avoid an unjust game experience.</p>
<p>In pseudocode, we would end up with something like this: when an object hits the player, deactivate the player hitbox for two seconds and then activate it again.</p>
<h2 id="example-coroutine">An example of a coroutine</h2>
<p><code>coroutine</code> is a method from <code>MonoBehavior</code> that has an <code>IEnumerator</code> return type. To</p>
<p>invoke and start using it, you should use the <code>StartCoroutine</code> method and pass your <code>coroutine</code> method and parameters if needed.</p>
<p>On a coroutine, the yield return is when your code pauses for the next frame and continues afterward. If you don’t need your coroutine to wait, you can use <code>WaitForSeconds</code> (or any other yield instruction), as well as <code>null</code>.</p>
<pre class="language-csharp hljs">using System.Collections;
using UnityEngine;

public class Coroutines : MonoBehaviour
{
   void Start(){
       Debug.Log("Begin Start event");
       StartCoroutine(WaitCoroutine(2f));
       Debug.Log("End Start event");
   }

   private IEnumerator WaitCoroutine(float time){
       Debug.Log("Inside coroutine");
       yield return new WaitForSeconds(time);
       Debug.Log("Finish coroutine after "+time+" seconds");
   }
}
</pre>
<p>The example above will print:</p>
<pre>Begin Start event
Inside coroutine
End Start event
</pre>
<p>It will wait for two seconds, and will print:</p>
<pre>Finish coroutine after 2 seconds
</pre>
<h2 id="implementing-coroutine-never-stops">Implementing a coroutine that never stops</h2>
<p>You can also declare an <code>IEnumerator</code> variable and reference it with your coroutine to invoke it.</p>
<p>In the example below, since the <code>while</code> loop will always be <code>true</code>, the coroutine will continue executing after waiting for two seconds.</p>
<pre class="language-csharp hljs">using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class InfiniteLoopCoroutine : MonoBehaviour
{
   IEnumerator myCouroutine;

   void Start(){
       myCouroutine= InfiniteLoop(2f);
       StartCoroutine(myCouroutine);
   }

   IEnumerator InfiniteLoop(float seconds){
       while(true){
           yield return new WaitForSeconds(seconds);
           Debug.Log("Inside infiniteLoop");
       }
   }
}
</pre>
<p>Please note that <code>WaitForSeconds</code> uses a float parameter divided by <code>Time.timeScale</code>. We do this so we can mimic a real second on the game’s device.</p>
<h2 id="how-stop-coroutine">How to stop a coroutine</h2>
<p>Now we have a coroutine that has an infinite loop. But how do we make it stop?</p>
<p>You can stop a running coroutine with the <code>StopCoroutine</code> method, which will accept either of the following as a parameter:</p>
<ul>
<li>A string with the name of the coroutine</li>
<li>An <code>IEnumerator</code> reference of your coroutine</li>
</ul>
<p>So, in the previous example, we could do:</p>
<pre class="language-csharp hljs">StopCoroutine("InfiniteLoop");
</pre>
<p>or…</p>
<pre class="language-csharp hljs">StopCoroutine(myCoroutine);
</pre>
<p>A coroutine will also stop if the object that it’s attached to is disabled by <code>SetActive(false) </code>or by destroying the object with <code>Destroy()</code>.</p>
<p>The following example will stop the coroutine when the player presses the <code>Space</code> key.</p>
<pre class="language-csharp hljs">using System.Collections;
using UnityEngine;

public class InfiniteLoopCoroutine : MonoBehaviour
{
   IEnumerator myCouroutine;

   void Start(){
       myCouroutine= InfiniteLoop(2f);
       StartCoroutine(myCouroutine);
   }

   IEnumerator InfiniteLoop(float seconds){
       while(true){
           yield return new WaitForSeconds(seconds);
           Debug.Log("Inside infiniteLoop");
       }
   }

   void Update(){
       if (Input.GetKeyDown(KeyCode.Space))
       {
           StopCoroutine("InfiniteLoop");
           Debug.Log("Coroutine stopped");
       }
   }
}
</pre>
<h2 id="pausing-games-coroutines">Pausing games with coroutines</h2>
<p>A popular way of pausing a game in Unity is by setting <code>Time.timeScale</code> equal to <code>0</code>. This sets the property that Unity uses to measure time based on the device running the game.</p>
<p>Keep in mind that this is all in a game/unity project environment, so it’s not equivalent to the time in the real world.</p>
<p>When <code>Time.timeScale</code> is set to <code>0</code>, the game pauses and the <code>Update</code> method is no longer being executed in each frame. Every animation being executed is stopped and every moving object that was using timescale stops in place.</p>
<p>For coroutines, this is a little different.</p>
<p>If you are executing a coroutine in a loop and it’s still going when <code>Time.timeScale</code> is set to <code>0</code>, the coroutine will keep going but <code>WaitForSeconds</code> will not.</p>
<p><code>WaitForSeconds</code> uses <code>Time.timeScale</code> to know what a real second is. In this case, it will behave properly, but the rest of the code in the coroutine will continue executing.</p>
<pre class="language-csharp hljs">using System.Collections;
using UnityEngine;

public class TimeStop : MonoBehaviour
{
   // Start is called before the first frame update
   void Start()
   {
       StartCoroutine(PrintEverySecond());
   }

   // Update is called once per frame
   void Update()
   {
       if(Input.GetKeyDown(KeyCode.Space)){
           if(Time.timeScale==1.0){
               Debug.Log("Time Stop");
               Time.timeScale=0.0f;
               StartCoroutine(PrintOnStop()); //We start a new coroutine after stopping time.
           }else{
               Debug.Log("Time Continue");
               Time.timeScale=1.0f;
           }
       }
   }

   IEnumerator PrintEverySecond(){
       while(true){
           yield return new WaitForSeconds(1.0f);
           Debug.Log("Inside Coroutine");
       }
   }

   IEnumerator PrintOnStop(){
       for(int x=0;x&lt;=10;x++){
           Debug.Log("Time is stopped but I'm still running "+x);
       }
       yield return null;
   }
}
</pre>
<p>Please keep in mind that you can stop a coroutine with <code>StopCoroutine</code> before pausing the game to prevent unexpected behavior.</p>
<p>You can also stop all coroutines at the same time! We’ll go over this in the next section.</p>
<h2 id="using-multiple-coroutines-stopping-at-once">Using multiple coroutines and stopping them all at once</h2>
<p>As you know, you can execute multiple coroutines that behave differently at the same time. They can be stopped all at once by the <code>StopAllCoroutines()</code> method.</p>
<pre class="language-csharp hljs">using System.Collections;
using UnityEngine;

public class MultipleCoroutines : MonoBehaviour
{
   void Start()
   {
       //You can use multiple coroutines at the same time,
       //even on the same definition.
       //Each one will behave individually.
       StartCoroutine(MyCoroutine(1f));
       StartCoroutine(MyCoroutine(3f));
       StartCoroutine(MyCoroutine(5f));
   }

   void Update(){
       //If you hit space at runtime, all the coroutines will stop
       if(Input.GetKeyDown(KeyCode.Space)){
           StopAllCoroutines();
           Debug.Log("All coroutines stopped");
       }
   }

   IEnumerator MyCoroutine(float sec){
       while(true){
           yield return new WaitForSeconds(sec);
           Debug.Log("I'm on a loop that prints every "+sec+" seconds");
       }
   }
}
</pre>
<p><code>StopAllCoroutines()</code> doesn’t take a parameter for stopping all the coroutines in the game at the same time.</p>
<h2 id="coroutines-vs-threads">Coroutines vs. threads</h2>
<p>Keep in mind that coroutines are not threads. Any synchronous code executed in a coroutine will be on the main thread.</p>
<p>If you want to use threads for consuming an HTTP request, for example, <a href="https://blog.logrocket.com/understanding-asynchronous-javascript/" target="_blank" rel="noopener">you can use async methods</a>.</p>
<p>Here’s an example of consuming an HTTP request using coroutines:</p>
<pre class="language-csharp hljs">using System.Collections;
using UnityEngine.Networking;
using UnityEngine;

public class HTTP_Request_Example : MonoBehaviour
{
   void Start()
   {
       //Consume an HTTP request with a coroutine
       //It happens on the main thread, which might cause the UI
       //to be unresponsive for a bit
       StartCoroutine(MyRequest("www.google.com"));
   }

   IEnumerator MyRequest(string url){
       using (UnityWebRequest request = UnityWebRequest.Get(url))
       {
           //Fetches a page and displays the number of characters of the response.
           yield return request.SendWebRequest();
           Debug.Log("Page length: "+request.downloadHandler.text.Length);
       }
   }
}
</pre>
<p>Although there are a lot of examples of this approach, it’s not ideal for this kind of situation when you don’t have full control of the time responses of these external APIs.</p>
<p>Here’s the same example using an asynchronous method instead:</p>
<pre class="language-csharp hljs">using System.Collections;
using UnityEngine.Networking;
using UnityEngine;
using System.Threading.Tasks;
using System.Runtime.CompilerServices;

//By default, UnityWebRequest is not async, so you will need this extension
//Credit goes to: https://gist.github.com/mattyellen/d63f1f557d08f7254345bff77bfdc8b3
public static class ExtensionMethods
{
   public static TaskAwaiter GetAwaiter(this AsyncOperation asyncOp)
   {
       var tcs = new TaskCompletionSource&lt;object&gt;();
       asyncOp.completed += obj =&gt; { tcs.SetResult(null); };
       return ((Task)tcs.Task).GetAwaiter();
   }
}

public class HTTP_Request_Async_Example : MonoBehaviour
{
   void Start()
   {
       //Invoke a new thread when the web request will happen without blocking the UI
       ConsumeWebRequest();
   }

   async void ConsumeWebRequest(){
       Debug.Log(await MyRequest("www.google.com"));
   }

   async Task&lt;string&gt; MyRequest(string url){
       using (UnityWebRequest request = UnityWebRequest.Get(url))
       {
           //Fetches a page and displays the number of characters of the response.
           await request.SendWebRequest();
           string response = "Page length: "+request.downloadHandler.text.Length;
           return response;
       }
   }
}
</pre>
<p>Out of the box, Unity uses its own networking package called <code>UnityEngine.Networking</code>.</p>
<p>By default, this package is not asynchronous. If you use it inside of a coroutine, it could potentially lock the main thread of your app, resulting in some unexpected behavior.</p>
<p>The second example will use its own thread and leave the main thread free for the player. The game will feel like it’s running as smoothly as ever!</p>
<h2 id="additional-thoughts">Additional thoughts</h2>
<p>Coroutines are very resource-efficient, so don’t be afraid of trying them out. If you end up in a situation where you have too many coroutines at the same time, you might need to double-check your design for solutions. Two or three coroutines in the same objects that really need them could be enough.</p>
<p>There are a lot of examples of using coroutines with WebRequest out there, but, in general, if you have to consume external resources that your project can’t control (like the time it takes a server to answer your request), it’s a good idea to use asynchronous methods instead of coroutines. This is because coroutines execute synchronous code and might use the main thread, resulting in a bad experience for your players.</p>
<p>I’m not saying that <code>async</code>/ <code>await</code> are better than coroutines in Unity, they both are great tools. It really depends on your design and choices about when and where to use them. A general rule of thumb could be that for internal processes, use coroutine and for external processes, use asynchronous methods.</p>
<h2 id="conclusion">Conclusion</h2>
<p>Coroutines are a great tool to have on your belt. They can help you set up the level for your players in front of their eyes, make smooth transitions between events, or create new functionality for you to impress your players.</p>
<p>I hope you found this article useful and liked reading it as much as I enjoyed writing it!</p>
<p>Happy gamedev!</p>
<p>The post <a rel="nofollow" href="https://blog.logrocket.com/using-coroutines-unity/">Using coroutines in Unity</a> appeared first on <a rel="nofollow" href="https://blog.logrocket.com">LogRocket Blog</a>.</p>
]]>
      </content:encoded>

      <wfw:commentRss>https://blog.logrocket.com/using-coroutines-unity/feed/</wfw:commentRss>
      <slash:comments>0</slash:comments>


      <post-id xmlns="com-wordpress:feed-additions:1">120480</post-id>
    </item>
    <item>
      <title>Comparing SolidJS and Voby</title>
      <link>https://blog.logrocket.com/comparing-solid-js-voby/</link>
      <comments>https://blog.logrocket.com/comparing-solid-js-voby/#respond</comments>

      <dc:creator>
        <![CDATA[Alex Merced]]>
      </dc:creator>
      <pubDate>Thu, 30 Jun 2022 14:30:01 +0000</pubDate>
      <category>
        <![CDATA[Uncategorized]]>
      </category>
      <category>
        <![CDATA[blockchain]]>
      </category>
      <category>
        <![CDATA[web3]]>
      </category>
      <guid isPermaLink="false">https://blog.logrocket.com/?p=121590</guid>

      <description>
        <![CDATA[<p>Voby works well to create a performant and reactive application, so it's definitely something to keep an eye on in the frontend framework space.</p>
<p>The post <a rel="nofollow" href="https://blog.logrocket.com/comparing-solid-js-voby/">Comparing SolidJS and Voby</a> appeared first on <a rel="nofollow" href="https://blog.logrocket.com">LogRocket Blog</a>.</p>
]]>
      </description>
      <content:encoded>
        <![CDATA[<p>In the world of frontend JavaScript frameworks, we continue to see new innovations that enable better development experiences and more performant applications.</p>
<p>On one hand, there are frameworks and libraries like Vue, React, and Angular that allow you to declaratively define your UI with updates being optimized by a Virtual DOM, ensuring that only necessary updates are made. On the other hand, there are frameworks like Svelte and SolidJS, which moved away from shipping a framework and running a virtual DOM to instead compiling declarative UI into standard JavaScript, resulting in smaller bundles, faster speeds, and more granular reactivity using observables.</p>
<p>The latter type of framework has picked up big momentum since <a href="https://vercel.com/blog/vercel-welcomes-rich-harris-creator-of-svelte">Vercel hired Svelte creator Rich Harris</a> to work on Svelte full time, along with Netlify hiring <a href="https://dev.to/ryansolid/state-of-solid-september-2021-4mi2">SolidJS creator, Ryan Carniato</a>, to do the same with SolidJS.</p>
<p>Recently, another framework has come to the party, <a href="https://github.com/vobyjs/voby">Voby</a>, which is inspired by many of the ideas of SolidJS but with a few differences. Voby was primarily intended to serve as the framework for building the author’s note taking app, <a href="https://github.com/notable/notable">Notable</a>. In this article, we’ll compare Voby with SolidJS to see what Voby brings to the table. Let&#8217;s get started!</p>
<ul style="margin-bottom: 0px; padding-bottom: 0px;">
<li><a href="#reactive-ui-syntax">Reactive UI Syntax</a>
<ul style="margin-bottom: 0px; padding-bottom: 0px;">
<li><a href="#solid-js">SolidJS</a></li>
<li><a href="#voby">Voby</a></li>
</ul>
</li>
<li><a href="#control-flow-primitives">Control flow primitives</a>
<ul style="margin-bottom: 0px; padding-bottom: 0px;">
<li><a href="#conditional-rendering">Conditional rendering</a></li>
<li><a href="#iterating-over-lists">Iterating over lists</a></li>
<li><a href="#switches">Switches</a></li>
</ul>
</li>
</ul>
<h2 id="reactive-ui-syntax">Reactive UI syntax</h2>
<p>One of the most noticeable differences from framework to framework is the syntax for describing each UI and its reactivity.</p>
<h3 id="solid-js">SolidJS</h3>
<p>SolidJS uses JSX for expressing UI and Hooks for creating reactivity through a custom observables implementation. In comparison, Svelte uses RXJS for observables. In SolidJS, a simple counter component would look like the following:</p>
<pre class="language-javascript">import { createSignal } from "solid-js";

function Counter(props) {
  const [count, setCount] = createSignal(0)
  return &lt;div onClick={() =&gt; setCount(count() + 1)}&gt;{count()}&lt;/div&gt;;
}
</pre>
<p>Using JSX does require a build step, and SolidJS has many optimizations that occur during this build step. However, if you really want to avoid building, you can opt to use <a href="https://lit.dev/docs/v1/lit-html/introduction/">lit-html</a> or <a href="https://github.com/solidjs/solid/tree/main/packages/solid/h">HyperScript</a> template literals.</p>
<p>Also, you can see that in SolidJS, reactivity is handled by <a href="https://www.solidjs.com/tutorial/introduction_signals">signals</a>, which are observable values using Solid’s custom observable implementation. All JSX expressions are assumed to be effects in SolidJS. These signals can be used in effects, so whenever a signal used in the effect updates, the effect will re-run. Or, in our case, the effect will rebuild the UI from the JSX expression. The API for signals is very similar to React state where you have the value as well as a setter function for value. You don’t change the value directly.</p>
<h3 id="voby">Voby</h3>
<p>Voby also uses observables using a library called <a href="https://github.com/vobyjs/oby">Oby</a>. Voby uses JSX as well, but it can also use <a href="https://github.com/developit/htm">HTM</a> as an alternative, which is a mix of JSX, HyperScript, and lit-html in one syntax. Below is an example of a simple Voby counter component using HTML:</p>
<pre class="language-html">import {html} from 'voby';

const Counter = (): JSX.Element =&gt; {
  const value = $(0);
  const increment = () =&gt; value ( prev =&gt; prev + 1 );
  return html`
      &lt;p onClick=${increment}&gt;${value}&lt;/p&gt;
  `;
};
</pre>
<p>Voby handles reactivity a little differently than SolidJS. Reactive values are defined using the <code>$()</code> function. Instead of getting the value and a setter, you get a single function that acts like both a getter and setter. When passed an argument, it will set the value. In the <code>html</code> tagged template literals, if an observable value is used inside of it, it will update whenever the value updates.</p>
<h2 id="control-flow-primitives">Control flow primitives</h2>
<p>Instead of relying on <code>array.map</code> and JavaScript for a lot of control flow logic like React, both SolidJS and Voby have built-in control flow components that are easier to use with under the hood optimization, meaning you don&#8217;t have to worry about key props.</p>
<h3 id="conditional-rendering">Conditional rendering</h3>
<p>In SolidJS, you would use the <code>Show</code> component for conditional rendering:</p>
<pre class="language-javascript">&lt;Show when={state.count &gt; 0} fallback={&lt;div&gt;Loading...&lt;/div&gt;}&gt;
  &lt;div&gt;My Content&lt;/div&gt;
&lt;/Show&gt;
</pre>
<p>If the <code>when</code> prop is <code>true</code>, the <code>Show</code> components will render the UI in the child expression. If not, it will render the value in the <code>fallback</code> prop.</p>
<p>On the other hand, Voby has an <code>If</code> component:</p>
<pre class="language-javascript">&lt;If when={visible}&gt;
   &lt;p&gt;Hello!&lt;/p&gt;
&lt;/If&gt;
</pre>
<p>The <code>If</code> component works pretty much like the SolidJS <code>Show</code> component, rendering the UI in the child expression if the <code>When</code> prop is <code>true</code>.</p>
<h3 id="iterating-over-lists">Iterating over lists</h3>
<p>To loop over arrays of data in React, we’d have to rely on the <code>array.map</code> method and make sure to pass a unique key prop to allow the virtual DOM to optimize updates. In SolidJS and Voby, we don’t have to worry about either the key prop or using <code>map</code>.</p>
<p>SolidJS has the <code>For</code> component, which takes the array as the <code>each</code> prop:</p>
<pre class="language-javascript">&lt;For each={state.list} fallback={&lt;div&gt;Loading...&lt;/div&gt;}&gt;
  {(item) =&gt; &lt;div&gt;{item}&lt;/div&gt;}
&lt;/For&gt;
</pre>
<p>In case the data isn’t available yet, you can pass a <code>fallback</code> expression.</p>
<p>Voby also has a <code>For</code> component. It basically works the same as the <code>For</code> component in SolidJS, but instead of an <code>Each</code> prop, it uses a <code>value</code> prop to define the array to be looped over:</p>
<pre class="language-javascript">&lt;For values={numbers}&gt;
      {( value ) =&gt; {
        return &lt;p&gt;Value: {value}&lt;/p&gt;
      }}
&lt;/For&gt;
</pre>
<h3 id="switches">Switches</h3>
<p>The SolidJS <code>Switch</code> component will look through each nested <code>Match</code> component and render the first one with a  <code>when</code> prop that is <code>true</code>. If no <code>Match</code> is rendered, then the <code>fallback</code> prop on the <code>Switch</code> is rendered:</p>
<pre class="language-javascript">&lt;Switch fallback={&lt;div&gt;Not Found&lt;/div&gt;}&gt;
  &lt;Match when={state.route === "home"}&gt;
    &lt;Home /&gt;
  &lt;/Match&gt;
  &lt;Match when={state.route === "settings"}&gt;
    &lt;Settings /&gt;
  &lt;/Match&gt;
&lt;/Switch&gt;
</pre>
<p>Voby uses <code>Switch</code> and <code>Switch.case</code>:</p>
<pre class="language-javascript">&lt;Switch when={value}&gt;
        &lt;Switch.Case when={0}&gt;
          &lt;p&gt;0, the boundary between positives and negatives! (?)&lt;/p&gt;
        &lt;/Switch.Case&gt;
        &lt;Switch.Case when={1}&gt;
          &lt;p&gt;1, the multiplicative identity!&lt;/p&gt;
        &lt;/Switch.Case&gt;
        &lt;Switch.Default&gt;
          &lt;p&gt;{value}, I don't have anything interesting to say about that :(&lt;/p&gt;
        &lt;/Switch.Default&gt;
&lt;/Switch&gt;
</pre>
<p>The Voby <code>Switch</code> works more like a traditional JavaScript switch statement in that a value is specified and tested against a bunch of different cases, and the code in matching cases is run. In this case, the value is specified in the <code>when</code> prop in the <code>Switch</code>, and the cases are in the <code>when</code> prop of each <code>Switch.Case</code>.</p>
<h2 id="conclusion">Conclusion</h2>
<p>Although Voby executes on many of the ideas and principles of SolidJS, it is still in its early stages. Therefore, it doesn&#8217;t have support for server-side rendering or other features available in the production ready SolidJS.  However, seeing the Notable app in action makes me optimistic for what is to come.</p>
<p>Voby works well in creating a performant and reactive application, so it&#8217;s definitely something to keep an eye on in the frontend framework space. I hope you enjoyed this article, and be sure to leave a comment if you have any questions. Happy coding!</p>
<p>The post <a rel="nofollow" href="https://blog.logrocket.com/comparing-solid-js-voby/">Comparing SolidJS and Voby</a> appeared first on <a rel="nofollow" href="https://blog.logrocket.com">LogRocket Blog</a>.</p>
]]>
      </content:encoded>

      <wfw:commentRss>https://blog.logrocket.com/comparing-solid-js-voby/feed/</wfw:commentRss>
      <slash:comments>0</slash:comments>


      <post-id xmlns="com-wordpress:feed-additions:1">121590</post-id>
    </item>
    <item>
      <title>The fundamentals of Unity 2D colliders</title>
      <link>https://blog.logrocket.com/fundamentals-unity-2d-colliders/</link>
      <comments>https://blog.logrocket.com/fundamentals-unity-2d-colliders/#respond</comments>

      <dc:creator>
        <![CDATA[Diego Giacomelli]]>
      </dc:creator>
      <pubDate>Thu, 30 Jun 2022 13:00:44 +0000</pubDate>
      <category>
        <![CDATA[Uncategorized]]>
      </category>
      <category>
        <![CDATA[unity]]>
      </category>
      <guid isPermaLink="false">https://blog.logrocket.com/?p=120762</guid>

      <description>
        <![CDATA[<p>Learn about the common properties and behaviors of Unity 2D colliders and how they interact with each other.</p>
<p>The post <a rel="nofollow" href="https://blog.logrocket.com/fundamentals-unity-2d-colliders/">The fundamentals of Unity 2D colliders</a> appeared first on <a rel="nofollow" href="https://blog.logrocket.com">LogRocket Blog</a>.</p>
]]>
      </description>
      <content:encoded>
        <![CDATA[<p>In the first years of Unity, there wasn’t solid support for 2D game development inside the engine — for years, the right way to refer to it was “Unity 3D”. Though it was possible to develop 2D games with Unity, without official engine support, it wasn’t a smooth process like it is nowadays.</p>
<p>Around 2013, Unity started to support 2D game development with inbuilt components, like a 2D physics engine — Collider2D, Rigidbody2D, Vector2, Sprite, Tilemap, etc.</p>
<p>In this post, we’ll cover the common properties and behaviors of 2D colliders, which messages are sent to their GameObjects, how we can use them in our scripts, and how each collider setup interacts with others.</p>
<p>These are the tutorial sections:</p>
<ul>
<li><a href="#setting-up-unity-project">Setting up our Unity project</a></li>
<li><a href="#what-are-colliders">What are colliders?</a></li>
<li><a href="#common-properties-behaviors">Common properties and behaviors of colliders</a></li>
<li><a href="#adding-2d-collider-gameobject">Adding a 2D collider to a GameObject</a></li>
<li><a href="#what-is-rigidbody2d">What is a Rigidbody2D component?</a></li>
<li><a href="#using-physicsmaterial2d-add-effects">Using PhysicsMaterial2D to add effects</a></li>
<li><a href="#collision-callbacks">Collision callbacks</a></li>
<li><a href="#using-collision-callbacks-scripts">Using collision callbacks on scripts</a>
<ul style="margin-bottom: 0px; padding-bottom: 0px;">
<li><a href="#without-trigger">Without a trigger</a></li>
<li><a href="#with-trigger">With a trigger</a></li>
</ul>
</li>
<li><a href="#collider-interactions">Collider interactions</a>
<ul style="margin-bottom: 0px; padding-bottom: 0px;">
<li><a href="#how-do-setups-affect-collider-interactions">How do these setups affect collider interactions?</a></li>
</ul>
</li>
<li><a href="#physics2d-settings">Physics2D settings</a></li>
<li><a href="#source-code-samples">Source code and samples</a></li>
</ul>
<h3>Prerequisites</h3>
<p>The following prerequisites are required to follow along with this tutorial:</p>
<ul>
<li>Basic knowledge of Unity</li>
<li>Previous experience writing C# scripts in Unity</li>
</ul>
<h2 id="setting-up-unity-project">Setting up our Unity project</h2>
<p>First, we need to create our Unity project. For this tutorial, we’ll use the version 2021.3.4f1, which, at the moment I’m writing, is the newest LTS Unity version.</p>
<p>On the project templates list, choose <strong>2D(core)</strong>, give it a name, and click the <strong>Create project</strong> button. We’ll call ours <code>SampleScene</code>.</p>
<p id="gdcalert1"><img data-attachment-id="121028" data-permalink="https://blog.logrocket.com/fundamentals-unity-2d-colliders/attachment/create-new-unity-project/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2022/06/create-new-unity-project.png" data-orig-size="730,425" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="Create new Unity project" data-image-description="" data-image-caption="" data-medium-file="https://blog.logrocket.com/wp-content/uploads/2022/06/create-new-unity-project-300x175.png" data-large-file="https://blog.logrocket.com/wp-content/uploads/2022/06/create-new-unity-project.png" loading="lazy" class="aligncenter wp-image-121028 size-full" src="https://blog.logrocket.com/wp-content/uploads/2022/06/create-new-unity-project.png" alt="Create new project Unity page" width="730" height="425" srcset="https://blog.logrocket.com/wp-content/uploads/2022/06/create-new-unity-project.png 730w, https://blog.logrocket.com/wp-content/uploads/2022/06/create-new-unity-project-300x175.png 300w" sizes="(max-width: 730px) 100vw, 730px" /></p>
<p>With the project started, create two folders called <code>Scripts</code> and <code>Physic Materials</code> inside the <code>Assets</code> folder. We’ll use them to keep our project organized during the tutorial.<br />
<span style="font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen-Sans, Ubuntu, Cantarell, 'Helvetica Neue', sans-serif;"><img data-attachment-id="121030" data-permalink="https://blog.logrocket.com/fundamentals-unity-2d-colliders/attachment/assets-folder-organization/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2022/06/assets-folder-organization.png" data-orig-size="528,192" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="Assets folder oganization" data-image-description="" data-image-caption="" data-medium-file="https://blog.logrocket.com/wp-content/uploads/2022/06/assets-folder-organization-300x109.png" data-large-file="https://blog.logrocket.com/wp-content/uploads/2022/06/assets-folder-organization.png" loading="lazy" class="aligncenter size-full wp-image-121030" src="https://blog.logrocket.com/wp-content/uploads/2022/06/assets-folder-organization.png" alt="Creating folders within assets folder" width="528" height="192" srcset="https://blog.logrocket.com/wp-content/uploads/2022/06/assets-folder-organization.png 528w, https://blog.logrocket.com/wp-content/uploads/2022/06/assets-folder-organization-300x109.png 300w" sizes="(max-width: 528px) 100vw, 528px" /></span></p>
<h2 id="what-are-colliders">What are colliders?</h2>
<p>Before we start using our Unity project, we need to take a little dive into the basic concepts of colliders.</p>
<p>Colliders are the way that Unity (and most of the available game engines, if not all) manages collisions between GameObjects. For the sake of this tutorial, we are only using the 2D colliders, but a lot of the rules mentioned below are applicable to 3D colliders, too.</p>
<p>In Unity, a 2D collider is a component that allows us to define a shape, where we want to receive notifications in our GameObject’s script whenever another GameObject (with another collider) collides with the first collider.</p>
<blockquote><p><a href="https://docs.unity3d.com/Manual/Collider2D.html" target="_blank" rel="noopener">Unity doc tip</a>: A collider is invisible, and does not need to be the exact same shape as the GameObject’s mesh. A rough approximation of the mesh is often more efficient and indistinguishable in gameplay.</p></blockquote>
<p>Right now, Unity has eight inbuilt kinds of 2D colliders:</p>
<ol>
<li><code>BoxCollider2D</code></li>
<li><code>CapsuleCollider2D</code></li>
<li><code>CircleCollider2D</code></li>
<li><code>CompositeCollider2D</code></li>
<li><code>CustomCollider2D</code></li>
<li><code>EdgeCollider2D</code></li>
<li><code>PolygonCollider2D</code></li>
<li><code>TilemapCollider2D</code></li>
</ol>
<p id="gdcalert3"><img data-attachment-id="121032" data-permalink="https://blog.logrocket.com/fundamentals-unity-2d-colliders/attachment/inbuilt-2d-colliders/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2022/06/inbuilt-2d-colliders.png" data-orig-size="250,355" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="Inbuilt 2D colliders" data-image-description="" data-image-caption="" data-medium-file="https://blog.logrocket.com/wp-content/uploads/2022/06/inbuilt-2d-colliders-211x300.png" data-large-file="https://blog.logrocket.com/wp-content/uploads/2022/06/inbuilt-2d-colliders.png" loading="lazy" class="aligncenter size-full wp-image-121032" src="https://blog.logrocket.com/wp-content/uploads/2022/06/inbuilt-2d-colliders.png" alt="List of Unity's inbuilt 2D colliders" width="250" height="355" srcset="https://blog.logrocket.com/wp-content/uploads/2022/06/inbuilt-2d-colliders.png 250w, https://blog.logrocket.com/wp-content/uploads/2022/06/inbuilt-2d-colliders-211x300.png 211w" sizes="(max-width: 250px) 100vw, 250px" /></p>
<h2 id="common-properties-behaviors">Common properties and behaviors of colliders</h2>
<p>Every 2D collider in Unity inherits from a common class called <code>Collider2D</code>. As a result, they share common properties. Below is a list of the most notable and widely-used ones:</p>
<p id="gdcalert4"><img data-attachment-id="121034" data-permalink="https://blog.logrocket.com/fundamentals-unity-2d-colliders/attachment/common-properties-2d-collider/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2022/06/common-properties-2d-collider.png" data-orig-size="448,120" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="Common collider properties" data-image-description="" data-image-caption="" data-medium-file="https://blog.logrocket.com/wp-content/uploads/2022/06/common-properties-2d-collider-300x80.png" data-large-file="https://blog.logrocket.com/wp-content/uploads/2022/06/common-properties-2d-collider.png" loading="lazy" class="aligncenter size-full wp-image-121034" src="https://blog.logrocket.com/wp-content/uploads/2022/06/common-properties-2d-collider.png" alt="Common collider properties" width="448" height="120" srcset="https://blog.logrocket.com/wp-content/uploads/2022/06/common-properties-2d-collider.png 448w, https://blog.logrocket.com/wp-content/uploads/2022/06/common-properties-2d-collider-300x80.png 300w" sizes="(max-width: 448px) 100vw, 448px" /></p>
<ul>
<li>Shape (Edit collider) — Each kind of 2D collider has a different shape, but most of them allow us to change some properties of their shapes, like the scale and distance of vertices</li>
<li>Material — Defines the <code>PhysicsMaterial2D</code> that can be used by the collider to define things like friction and bounciness</li>
<li>isTrigger — If it’s checked, the collider will behave as a trigger. When a collider is not marked as a trigger, the physics engine will generate a collision; when the collider hits another collider, it produces the expected behaviors based on the colliders’ setups, like moving them to opposite directions or stopping them. However, when a collider is marked as a trigger, the physics engine will simply detect when it enters the space of another and no collision will be created</li>
<li>Used by Effector — Determines whether the collider will be used by an <code>Effector2D</code> attached to the GameObject</li>
</ul>
<blockquote><p><a href="https://docs.unity3d.com/Manual/Effectors2D.html" target="_blank" rel="noopener">Unity doc tip</a>: Effector2D components are used to direct the forces when colliders come into contact with each other</p></blockquote>
<ul>
<li>Offset — As the collider will be attached to a GameObject, we can use this property to define an offset position relative to the GameObject</li>
</ul>
<h2 id="adding-2d-collider-gameobject">Adding a 2D collider to a GameObject</h2>
<p>In our Unity project, add a <code>Sprite (Square)</code> to the opened scene (<code>SampleScene</code>):</p>
<p id="gdcalert5"><img data-attachment-id="121037" data-permalink="https://blog.logrocket.com/fundamentals-unity-2d-colliders/attachment/adding-sprite-toscene/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2022/06/adding-sprite-toscene.png" data-orig-size="730,636" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="Adding square sprite" data-image-description="" data-image-caption="" data-medium-file="https://blog.logrocket.com/wp-content/uploads/2022/06/adding-sprite-toscene-300x261.png" data-large-file="https://blog.logrocket.com/wp-content/uploads/2022/06/adding-sprite-toscene.png" loading="lazy" class="aligncenter size-full wp-image-121037" src="https://blog.logrocket.com/wp-content/uploads/2022/06/adding-sprite-toscene.png" alt="Adding square sprite to Sample Scene" width="730" height="636" srcset="https://blog.logrocket.com/wp-content/uploads/2022/06/adding-sprite-toscene.png 730w, https://blog.logrocket.com/wp-content/uploads/2022/06/adding-sprite-toscene-300x261.png 300w" sizes="(max-width: 730px) 100vw, 730px" /></p>
<p>Select the <code>Sprite (Square)</code> GameObject and add a component called <code>BoxCollider2D</code>:</p>
<p id="gdcalert6"><img data-attachment-id="121039" data-permalink="https://blog.logrocket.com/fundamentals-unity-2d-colliders/attachment/add-box-collider/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2022/06/add-box-collider.png" data-orig-size="455,708" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="Adding box collider" data-image-description="" data-image-caption="" data-medium-file="https://blog.logrocket.com/wp-content/uploads/2022/06/add-box-collider-193x300.png" data-large-file="https://blog.logrocket.com/wp-content/uploads/2022/06/add-box-collider.png" loading="lazy" class="aligncenter size-full wp-image-121039" src="https://blog.logrocket.com/wp-content/uploads/2022/06/add-box-collider.png" alt="Adding Box Collider component to sprite" width="455" height="708" srcset="https://blog.logrocket.com/wp-content/uploads/2022/06/add-box-collider.png 455w, https://blog.logrocket.com/wp-content/uploads/2022/06/add-box-collider-193x300.png 193w" sizes="(max-width: 455px) 100vw, 455px" /></p>
<p>Now repeat the process, but add a <code>Sprite (Circle)</code> to the scene and add a <code>CircleCollider2D</code> component to it.</p>
<p id="gdcalert7"><img data-attachment-id="121042" data-permalink="https://blog.logrocket.com/fundamentals-unity-2d-colliders/attachment/add-circle-collider/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2022/06/add-circle-collider.png" data-orig-size="461,643" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="Add CircleCollider2D" data-image-description="" data-image-caption="" data-medium-file="https://blog.logrocket.com/wp-content/uploads/2022/06/add-circle-collider-215x300.png" data-large-file="https://blog.logrocket.com/wp-content/uploads/2022/06/add-circle-collider.png" loading="lazy" class="aligncenter wp-image-121042 size-full" src="https://blog.logrocket.com/wp-content/uploads/2022/06/add-circle-collider.png" alt="Adding CircleCollider2D to circle sprite" width="461" height="643" srcset="https://blog.logrocket.com/wp-content/uploads/2022/06/add-circle-collider.png 461w, https://blog.logrocket.com/wp-content/uploads/2022/06/add-circle-collider-215x300.png 215w" sizes="(max-width: 461px) 100vw, 461px" /></p>
<p>Move the<code> Circle GameObject</code> a little on top of the <code>Square GameObject</code>:</p>
<p id="gdcalert8"><img data-attachment-id="121091" data-permalink="https://blog.logrocket.com/fundamentals-unity-2d-colliders/attachment/move-circle-square/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2022/06/move-circle-square.png" data-orig-size="708,556" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="Move circle over square" data-image-description="" data-image-caption="" data-medium-file="https://blog.logrocket.com/wp-content/uploads/2022/06/move-circle-square-300x236.png" data-large-file="https://blog.logrocket.com/wp-content/uploads/2022/06/move-circle-square.png" loading="lazy" class="aligncenter size-full wp-image-121091" src="https://blog.logrocket.com/wp-content/uploads/2022/06/move-circle-square.png" alt="Moving circle over square" width="708" height="556" srcset="https://blog.logrocket.com/wp-content/uploads/2022/06/move-circle-square.png 708w, https://blog.logrocket.com/wp-content/uploads/2022/06/move-circle-square-300x236.png 300w" sizes="(max-width: 708px) 100vw, 708px" /></p>
<p>If we hit the <strong>Play</strong> button now, nothing will happen, even if we move the GameObjects inside the editor. No collision will happen.</p>
<p id="gdcalert9"><img data-attachment-id="121095" data-permalink="https://blog.logrocket.com/fundamentals-unity-2d-colliders/attachment/no-collision/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2022/06/no-collision.gif" data-orig-size="376,402" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="Circle does not collide with square" data-image-description="" data-image-caption="" data-medium-file="https://blog.logrocket.com/wp-content/uploads/2022/06/no-collision-281x300.gif" data-large-file="https://blog.logrocket.com/wp-content/uploads/2022/06/no-collision.gif" loading="lazy" class="aligncenter size-full wp-image-121095" src="https://blog.logrocket.com/wp-content/uploads/2022/06/no-collision.gif" alt="Circle moves through square (does not collide)" width="376" height="402" /></p>
<p>Why does nothing happen? Well, we need to talk about the <code>Rigidbody2D</code> component.</p>
<h2 id="what-is-rigidbody2d">What is a Rigidbody2D component?</h2>
<p>A Rigidbody2D is a component used to tell Unity that it should put the GameObject under the control of the physics engine. In other words, GameObjects without a rigidbody do not exist for the physics engine.</p>
<p>If we just add a 2D collider to our GameObject, nothing will happen because the physics engine is not aware of it. If we want the physics engine to control our GameObject, we need to add a <code>Rigidbody2D</code> component to it.</p>
<p id="gdcalert10"><img data-attachment-id="121048" data-permalink="https://blog.logrocket.com/fundamentals-unity-2d-colliders/attachment/add-rigidbody-2d/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2022/06/add-rigidbody-2d.png" data-orig-size="454,312" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="RigidBody2D component" data-image-description="" data-image-caption="" data-medium-file="https://blog.logrocket.com/wp-content/uploads/2022/06/add-rigidbody-2d-300x206.png" data-large-file="https://blog.logrocket.com/wp-content/uploads/2022/06/add-rigidbody-2d.png" loading="lazy" class="aligncenter size-full wp-image-121048" src="https://blog.logrocket.com/wp-content/uploads/2022/06/add-rigidbody-2d.png" alt="Add rigid body 2D component" width="454" height="312" srcset="https://blog.logrocket.com/wp-content/uploads/2022/06/add-rigidbody-2d.png 454w, https://blog.logrocket.com/wp-content/uploads/2022/06/add-rigidbody-2d-300x206.png 300w" sizes="(max-width: 454px) 100vw, 454px" /></p>
<p>This means that now our GameObject is affected by gravity via the <code>Gravity Scale</code> property, and can be controlled from scripts using forces.</p>
<p>We Just need to add a <code>Rigidbody2D</code> to each of the GameObjects that we’ve already created and hit the <strong>Play</strong> button:</p>
<p id="gdcalert11"><img data-attachment-id="121078" data-permalink="https://blog.logrocket.com/fundamentals-unity-2d-colliders/attachment/gravity-acts-onobjects/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2022/06/gravity-acts-onobjects.gif" data-orig-size="376,402" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="Gravity acting on objects" data-image-description="" data-image-caption="" data-medium-file="https://blog.logrocket.com/wp-content/uploads/2022/06/gravity-acts-onobjects-281x300.gif" data-large-file="https://blog.logrocket.com/wp-content/uploads/2022/06/gravity-acts-onobjects.gif" loading="lazy" class="aligncenter size-full wp-image-121078" src="https://blog.logrocket.com/wp-content/uploads/2022/06/gravity-acts-onobjects.gif" alt="Circle and square fall drop" width="376" height="402" /></p>
<p>With the <code>Rigidbody2D</code> components added to our GameObjects, the physics engine is aware of them and has started making the gravity act.</p>
<h2 id="using-physicsmaterial2d-add-effects">Using PhysicsMaterial2D to add effects</h2>
<p>In our sample, the two GameObjects are just falling, but what if we would like to have the<code> Square GameObject</code> stay in its position and the <code>Circle GameObject</code> hit it, before bouncing like a ball?</p>
<p>An easy way to achieve this is using <code>PhysicsMaterial2D</code>.</p>
<p>Let’s add that ball effect to our sample scene. First, on the <code>Square GameObjec</code>t, change the property <code>Body Type</code> of its <code>Rigidbody2D</code> to <code>Static</code>:</p>
<p id="gdcalert12"><span style="font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen-Sans, Ubuntu, Cantarell, 'Helvetica Neue', sans-serif;"><img data-attachment-id="121054" data-permalink="https://blog.logrocket.com/fundamentals-unity-2d-colliders/attachment/change-body-type-static/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2022/06/change-body-type-static.png" data-orig-size="381,93" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="Static body type" data-image-description="" data-image-caption="" data-medium-file="https://blog.logrocket.com/wp-content/uploads/2022/06/change-body-type-static-300x73.png" data-large-file="https://blog.logrocket.com/wp-content/uploads/2022/06/change-body-type-static.png" loading="lazy" class="aligncenter size-full wp-image-121054" src="https://blog.logrocket.com/wp-content/uploads/2022/06/change-body-type-static.png" alt="Changing body type to Static" width="381" height="93" srcset="https://blog.logrocket.com/wp-content/uploads/2022/06/change-body-type-static.png 381w, https://blog.logrocket.com/wp-content/uploads/2022/06/change-body-type-static-300x73.png 300w" sizes="(max-width: 381px) 100vw, 381px" />Create a new </span><code>PhysicsMaterial2D</code><span style="font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen-Sans, Ubuntu, Cantarell, 'Helvetica Neue', sans-serif;">, name it </span><code>Ball physics material</code><span style="font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen-Sans, Ubuntu, Cantarell, 'Helvetica Neue', sans-serif;">, and place it inside our</span><code> Physics Materials</code><span style="font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen-Sans, Ubuntu, Cantarell, 'Helvetica Neue', sans-serif;"> folder:</span></p>
<p id="gdcalert13"><img data-attachment-id="121093" data-permalink="https://blog.logrocket.com/fundamentals-unity-2d-colliders/attachment/new-ball-physics-material/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2022/06/new-ball-physics-material.png" data-orig-size="730,440" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="PhysicsMaterial2D" data-image-description="" data-image-caption="" data-medium-file="https://blog.logrocket.com/wp-content/uploads/2022/06/new-ball-physics-material-300x181.png" data-large-file="https://blog.logrocket.com/wp-content/uploads/2022/06/new-ball-physics-material.png" loading="lazy" class="aligncenter size-full wp-image-121093" src="https://blog.logrocket.com/wp-content/uploads/2022/06/new-ball-physics-material.png" alt="Creating a new PhysicsMaterial2D" width="730" height="440" srcset="https://blog.logrocket.com/wp-content/uploads/2022/06/new-ball-physics-material.png 730w, https://blog.logrocket.com/wp-content/uploads/2022/06/new-ball-physics-material-300x181.png 300w" sizes="(max-width: 730px) 100vw, 730px" /></p>
<p>Change its <code>Bounciness</code> property to <code>1</code>:</p>
<p id="gdcalert14"><img data-attachment-id="121056" data-permalink="https://blog.logrocket.com/fundamentals-unity-2d-colliders/attachment/change-bounciness-property/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2022/06/change-bounciness-property.png" data-orig-size="381,121" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="Bounciness property" data-image-description="" data-image-caption="" data-medium-file="https://blog.logrocket.com/wp-content/uploads/2022/06/change-bounciness-property-300x95.png" data-large-file="https://blog.logrocket.com/wp-content/uploads/2022/06/change-bounciness-property.png" loading="lazy" class="aligncenter size-full wp-image-121056" src="https://blog.logrocket.com/wp-content/uploads/2022/06/change-bounciness-property.png" alt="Changing bounciness value to 1" width="381" height="121" srcset="https://blog.logrocket.com/wp-content/uploads/2022/06/change-bounciness-property.png 381w, https://blog.logrocket.com/wp-content/uploads/2022/06/change-bounciness-property-300x95.png 300w" sizes="(max-width: 381px) 100vw, 381px" /></p>
<p>On the<code> Circle GameObject's Rigidbody2D</code>, change the <code>Material</code> property to use the<code> Ball physics material</code> that we’ve just created:</p>
<p id="gdcalert15"><span style="font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen-Sans, Ubuntu, Cantarell, 'Helvetica Neue', sans-serif;"><img data-attachment-id="121089" data-permalink="https://blog.logrocket.com/fundamentals-unity-2d-colliders/attachment/material-property-ball-physics/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2022/06/material-property-ball-physics.png" data-orig-size="382,69" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="Material change to ball physics" data-image-description="" data-image-caption="" data-medium-file="https://blog.logrocket.com/wp-content/uploads/2022/06/material-property-ball-physics-300x54.png" data-large-file="https://blog.logrocket.com/wp-content/uploads/2022/06/material-property-ball-physics.png" loading="lazy" class="aligncenter wp-image-121089 size-full" src="https://blog.logrocket.com/wp-content/uploads/2022/06/material-property-ball-physics.png" alt="Changing circle material to ball physics material" width="382" height="69" srcset="https://blog.logrocket.com/wp-content/uploads/2022/06/material-property-ball-physics.png 382w, https://blog.logrocket.com/wp-content/uploads/2022/06/material-property-ball-physics-300x54.png 300w" sizes="(max-width: 382px) 100vw, 382px" />Hit the </span><strong style="font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen-Sans, Ubuntu, Cantarell, 'Helvetica Neue', sans-serif;">Play</strong><span style="font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen-Sans, Ubuntu, Cantarell, 'Helvetica Neue', sans-serif;"> button again. Now we should see this happen:</span></p>
<p id="gdcalert16"><img data-attachment-id="121058" data-permalink="https://blog.logrocket.com/fundamentals-unity-2d-colliders/attachment/circle-bounces-off/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2022/06/circle-bounces-off.gif" data-orig-size="342,310" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="Circle bounces off square" data-image-description="" data-image-caption="" data-medium-file="https://blog.logrocket.com/wp-content/uploads/2022/06/circle-bounces-off-300x272.gif" data-large-file="https://blog.logrocket.com/wp-content/uploads/2022/06/circle-bounces-off.gif" loading="lazy" class="aligncenter size-full wp-image-121058" src="https://blog.logrocket.com/wp-content/uploads/2022/06/circle-bounces-off.gif" alt="Circle bounces off square" width="342" height="310" /></p>
<h2 id="collision-callbacks">Collisions callbacks</h2>
<p>When one collider interacts with another collider, Unity sends some messages (e.g., call a method on any <code>MonoBehavior</code> attached to the <code>GameObject</code>). In the case of a 2D collider, there are six available messages:</p>
<ul>
<li>When <code>IsTrigger</code> is not checked:
<ul>
<li><code>OnCollisionEnter2D</code>: called in the first frame when the collision starts</li>
<li><code>OnCollisionStay2D</code>: called in each frame while the collision is happening</li>
<li><code>OnCollsionExit2D</code>: called in the first frame when the collision ends</li>
</ul>
</li>
<li>When <code>IsTrigger</code> is checked:
<ul>
<li><code>OnTriggerEnter2D</code>: called in the first frame when the collision starts</li>
<li><code>OnTriggerStay2D</code>: called in each frame while the collision is happening</li>
<li><code>OnTriggerExit2D</code>: called in the first frame when the collision ends</li>
</ul>
</li>
</ul>
<p><code>OnCollisionStay2D</code> and <code>OnTriggerStay2D</code> are called each frame until they reach Time To Sleep (if the GameObject is not moving anymore).</p>
<figure id="attachment_121099" aria-describedby="caption-attachment-121099" style="width: 355px" class="wp-caption aligncenter"><img data-attachment-id="121099" data-permalink="https://blog.logrocket.com/fundamentals-unity-2d-colliders/attachment/time-to-sleep-value/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2022/06/time-to-sleep-value.png" data-orig-size="355,111" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="Time to Sleep Value" data-image-description="" data-image-caption="&lt;p&gt;We can change this setting on Project Settings / Physics 2D&lt;/p&gt;
" data-medium-file="https://blog.logrocket.com/wp-content/uploads/2022/06/time-to-sleep-value-300x94.png" data-large-file="https://blog.logrocket.com/wp-content/uploads/2022/06/time-to-sleep-value.png" loading="lazy" class="size-full wp-image-121099" src="https://blog.logrocket.com/wp-content/uploads/2022/06/time-to-sleep-value.png" alt="Time to Sleep value is 0.5" width="355" height="111" srcset="https://blog.logrocket.com/wp-content/uploads/2022/06/time-to-sleep-value.png 355w, https://blog.logrocket.com/wp-content/uploads/2022/06/time-to-sleep-value-300x94.png 300w" sizes="(max-width: 355px) 100vw, 355px" /><figcaption id="caption-attachment-121099" class="wp-caption-text">We can change this setting on Project Settings / Physics 2D</figcaption></figure>
<h2 id="using-collision-callbacks-scripts">Using collision callbacks on scripts</h2>
<p>It’s time to write some code. Let’s create a script to log every time that our <code>Circle GameObject</code> hits the <code>Square GameObject</code> (<code>OnCollisionEnter2D</code>) to the console window. We’ll record how many frames they stay in contact (<code>OnCollisionStay2D</code>), and when they stop hitting each other (<code>OnCollsionExit2D</code>). We’ll also show what happens with and without a trigger.</p>
<h3 id="without-trigger">Without a trigger</h3>
<p>Inside our <code>Scripts</code> folder, create a script called <code>CollisionLogger</code> and add it to the <code>Circle GameObject</code>:</p>
<p id="gdcalert18"><img data-attachment-id="121064" data-permalink="https://blog.logrocket.com/fundamentals-unity-2d-colliders/attachment/collision-logger-circle/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2022/06/collision-logger-circle.png" data-orig-size="442,348" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="Collision logger circle" data-image-description="" data-image-caption="" data-medium-file="https://blog.logrocket.com/wp-content/uploads/2022/06/collision-logger-circle-300x236.png" data-large-file="https://blog.logrocket.com/wp-content/uploads/2022/06/collision-logger-circle.png" loading="lazy" class="aligncenter size-full wp-image-121064" src="https://blog.logrocket.com/wp-content/uploads/2022/06/collision-logger-circle.png" alt="Adding CollisionLogger script to Circle" width="442" height="348" srcset="https://blog.logrocket.com/wp-content/uploads/2022/06/collision-logger-circle.png 442w, https://blog.logrocket.com/wp-content/uploads/2022/06/collision-logger-circle-300x236.png 300w" sizes="(max-width: 442px) 100vw, 442px" /></p>
<p>Open the <code>CollisionLogger</code> script in VS Code and type these methods in it:</p>
<pre class="language-css hljs">using System.Runtime.CompilerServices;
using UnityEngine;

public class CollisionLogger : MonoBehaviour
{
    void OnCollisionEnter2D(Collision2D collision) =&gt; Log(collision);
    void OnCollisionStay2D(Collision2D collision) =&gt; Log(collision);
    void OnCollisionExit2D(Collision2D collision) =&gt; Log(collision);

    void Log(Collision2D collision, [CallerMemberName] string message = null)
    {
        Debug.Log($"{message} called on {name} because a collision with {collision.collider.name}");
    }
}</pre>
<p>Hit the <strong>Play</strong> button, and we should see something like this in the Console window:</p>
<p id="gdcalert19"><img data-attachment-id="121068" data-permalink="https://blog.logrocket.com/fundamentals-unity-2d-colliders/attachment/console-window-collison1/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2022/06/console-window-collison1.png" data-orig-size="488,197" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="Console window" data-image-description="" data-image-caption="" data-medium-file="https://blog.logrocket.com/wp-content/uploads/2022/06/console-window-collison1-300x121.png" data-large-file="https://blog.logrocket.com/wp-content/uploads/2022/06/console-window-collison1.png" loading="lazy" class="aligncenter size-full wp-image-121068" src="https://blog.logrocket.com/wp-content/uploads/2022/06/console-window-collison1.png" alt="Console window" width="488" height="197" srcset="https://blog.logrocket.com/wp-content/uploads/2022/06/console-window-collison1.png 488w, https://blog.logrocket.com/wp-content/uploads/2022/06/console-window-collison1-300x121.png 300w" sizes="(max-width: 488px) 100vw, 488px" /></p>
<p>As we can see, <code>OnCollisionEnter2D</code> is called when the <code>Circle GameObject</code> hits the <code>Square GameObject</code>. <code>OnCollsionExit2D</code> is called when they aren’t hitting each other anymore, and <code>OnCollisionStay2D</code> has not been called because the two GameObjects are not keeping contact. To see <code>OnCollisionStay2D</code> being sent, just remove the <code>Ball physics material </code>from the <code>Circle GameObject's Rigidbody2D</code>:</p>
<p id="gdcalert20"><img data-attachment-id="121097" data-permalink="https://blog.logrocket.com/fundamentals-unity-2d-colliders/attachment/remove-ball-physics/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2022/06/remove-ball-physics.png" data-orig-size="451,80" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="Remove ball physics material" data-image-description="" data-image-caption="" data-medium-file="https://blog.logrocket.com/wp-content/uploads/2022/06/remove-ball-physics-300x53.png" data-large-file="https://blog.logrocket.com/wp-content/uploads/2022/06/remove-ball-physics.png" loading="lazy" class="aligncenter size-full wp-image-121097" src="https://blog.logrocket.com/wp-content/uploads/2022/06/remove-ball-physics.png" alt="Change Circle's material to none" width="451" height="80" srcset="https://blog.logrocket.com/wp-content/uploads/2022/06/remove-ball-physics.png 451w, https://blog.logrocket.com/wp-content/uploads/2022/06/remove-ball-physics-300x53.png 300w" sizes="(max-width: 451px) 100vw, 451px" /></p>
<p>Hit the <strong>Play</strong> button again and the output in our Console window should be:</p>
<p id="gdcalert21"><img data-attachment-id="121070" data-permalink="https://blog.logrocket.com/fundamentals-unity-2d-colliders/attachment/console-window2/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2022/06/console-window2.png" data-orig-size="483,198" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="Console window" data-image-description="" data-image-caption="" data-medium-file="https://blog.logrocket.com/wp-content/uploads/2022/06/console-window2-300x123.png" data-large-file="https://blog.logrocket.com/wp-content/uploads/2022/06/console-window2.png" loading="lazy" class="aligncenter size-full wp-image-121070" src="https://blog.logrocket.com/wp-content/uploads/2022/06/console-window2.png" alt="Console window" width="483" height="198" srcset="https://blog.logrocket.com/wp-content/uploads/2022/06/console-window2.png 483w, https://blog.logrocket.com/wp-content/uploads/2022/06/console-window2-300x123.png 300w" sizes="(max-width: 483px) 100vw, 483px" /></p>
<p>Now we have one <code>OnCollisionEnter2D</code> and a lot of <code>OnCollisionStay2D</code>s that will be called until the two GameObjects keep the contact or until Time To Sleep is reached.</p>
<p>Now, re-enable the <code>Ball physics material</code> on the<code> Circle GameObject's Rigidbody2D</code> and add the <code>CollisionLogger</code> to the <code>Square GameObjects</code> too.</p>
<p>Hit <strong>Play</strong>, and the Console window should look like this:</p>
<p id="gdcalert22"><img data-attachment-id="121072" data-permalink="https://blog.logrocket.com/fundamentals-unity-2d-colliders/attachment/console-window3/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2022/06/console-window3.png" data-orig-size="478,196" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="Console window" data-image-description="" data-image-caption="" data-medium-file="https://blog.logrocket.com/wp-content/uploads/2022/06/console-window3-300x123.png" data-large-file="https://blog.logrocket.com/wp-content/uploads/2022/06/console-window3.png" loading="lazy" class="aligncenter size-full wp-image-121072" src="https://blog.logrocket.com/wp-content/uploads/2022/06/console-window3.png" alt="Console window" width="478" height="196" srcset="https://blog.logrocket.com/wp-content/uploads/2022/06/console-window3.png 478w, https://blog.logrocket.com/wp-content/uploads/2022/06/console-window3-300x123.png 300w" sizes="(max-width: 478px) 100vw, 478px" /></p>
<p>As expected, the messages are called in all GameObjects involved in the collision.</p>
<h3 id="with-trigger">With a trigger</h3>
<p>What about the <code>OnTrigger</code> method? Right now, none of our colliders are marked as a trigger (<code>IsTrigger</code>), which is why only <code>OnCollision</code> has been called.</p>
<p>Triggers are useful when we need to detect that a given GameObject has reached a point or another GameObject. Let&#8217;s say we want to be notified on <code>Square GameObject</code> every time that the <code>Circle GameObjec</code>t passes through it. We can add a collider with <code>IsTrigger</code> checked on it and we will receive the notification when the physics engine calls the <code>OnTriggerEnter2D</code> method.</p>
<p>To see a trigger in action, mark the <code>Square GameObject's collider</code> as a trigger:</p>
<p id="gdcalert23"><img data-attachment-id="121062" data-permalink="https://blog.logrocket.com/fundamentals-unity-2d-colliders/attachment/collider-is-trigger/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2022/06/collider-is-trigger.png" data-orig-size="451,98" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="Square collider is trigger" data-image-description="" data-image-caption="" data-medium-file="https://blog.logrocket.com/wp-content/uploads/2022/06/collider-is-trigger-300x65.png" data-large-file="https://blog.logrocket.com/wp-content/uploads/2022/06/collider-is-trigger.png" loading="lazy" class="aligncenter size-full wp-image-121062" src="https://blog.logrocket.com/wp-content/uploads/2022/06/collider-is-trigger.png" alt="Marking &quot;Is Trigger&quot; Checkbox" width="451" height="98" srcset="https://blog.logrocket.com/wp-content/uploads/2022/06/collider-is-trigger.png 451w, https://blog.logrocket.com/wp-content/uploads/2022/06/collider-is-trigger-300x65.png 300w" sizes="(max-width: 451px) 100vw, 451px" /></p>
<p>Play the scene, and we’ll see that <code>Circle GameObject</code> is passing through the <code>Square GameObject</code>:</p>
<p id="gdcalert24"><span style="font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen-Sans, Ubuntu, Cantarell, 'Helvetica Neue', sans-serif;"><img data-attachment-id="121060" data-permalink="https://blog.logrocket.com/fundamentals-unity-2d-colliders/attachment/circle-passes-through/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2022/06/circle-passes-through.gif" data-orig-size="342,310" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="Circle passing through square" data-image-description="" data-image-caption="" data-medium-file="https://blog.logrocket.com/wp-content/uploads/2022/06/circle-passes-through-300x272.gif" data-large-file="https://blog.logrocket.com/wp-content/uploads/2022/06/circle-passes-through.gif" loading="lazy" class="aligncenter size-full wp-image-121060" src="https://blog.logrocket.com/wp-content/uploads/2022/06/circle-passes-through.gif" alt="Circle passes through square" width="342" height="310" />This happens because the </span><code>Square GameObject</code><span style="font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen-Sans, Ubuntu, Cantarell, 'Helvetica Neue', sans-serif;"> is a trigger now. The physics engine won&#8217;t generate the expected behavior when two objects collide, but will instead send the </span><code>OnTrigger</code><span style="font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen-Sans, Ubuntu, Cantarell, 'Helvetica Neue', sans-serif;"> methods to the involved GameObjects.</span></p>
<p>If we look at the Console window, you’ll notice that it is empty because no <code>OnCollision</code> methods are called. To log the <code>OnTrigger</code> methods, open our <code>CollisionLogger</code> script and add these new methods:</p>
<pre class="language-css hljs">void OnTriggerEnter2D(Collider2D collision) =&gt; Log(collision);
void OnTriggerStay2D(Collider2D collision) =&gt; Log(collision);
void OnTriggerExit2D(Collider2D collision) =&gt; Log(collision);

void Log(Collider2D collision, [CallerMemberName] string message = null)
{
    Debug.Log($"{message} called on {name} because a collision with {collision.gameObject.name}");
}

</pre>
<p>Run the scene and we can see this log in the Console window:</p>
<p id="gdcalert25"><img data-attachment-id="121074" data-permalink="https://blog.logrocket.com/fundamentals-unity-2d-colliders/attachment/console-window4/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2022/06/console-window4.png" data-orig-size="475,196" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="Console window" data-image-description="" data-image-caption="" data-medium-file="https://blog.logrocket.com/wp-content/uploads/2022/06/console-window4-300x124.png" data-large-file="https://blog.logrocket.com/wp-content/uploads/2022/06/console-window4.png" loading="lazy" class="aligncenter size-full wp-image-121074" src="https://blog.logrocket.com/wp-content/uploads/2022/06/console-window4.png" alt="Console window log" width="475" height="196" srcset="https://blog.logrocket.com/wp-content/uploads/2022/06/console-window4.png 475w, https://blog.logrocket.com/wp-content/uploads/2022/06/console-window4-300x124.png 300w" sizes="(max-width: 475px) 100vw, 475px" /></p>
<p id="gdcalert26"><img data-attachment-id="121121" data-permalink="https://blog.logrocket.com/fundamentals-unity-2d-colliders/attachment/console-window5/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2022/06/console-window5.png" data-orig-size="474,77" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="Console window" data-image-description="" data-image-caption="" data-medium-file="https://blog.logrocket.com/wp-content/uploads/2022/06/console-window5-300x49.png" data-large-file="https://blog.logrocket.com/wp-content/uploads/2022/06/console-window5.png" loading="lazy" class="aligncenter size-full wp-image-121121" src="https://blog.logrocket.com/wp-content/uploads/2022/06/console-window5.png" alt="Console window showing onTrigger methods" width="474" height="77" srcset="https://blog.logrocket.com/wp-content/uploads/2022/06/console-window5.png 474w, https://blog.logrocket.com/wp-content/uploads/2022/06/console-window5-300x49.png 300w" sizes="(max-width: 474px) 100vw, 474px" /></p>
<p>Now only <code>OnTrigger</code> methods are called because there is a trigger involved in the collision.</p>
<p>An important thing to note is that all <code>OnCollision</code> and <code>OnTrigger</code> methods receive the parameter <code>Collision2D/Collider2D</code>. This parameter can hold information about the collision itself, such as:</p>
<ul>
<li>Which other GameObject collides with the current GameObject</li>
<li>Which contact points are involved in the collision</li>
<li>The relative linear velocity of the two colliding objects</li>
</ul>
<p>If we don’t need to use this information in our script, we can declare the <code>OnCollision</code>/<code>OnTrigger</code> methods without the logging parameter.</p>
<h2 id="collider-interactions">Collider interactions</h2>
<p>You probably noticed in the last section that there is parity between the <code>OnCollision</code> and <code>OnTrigger</code> methods the physics engine calls on the GameObjects involved in the collision. Knowing when each kind of interaction raises each kind of message/method in the involved GameObjects can be a little tricky; despite this apparent similarity, there are some rules for interaction possibilities between different collider setups.</p>
<p>There are six different setups a collider can have that will differently affect how it interacts with other colliders. These setups can be done by a combination of the properties <code>IsTrigger</code> of the <code>Collider2D</code> and the property <code>Body Type </code>of the <code>Rigidbody2D</code> attached to the same GameObject. Below is a list of similar setups:</p>
<ul>
<li>Static Collider
<ul style="margin-bottom: 0px; padding-bottom: 0px;">
<li>IsTrigger: <code>false</code></li>
<li>Body Type: Static</li>
</ul>
</li>
<li>Rigidbody Collider
<ul style="margin-bottom: 0px; padding-bottom: 0px;">
<li>IsTrigger: <code>false</code></li>
<li>Body Type: Dynamic</li>
</ul>
</li>
<li>Kinematic Rigidbody Collider
<ul style="margin-bottom: 0px; padding-bottom: 0px;">
<li>IsTrigger: <code>false</code></li>
<li>Body Type: Kinematic</li>
</ul>
</li>
<li>Static Trigger Collider
<ul style="margin-bottom: 0px; padding-bottom: 0px;">
<li>IsTrigger: <code>true</code></li>
<li>Body Type: Static</li>
</ul>
</li>
<li>Rigidbody Trigger Collider
<ul style="margin-bottom: 0px; padding-bottom: 0px;">
<li>IsTrigger: <code>true</code></li>
<li>Body Type: Dynamic</li>
</ul>
</li>
<li>Kinematic Rigidbody Trigger Collider
<ul style="margin-bottom: 0px; padding-bottom: 0px;">
<li>IsTrigger: <code>true</code></li>
<li>Body Type: Kinematic</li>
</ul>
</li>
</ul>
<h3 id="how-do-setups-affect-collider-interactions">How do these setups affect collider interactions?</h3>
<p>The answer to this question is in the table below, which I took from the <a href="https://docs.unity3d.com/Manual/CollidersOverview.html" target="_blank" rel="noopener">Unity documentation site</a>. It shows us where we can see when collisions happen and when the collision callbacks (the <code>OnCollision</code> and <code>OnTrigger</code> methods) are called.</p>
<p id="gdcalert27"><span style="font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen-Sans, Ubuntu, Cantarell, 'Helvetica Neue', sans-serif;"><img data-attachment-id="121103" data-permalink="https://blog.logrocket.com/fundamentals-unity-2d-colliders/attachment/unity-documentation-site-2/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2022/06/unity-documentation-site-1.png" data-orig-size="730,269" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="Unity documentation table" data-image-description="" data-image-caption="" data-medium-file="https://blog.logrocket.com/wp-content/uploads/2022/06/unity-documentation-site-1-300x111.png" data-large-file="https://blog.logrocket.com/wp-content/uploads/2022/06/unity-documentation-site-1.png" loading="lazy" class="aligncenter size-full wp-image-121103" src="https://blog.logrocket.com/wp-content/uploads/2022/06/unity-documentation-site-1.png" alt="Unity documentation table showing when collision and collision callback methods are called" width="730" height="269" srcset="https://blog.logrocket.com/wp-content/uploads/2022/06/unity-documentation-site-1.png 730w, https://blog.logrocket.com/wp-content/uploads/2022/06/unity-documentation-site-1-300x111.png 300w" sizes="(max-width: 730px) 100vw, 730px" />Source: </span><a style="font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen-Sans, Ubuntu, Cantarell, 'Helvetica Neue', sans-serif;" href="https://docs.unity3d.com/Manual/CollidersOverview.html" target="_blank" rel="noopener">Unity docs</a></p>
<p>Looking at the table, we can figure out things like:</p>
<ul>
<li>A Static collider only interacts with a Rigidbody collider</li>
<li>A Rigidbody collider can interact with a Static collider, Rigidbody Collider, and Kinematic Rigidbody Collider</li>
</ul>
<p>These tables can be very useful during game development, when we get stuck with some sort of collider interaction that we expected to happen but doesn&#8217;t.</p>
<p>To help us to better understand the colliders&#8217; interactions, now and when we face the kind of problem mentioned above, I created a sample where we can move the GameObjects through each of the six possible interaction setups, see how they interact with each other, and what callbacks messages are sent.</p>
<p id="gdcalert28"><img data-attachment-id="121146" data-permalink="https://blog.logrocket.com/fundamentals-unity-2d-colliders/attachment/sample-game-interactions/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2022/06/sample-game-interactions.gif" data-orig-size="700,459" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="Sample game" data-image-description="" data-image-caption="" data-medium-file="https://blog.logrocket.com/wp-content/uploads/2022/06/sample-game-interactions-300x197.gif" data-large-file="https://blog.logrocket.com/wp-content/uploads/2022/06/sample-game-interactions.gif" loading="lazy" class="aligncenter size-full wp-image-121146" src="https://blog.logrocket.com/wp-content/uploads/2022/06/sample-game-interactions.gif" alt="Sample game depicting game object interactions" width="700" height="459" /></p>
<p>Try the online sample <a href="https://diegogiacomelli.com.br/apps/collider-interactions" target="_blank" rel="noopener">here</a> and move each collider setup to better understand what messages are sent for each interaction.</p>
<h2 id="physics2d-settings">Physics2D settings</h2>
<p>For the last part of this tutorial, I would like to mention the Physics2D settings.</p>
<p>These settings are not within the scope of this tutorial — talking about some of them could fill another whole tutorial — but I think it’s important to know that they exist, what their default values are, and that we can adjust them to the needs of our project.</p>
<p>You can access these settings via Project Settings &gt; Physics 2D.</p>
<p id="gdcalert29"><img data-attachment-id="121127" data-permalink="https://blog.logrocket.com/fundamentals-unity-2d-colliders/attachment/physics-2d/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2022/06/physics-2d.png" data-orig-size="756,938" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="Physics 2D Settings" data-image-description="" data-image-caption="" data-medium-file="https://blog.logrocket.com/wp-content/uploads/2022/06/physics-2d-242x300.png" data-large-file="https://blog.logrocket.com/wp-content/uploads/2022/06/physics-2d.png" loading="lazy" class="aligncenter wp-image-121127" src="https://blog.logrocket.com/wp-content/uploads/2022/06/physics-2d.png" alt="Physics 2D Settings page" width="484" height="600" srcset="https://blog.logrocket.com/wp-content/uploads/2022/06/physics-2d.png 756w, https://blog.logrocket.com/wp-content/uploads/2022/06/physics-2d-242x300.png 242w" sizes="(max-width: 484px) 100vw, 484px" /></p>
<p>Settings like <code>Gravity</code> are pretty straightforward, but things like <code>Velocity Iterations</code> and <code>Position Iterations</code> can be a little obscure and can affect game behaviors a lot.</p>
<p>Most of these settings are changed when we need to achieve some kind of non-conventional physics behavior or performance improvement, but you should be aware that you’ll need to retest gameplay after each change you make to these settings to ensure that you haven’t broken anything.</p>
<p>The bottom line is: make sure to only change these settings after studying and understanding their impact.</p>
<h2 id="source-code-samples">Source code and samples</h2>
<ul>
<li><a href="https://github.com/giacomelli/the-fundamentals-of-unity-2d-collider-tutorial" target="_blank" rel="noopener">Tutorial source code</a></li>
<li><a href="https://diegogiacomelli.com.br/apps/collider-interactions" target="_blank" rel="noopener">Online Collision Interactions sample</a></li>
</ul>
<h2>Conclusion</h2>
<p>In this tutorial, we’ve explained the fundamentals of Unity 2D Colliders: what they are, what their common properties and behaviors are, how to add a <code>BoxCollider2D</code> and <code>CircleCollider2D</code> to a GameObject, what a <code>Rigidbody2D</code> is and how to use <code>PhysicsMaterial2D</code>, what the collision callbacks are and how to use them on our scripts, and, finally, the kinds of collider setups and how they interact.</p>
<p>The post <a rel="nofollow" href="https://blog.logrocket.com/fundamentals-unity-2d-colliders/">The fundamentals of Unity 2D colliders</a> appeared first on <a rel="nofollow" href="https://blog.logrocket.com">LogRocket Blog</a>.</p>
]]>
      </content:encoded>

      <wfw:commentRss>https://blog.logrocket.com/fundamentals-unity-2d-colliders/feed/</wfw:commentRss>
      <slash:comments>0</slash:comments>


      <post-id xmlns="com-wordpress:feed-additions:1">120762</post-id>
    </item>
    <item>
      <title>What is a product launch plan and how to create one</title>
      <link>https://blog.logrocket.com/product-management/what-is-a-product-launch-plan-how-to-create/</link>
      <comments>https://blog.logrocket.com/product-management/what-is-a-product-launch-plan-how-to-create/#respond</comments>

      <dc:creator>
        <![CDATA[Paul van den Broek]]>
      </dc:creator>
      <pubDate>Thu, 30 Jun 2022 13:00:15 +0000</pubDate>
      <category>
        <![CDATA[Product Management]]>
      </category>
      <category>
        <![CDATA[product-management]]>
      </category>
      <guid isPermaLink="false">https://blog.logrocket.com/?p=122073</guid>

      <description>
        <![CDATA[<p>When launching a new product, it's the product manager's job to create a launch plan that aligns stakeholders around KPIs, promotional messaging, and more.</p>
<p>The post <a rel="nofollow" href="https://blog.logrocket.com/product-management/what-is-a-product-launch-plan-how-to-create/">What is a product launch plan and how to create one</a> appeared first on <a rel="nofollow" href="https://blog.logrocket.com">LogRocket Blog</a>.</p>
]]>
      </description>
      <content:encoded>
        <![CDATA[<p>Building a new product — let alone a successful one — is an exciting but challenging process. As a product manager, it’s your job to determine what products to build that deliver a valuable experience for your customers.</p>
<p>But your responsibility goes beyond the decision-making and building process. When you’re about to deliver a new product to the market, you need to coordinate the moving pieces surrounding the launch, including setting goals for development and promoting your product post-launch. A product launch plan helps you organize all the activities around this process.</p>
<p>In this guide, we&#8217;ll show you how to write a product launch plan step by step. We&#8217;ll follow a simple framework to help you align stakeholders when developing and planning to release new products.</p>
<p>You can reference this <a href="https://blog.logrocket.com/wp-content/uploads/2022/06/product-launch-plan-template.png" target="_blank" rel="noopener">template</a> when building a product launch plan of your own.</p>
<hr />
<h2>Table of contents</h2>
<ul>
<li><a href="#what-is-a-product-launch-plan">What is a product launch plan?</a></li>
<li><a href="#who-is-involved-in-launching-a-new-product">Who is involved in launching a new product?</a></li>
<li><a href="#how-to-create-a-product-launch-plan">How to create a product launch plan (template)</a></li>
<li><a href="#setting-goals-for-a-new-product">Setting goals for a new product</a></li>
<li><a href="#how-to-launch-and-promote-your-product">How to launch and promote your product</a></li>
</ul>
<hr />
<h2 id="what-is-a-product-launch-plan">What is a product launch plan?</h2>
<p>Working in product means spending a lot of time researching your market, competitors, and (prospective) customers to determine how you can deliver a valuable product. After setting priorities and <a href="https://www.mindtheproduct.com/how-to-get-the-most-value-out-of-your-product-roadmap/" target="_blank" rel="noopener">determining your roadmap</a>, an exciting process of <a href="https://weekdayhq.medium.com/prototyping-for-product-managers-ef5bc57cead7" target="_blank" rel="noopener">prototyping, testing, iterating, and building</a> takes place. You, as product manager, should take the ownership in guiding this process towards the desired outcome.</p>
<p>Aside from the process of building the actual product and making sure <a href="https://blog.logrocket.com/product-management/how-to-write-product-requirements-documents-prds/" target="_blank" rel="noopener">product requirements</a> are met, there’s another essential part that you need to manage: the product launch.</p>
<p>A product launch involves a variety of factors that need to be aligned and activities that need to be managed to make your product a commercial success. This is where the product launch plan comes in.</p>
<p>The core of a product launch plan describes the commercial goals and the actual product as well as the promotion and communication surrounding your product. Usually, the detailed activities that need to happen are plotted on a timeline to manage the product launch over time and keep all stakeholders involved up to date.</p>
<h2 id="who-is-involved-in-launching-a-new-product">Who is involved in launching a new product?</h2>
<p>As an owner of the product launch, the product manager is responsible for creating the product launch plan, but you’re far from the only person involved in the associated activities. Depending on your organization and how teams and roles are set up, this process is usually owned by a <a href="https://blog.logrocket.com/product-management/what-does-a-product-manager-do-role-responsibilities/">product manager</a> or product marketing manager.</p>
<p>When creating a product launch plan, you should involve and align with people from, at bare minimum, customer success, sales, support, marketing, and engineering. At the end of the day, creating a product launch plan should always be a collaboration because launching your product is at the intersection of product and marketing.</p>
<h2 id="how-to-create-a-product-launch-plan">How to create a product launch plan (template)</h2>
<p>To make your product launch a success, start with the core elements of your plan.</p>
<figure id="attachment_122201" aria-describedby="caption-attachment-122201" style="width: 375px" class="wp-caption alignright"><img data-attachment-id="122201" data-permalink="https://blog.logrocket.com/product-management/what-is-a-product-launch-plan-how-to-create/attachment/product-launch-plan-template-sm/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2022/06/product-launch-plan-template-sm.png" data-orig-size="375,720" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="Product launch plan template" data-image-description="" data-image-caption="" data-medium-file="https://blog.logrocket.com/wp-content/uploads/2022/06/product-launch-plan-template-sm-156x300.png" data-large-file="https://blog.logrocket.com/wp-content/uploads/2022/06/product-launch-plan-template-sm.png" loading="lazy" class="wp-image-122201 size-full" src="https://blog.logrocket.com/wp-content/uploads/2022/06/product-launch-plan-template-sm.png" alt="Product Launch Plan Template" width="375" height="720" srcset="https://blog.logrocket.com/wp-content/uploads/2022/06/product-launch-plan-template-sm.png 375w, https://blog.logrocket.com/wp-content/uploads/2022/06/product-launch-plan-template-sm-156x300.png 156w" sizes="(max-width: 375px) 100vw, 375px" /><figcaption id="caption-attachment-122201" class="wp-caption-text">Product launch plan template (<a href="https://blog.logrocket.com/wp-content/uploads/2022/06/product-launch-plan-template.png" target="_blank" rel="noopener">view full size</a>)</figcaption></figure>
<p>There’s a simple framework to capture the core elements of a product launch. This template is derived from and uses elements of Roman Pichler’s <a href="https://www.romanpichler.com/tools/product-vision-board/" target="_blank" rel="noopener">Product Vision Board</a> Alexander Osterwalder’s <a href="https://www.strategyzer.com/canvas/value-proposition-canvas" target="_blank" rel="noopener">Value Proposition Canvas</a>.</p>
<p>The product launch plan framework consists of two pillars — product and goals and promotion and communication — which are each broken down into four categories.</p>
<p>Let’s examine what each of these elements represents in the context of the overall product launch plan.</p>
<h3>Product and goals</h3>
<h4>Target audience</h4>
<p>Who is your product designed for? What types of customers/users are you aiming to acquire with your product?</p>
<p>Be as specific as possible. The more granular, the better you&#8217;ll be able to understand, target, and reach your audience.</p>
<h4>Problem solver</h4>
<p>What problem does your product or feature aim to solve for your target audience? What specific pain points is it designed to address?</p>
<h4>Product and USP</h4>
<p>What is your product offering and what makes it unique in the market? You could differentiate based on the functionalities of your product, but this could also focus on the service you offer or a competitive pricing model.</p>
<h4>Goals and KPIs</h4>
<p>What are your commercial goals? Are you launching a product in a new market segment? Are you aiming for a percentage of market share?</p>
<p>Define what success looks like for your product. Set milestones to track your success and forecast in usage — for example, how many users should we have after six, 12, and 24 months post-launch?</p>
<h3>Promotion and communication</h3>
<h4>Value proposition</h4>
<p>What value are your customers getting from using your product? Remember, customers don’t necessarily want to use your product; they want to get the <a href="https://www.intercom.com/blog/podcasts/useronboards-samuel-hulick-on-designing-paths-not-products/" target="_blank" rel="noopener">outcome your product offers</a>.</p>
<h4>Pricing</h4>
<p>Determine the pricing model of your product. Are you creating a new product, or is it an add-on to an already existing product or service?</p>
<p>Also, be clear about your <a href="https://baremetrics.com/blog/saas-pricing-models" target="_blank" rel="noopener">pricing plans</a> and the different options you want to offer — for example, flat rate, based on users, usage, etc.</p>
<h4>Branding and marketing</h4>
<p>Describe how you’re going to market and brand your product.</p>
<p>The best way is to describe your key promotional message. Are you creating a specific brand awareness or lead campaign? And how do you position your product in the market? Are you promoting a new (and innovative) product, a renewed product, or an alternative for an already-existing product?</p>
<h4>Sales and post-sales</h4>
<p>How are you going to acquire new customers? Are there human sales reps involved or will your product be sold via a completely online and <a href="https://frontegg.com/blog/the-8-pillars-of-self-service-in-saas-applications" target="_blank" rel="noopener">self-service process</a>?</p>
<p>Describe your sales process and how your customers are onboarded after completing their purchase</p>
<h2 id="setting-goals-for-a-new-product">Setting goals for a new product</h2>
<p>When building a new product, as with any project, you should set some goals at the outset. Remember, you’re not just building a new product, you’re solving a specific user problem and adding value for your end users. That’s the customer value side of your product.</p>
<p>You also have your own business value to consider. What’s in it for your company? If you’re building your first product, it will most likely be to find <a href="https://www.mindtheproduct.com/the-playbook-for-achieving-product-market-fit/" target="_blank" rel="noopener">product-market fit</a>. If you already have a product and a steady customer base, you’re typically aiming to enter a new market segment, grow in customers, and/or grow in revenue.</p>
<p>Setting your goals is a vital element of your product launch because it determines when your product is successful. It’s also critical to define your business goals and corresponding KPIs to track progress after the new product is launched.</p>
<p>Take all relevant <a href="https://heap.io/topics/product-metrics-kpis" target="_blank" rel="noopener">product metrics</a> into account, such as customer acquisition costs (CAC), monthly recurring revenue (MRR), and average revenue per account (ARPA). Talk with sales, marketing, and finance to determine what numbers to work with in your forecast. As product manager, orchestrate the various factors involved and align the commercial goals to achieve commercial success.</p>
<p>While the commercial goals are necessary to set and track, it’s also important to look specifically at your product and its usage — i.e., <a href="https://www.pendo.io/what-is-product-engagement/" target="_blank" rel="noopener">product engagement</a>. How do you expect your specific features to be used? What common activities will people undertake when using your new product?</p>
<p>Measure product usage and set KPIs to see if users interact with your product to reach the desired outcomes. In doing so, you define and discover your <a href="https://productled.com/blog/how-to-identify-your-products-aha-moment/" target="_blank" rel="noopener">aha moment</a> — the moment when your users are engaged with your product so they understand its value and return to experience this value and outcome repeatedly.</p>
<p>Determine the most important events or features that keep users engaged by tracking user events and flows. Determine drop-off points, bounce rates, and the sweet spot of your product’s most-used features. If you’re able to discover specific patterns, you can optimize your product and increase your conversions and customer retention over time.</p>
<h2 id="how-to-launch-and-promote-your-product">How to launch and promote your product</h2>
<p>When you launch a new product in the market, you ideally want to reach out to all potential users who fit your target audience. But how do you reach them? Moreover, how do you convince them to purchase and use your product?</p>
<h3 id="craft-your-promotional-messaging">Crafting your promotional messaging</h3>
<p>In your product launch plan, write down the high-level approach and strategy you plan to follow when promoting the value you offer. This is the basis for your <a href="https://medium.com/agileinsider/go-to-market-gtm-as-a-pm-7fc1df7db993" target="_blank" rel="noopener">go-to-market strategy</a> and a requisite for achieving your commercial goals.</p>
<p>The promotional message should derive from your value proposition. The value that your users will get from your product should be the fundament of your promotional message.</p>
<p>While it doesn’t necessarily have to be the same copy word-for-word, your promotional message should be recognizable and obvious to your target audience. It’s up to the marketers to get creative and come up with an enticing campaign to reach potential customers, make them aware of your product, and convince them to buy it.</p>
<p>Different types of content will help guide your target audience through the <a href="https://neilpatel.com/blog/how-marketing-funnels-work/" target="_blank" rel="noopener">marketing funnel</a>. A common method of coming up with your promotional messaging is called <a href="https://blog.logrocket.com/product-management/6-product-management-frameworks-you-should-know/#working-backward" target="_blank" rel="noopener">working backward</a>. The idea is that you write a hypothetical press release before you even start to build your product. Clarifying how you want the market to see and adapt your product from the outset helps ensure you fulfill that promise when actually building it.</p>
<h3 id="work-with-sales-to-acquire-customers">Working with sales to acquire customers</h3>
<p>Once you reach your target audience, the next objective is to acquire customers. This is where sales comes in. Depending on your organization and product, this will usually involve sales reps. It’s your job to give them the tools and information they need to demonstrate the product’s value to interested individuals and convince them to buy your product — this is what we call <a href="https://reply.io/sales-techniques-for-saas" target="_blank" rel="noopener">closing the deal</a>.</p>
<p>Aside from the <a href="https://blog.hubspot.com/sales/sales-playbook" target="_blank" rel="noopener">sales playbook</a> and the promotional message of your product, you, as the product manager, are responsible for communicating the product launch plan with your sales reps to inform them and share the expectations of your product launch. They need to know how to leverage the value of your product in acquiring new customers.</p>
<p>You need to take a similar approach with everybody involved in the post-sales phase. This usually includes your customer success and support teams, which manage the onboarding of new customers and customer service. These teams need to be informed of and familiar with the process of onboarding and supporting new customers for your product to be successful.</p>
<p>Your sales, customer success, and customer support teams need to know what and how to sell and explain your product and what pricing plans to use when acquiring or possibly upselling customers. It’s your job to determine how you plan to monetize your product and what pricing plans your teams can use. Decide what factors will influence your pricing and how your product plan builds up.</p>
<h2 id="final-thoughts">Final thoughts</h2>
<p>Product managers are responsible for organizing a smooth product launch and managing the internal process with stakeholders. Create a product launch plan and connect and collaborate with your peers from all departments involved to make sure everybody is on the same page, has the same expectations, and knows their role in achieving success and reaching your product goals.</p>
<p>The post <a rel="nofollow" href="https://blog.logrocket.com/product-management/what-is-a-product-launch-plan-how-to-create/">What is a product launch plan and how to create one</a> appeared first on <a rel="nofollow" href="https://blog.logrocket.com">LogRocket Blog</a>.</p>
]]>
      </content:encoded>

      <wfw:commentRss>https://blog.logrocket.com/product-management/what-is-a-product-launch-plan-how-to-create/feed/</wfw:commentRss>
      <slash:comments>0</slash:comments>


      <post-id xmlns="com-wordpress:feed-additions:1">122073</post-id>
    </item>
    <item>
      <title>Using CSS subgrids with container queries</title>
      <link>https://blog.logrocket.com/using-css-subgrids-container-queries/</link>
      <comments>https://blog.logrocket.com/using-css-subgrids-container-queries/#respond</comments>

      <dc:creator>
        <![CDATA[Solomon Esenyi]]>
      </dc:creator>
      <pubDate>Wed, 29 Jun 2022 16:00:54 +0000</pubDate>
      <category>
        <![CDATA[Uncategorized]]>
      </category>
      <category>
        <![CDATA[css]]>
      </category>
      <guid isPermaLink="false">https://blog.logrocket.com/?p=121952</guid>

      <description>
        <![CDATA[<p>CSS container queries are a necessity when creating responsive layouts, and with subgrids, you can prevent annoying formatting breaks, too. </p>
<p>The post <a rel="nofollow" href="https://blog.logrocket.com/using-css-subgrids-container-queries/">Using CSS subgrids with container queries</a> appeared first on <a rel="nofollow" href="https://blog.logrocket.com">LogRocket Blog</a>.</p>
]]>
      </description>
      <content:encoded>
        <![CDATA[<p>If you work with CSS often, you may have experienced layouts placed side-by-side that break or become misaligned when one side&#8217;s size changes. Almost every web designer has faced this, and it can be frustrating to resolve. Luckily, CSS has features allowing you to create web layouts that maintain alignment when their content changes; these are called the subgrid and container queries.</p>
<p>CSS subgrid and container queries are two features that can vastly improve web layout design and responsive web development. This article will dive deeply into CSS subgrids by providing a tutorial on seamlessly using them with container queries.</p>
<h3>Contents</h3>
<ul>
<li><a href="#what-is-css-subgrid">What are CSS subgrids?</a></li>
<li><a href="#what-are-container-queries">What are container queries?</a></li>
<li><a href="#how-container-queries-work">How do container queries work?</a></li>
<li><a href="#use-cases-container-queries">Use cases for container queries</a></li>
<li><a href="#using-css-subgrids-container-queries">Using CSS subgrids with container queries</a></li>
</ul>
<h2 id="what-is-css-subgrid">What are CSS subgrids?</h2>
<p>CSS subgrids are a relatively new feature in the CSS ecosystem, proving to be a significant addition to the level two CSS grid web design and layout specifications.</p>
<p>The elements (child components) you construct and adjust inside a traditional grid container do not directly inherit rows and columns from their parent component. This causes difficulty in consistently aligning them with the parent grid, as each element tends to act independently.</p>
<p>You then have to manage two separate grids, which can get redundant. You can quickly solve this problem by adding <code>subgrid</code> as a value for the <code>grid-template-rows</code> and <code>grid-template-columns</code> properties, because grid child components can now perfectly sync with their parent component.</p>
<p>CSS subgrids allow the child components to inherit their parent row and column settings without maintaining their grid settings.</p>
<p>Consider the three cards in a nested grid system below:</p>
<p><img data-attachment-id="121965" data-permalink="https://blog.logrocket.com/using-css-subgrids-container-queries/attachment/cards-nested-grid-system-css/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2022/06/Cards-nested-grid-system-css.png" data-orig-size="730,372" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="Cards-nested-grid-system-css" data-image-description="" data-image-caption="" data-medium-file="https://blog.logrocket.com/wp-content/uploads/2022/06/Cards-nested-grid-system-css-300x153.png" data-large-file="https://blog.logrocket.com/wp-content/uploads/2022/06/Cards-nested-grid-system-css.png" loading="lazy" class="size-full wp-image-121965 aligncenter" src="https://blog.logrocket.com/wp-content/uploads/2022/06/Cards-nested-grid-system-css.png" alt="Cards in a nested grid system" width="730" height="372" srcset="https://blog.logrocket.com/wp-content/uploads/2022/06/Cards-nested-grid-system-css.png 730w, https://blog.logrocket.com/wp-content/uploads/2022/06/Cards-nested-grid-system-css-300x153.png 300w" sizes="(max-width: 730px) 100vw, 730px" /></p>
<p>Look what happens when you increase the card&#8217;s content at the center:</p>
<p><img data-attachment-id="121967" data-permalink="https://blog.logrocket.com/using-css-subgrids-container-queries/attachment/nested-grid-cards-increased-center-content/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2022/06/Nested-grid-cards-increased-center-content.png" data-orig-size="730,366" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="Nested grid cards increased center content" data-image-description="" data-image-caption="" data-medium-file="https://blog.logrocket.com/wp-content/uploads/2022/06/Nested-grid-cards-increased-center-content-300x150.png" data-large-file="https://blog.logrocket.com/wp-content/uploads/2022/06/Nested-grid-cards-increased-center-content.png" loading="lazy" class="size-full wp-image-121967 aligncenter" src="https://blog.logrocket.com/wp-content/uploads/2022/06/Nested-grid-cards-increased-center-content.png" alt="Nested grid cards increased center content" width="730" height="366" srcset="https://blog.logrocket.com/wp-content/uploads/2022/06/Nested-grid-cards-increased-center-content.png 730w, https://blog.logrocket.com/wp-content/uploads/2022/06/Nested-grid-cards-increased-center-content-300x150.png 300w" sizes="(max-width: 730px) 100vw, 730px" /></p>
<p>You can immediately see that the title and footer positions get compromised as the content increases.</p>
<p>There are several ways of dealing with this problem. Still, they all end up with you manually managing individual grids in nested grid systems, which can be problematic when working on a larger codebase.</p>
<p>Subgrids now provide an alternative fix that allows rows and columns to maintain their initial position in the grid system despite changing their content.</p>
<p>From my example above, adding <code>subgrid</code> as the value for my card’s <code>grid-template-row</code>s will produce a different output:</p>
<pre class="language-css hljs">.card {
  grid-template-rows: subgrid;
}
</pre>
<p>Here’s the result:</p>
<p><img data-attachment-id="121969" data-permalink="https://blog.logrocket.com/using-css-subgrids-container-queries/attachment/subgrid-cards/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2022/06/subgrid-cards.png" data-orig-size="730,378" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="subgrid cards" data-image-description="" data-image-caption="" data-medium-file="https://blog.logrocket.com/wp-content/uploads/2022/06/subgrid-cards-300x155.png" data-large-file="https://blog.logrocket.com/wp-content/uploads/2022/06/subgrid-cards.png" loading="lazy" class="size-full wp-image-121969 aligncenter" src="https://blog.logrocket.com/wp-content/uploads/2022/06/subgrid-cards.png" alt="subgrid cards" width="730" height="378" srcset="https://blog.logrocket.com/wp-content/uploads/2022/06/subgrid-cards.png 730w, https://blog.logrocket.com/wp-content/uploads/2022/06/subgrid-cards-300x155.png 300w" sizes="(max-width: 730px) 100vw, 730px" /></p>
<p>Despite the second card&#8217;s content increase, the title and footer elements are still perfectly positioned and in sync with the parent grid.</p>
<p>Subgrid is a significant addition to CSS grid layout specifications because of the ability of child components to inherit the properties of their parent and grandparent components. It comes in handy when building nested grid systems, perfectly aligned form layouts, and other editorial web alignments.</p>
<blockquote><p>Currently, only Firefox browser supports CSS subgrid, but other popular browsers are not far behind. You can reference <a href="https://ishadeed.com/article/learn-css-subgrid/" target="_blank" rel="noopener">this guide</a> to look deeper into CSS subgrids and their functions.</p></blockquote>
<h2 id="what-are-container-queries">What are container queries?</h2>
<p>Since the introduction of media queries to browsers, responsive web design has taken a giant step into the future, as you can now design specific layouts for browser viewports.</p>
<p>This is great, but media queries have also exposed a redundancy issue when creating more complex web structures. For instance, components wrapped in a containing section that need to adjust their primary layout properties (like width or height) to line up with a change in the web page’s viewport can affect and break the design.</p>
<p>To solve this problem, keep the component’s media queries in sync with the containing section to ensure that your component looks good on all viewport sizes. You can easily solve this with container queries because instead of viewport sizes, you now design elements based on their actual properties. Container queries allow any component to respond per a specified container.</p>
<p>In a grid system, for instance, child components can align with their container and determine their behavior and responsiveness. You can modify their styles depending on their position in the container (not the viewport). While you can still structure web pages with a responsive grid layout, using container queries is a more straightforward approach to responsive web design.</p>
<h2 id="how-container-queries-work">How do container queries work?</h2>
<p>The first thing to understand about CSS container queries is that while &#8220;containers&#8221; are the elements being queried, the rules within container queries only affect the container descendants. For instance, if you query a <code>main</code>, <code>section</code>, or perhaps a <code>div</code> as your target container, container queries will allow you to define rules for how elements within them change as the container size changes.</p>
<p>You can create a container query with <code>@container</code>. It looks for the closest containment context:</p>
<pre class="language-css hljs">.card {
  display: flex;
  flex-direction: column;
}

.container {
  background: #fff;
  container-type: layout inline-size
  container-name: something;
}

@container something (min-width: 450px) {
  .card {
    display: flex;
    flex-direction: row
  }
}
</pre>
<p>The code above is an illustration of working with container queries. It simply instructs the browser to change the value of the card’s <code>flex-direction</code> column to <code>row</code> if the container’s width is at least 450px.</p>
<p>Container queries were specified to be included in <code>CSS containment</code>. Three properties accompany them:</p>
<h3>1. <code>container-type</code></h3>
<p>This property assigns a query container to an element so that its child components can query several aspects of its layout features.</p>
<ul>
<li><code>size</code> creates a query container for block and inline axis dimensional queries. Layout, style, and size containment are applied to the element</li>
<li><code>inline-size</code> creates a query container for dimensional queries on the container&#8217;s inline axis. The element&#8217;s layout, style, and inline-size containment are applied</li>
<li><code>block-size</code> creates a query container for dimensional queries on the container&#8217;s block axis. Layout, style, and block-size containment are applied to the element</li>
<li><code>style</code> is for style queries, and creates a query container</li>
<li><code>state</code> creates a query container for state queries</li>
</ul>
<h3>2. <code>container-name</code></h3>
<p>An optional property that further specifies the container’s name. This attribute acts as an escape hatch when we don&#8217;t want to target the nearest parent container.</p>
<p>Consider the code below:</p>
<pre class="language-css hljs">.sidebar {
  container-type: inline-size;
  container-name: sidebar;
}
</pre>
<p>The CSS above generates a container with a specified name (<code>sidebar</code>) that only contains content on the inline axis, meaning that the content can grow as much as it needs to on the block axis. You can then query that specific container with its <code>container-name</code> like so:</p>
<pre class="language-css hljs">@container sidebar (min-width: 450px){
  .card {
    display: flex;
    flex-direction: row
  }
}
</pre>
<h3>3. <code>container</code></h3>
<p>This property is often used as a shorthand property you can use to set both <code>container-type</code> and <code>container-name</code> in one statement.</p>
<h2 id="use-cases-container-queries">Use cases for container queries</h2>
<p>Container queries are appropriate for highly reusable components with a layout dependent on the available container space. They can be used in various situations or added to multiple containers on the page.</p>
<p>Other container query use cases include:</p>
<ul>
<li>Adaptable layouts</li>
<li>Cards, form elements, banners, and other modular components</li>
<li>CSS resize experiments</li>
<li>Mobile and desktop pagination with distinct functionalities</li>
</ul>
<p>Most browsers still do not support container queries, but you can readily test their features on Google Chrome Canary. Head to <code>chrome://flags</code> and enable <code>CSS Container</code> <code>Queries</code>:</p>
<p><img data-attachment-id="121971" data-permalink="https://blog.logrocket.com/using-css-subgrids-container-queries/attachment/enabling-css-subgrids/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2022/06/Enabling-css-subgrids.png" data-orig-size="948,222" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="Enabling css subgrids" data-image-description="" data-image-caption="" data-medium-file="https://blog.logrocket.com/wp-content/uploads/2022/06/Enabling-css-subgrids-300x70.png" data-large-file="https://blog.logrocket.com/wp-content/uploads/2022/06/Enabling-css-subgrids.png" loading="lazy" class="aligncenter wp-image-121971 size-full" src="https://blog.logrocket.com/wp-content/uploads/2022/06/Enabling-css-subgrids.png" alt="Enabling css container queries" width="948" height="222" srcset="https://blog.logrocket.com/wp-content/uploads/2022/06/Enabling-css-subgrids.png 948w, https://blog.logrocket.com/wp-content/uploads/2022/06/Enabling-css-subgrids-300x70.png 300w, https://blog.logrocket.com/wp-content/uploads/2022/06/Enabling-css-subgrids-768x180.png 768w" sizes="(max-width: 948px) 100vw, 948px" /></p>
<p>You can also experiment with container queries on Mozilla Firefox by heading to <code>about:config</code> and enabling <code>layout.css.container-queries</code>:</p>
<p><img data-attachment-id="121973" data-permalink="https://blog.logrocket.com/using-css-subgrids-container-queries/attachment/enabling-container-queries-firefox/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2022/06/enabling-container-queries-firefox.png" data-orig-size="1362,400" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="enabling container queries firefox" data-image-description="" data-image-caption="" data-medium-file="https://blog.logrocket.com/wp-content/uploads/2022/06/enabling-container-queries-firefox-300x88.png" data-large-file="https://blog.logrocket.com/wp-content/uploads/2022/06/enabling-container-queries-firefox-1024x301.png" loading="lazy" class="size-full wp-image-121973 aligncenter" src="https://blog.logrocket.com/wp-content/uploads/2022/06/enabling-container-queries-firefox.png" alt="enabling container queries firefox" width="1362" height="400" srcset="https://blog.logrocket.com/wp-content/uploads/2022/06/enabling-container-queries-firefox.png 1362w, https://blog.logrocket.com/wp-content/uploads/2022/06/enabling-container-queries-firefox-300x88.png 300w, https://blog.logrocket.com/wp-content/uploads/2022/06/enabling-container-queries-firefox-1024x301.png 1024w, https://blog.logrocket.com/wp-content/uploads/2022/06/enabling-container-queries-firefox-768x226.png 768w" sizes="(max-width: 1362px) 100vw, 1362px" /></p>
<p>Container queries are currently in their first public working draft, but it is a feature that has proven helpful and is likely to be incorporated in all browser versions.</p>
<h2 id="using-css-subgrids-container-queries">Using CSS subgrids with container queries</h2>
<p>CSS subgrids and container queries are two fascinating CSS features that I think will change your approach to webpage layout design and responsive styling, but how can we combine them?</p>
<p>Say we have a section containing three articles in the following format:</p>
<pre class="language-css hljs">&lt;section class="container"&gt;
  &lt;article class="article1"&gt;...&lt;/article&gt;
  &lt;article class="article2"&gt;...&lt;/article&gt;
  &lt;article class="article3"&gt;...&lt;/article&gt;
&lt;/section&gt;
</pre>
<p>Now let’s place these articles in a nested grid system where subgrids and container queries can play their roles:</p>
<pre class="language-css hljs">/* this creates a container with containment on the inline axis only and gives it an optional name "main" */
html, section {
  container-type: inline-size;
  container-name: main;
}

/* targeting the section's minimum width at "60ch" */
@container main (min-width: 60ch) {
  section {
    display: grid;
    grid-template-columns: 1fr 1fr;
  }
}

/* targeting the section's minimum width at "100ch" */
@container main (min-width: 100ch) {
  article {
    padding: 1rem;
    font-size: 1rem;
    border: 1px solid #000;
    margin: 10px 20px;
    display: grid;
    grid-template-rows: auto 1fr auto;
  }

  /* enabling a more responsive grid layout so elements don't break */
  .article1, .article2 {
    grid-template-columns: subgrid;
  }

  .article3 {
    display: grid;
    grid-column: span 2;
  }
}

/* targeting the section's containment context at a maximum width of "100ch" */
@container main (max-width: 100ch) {
  main {
    display: flex;
    flex-direction: column;
  }
}
</pre>
<p>From the above CSS code, we made the first two columns take as much space in a two-column grid system as the third one, which is just below. We then created a subgrid inside the article to ensure the elements inside are in sync and can’t break, even when the article’s content is increased.</p>
<p><img data-attachment-id="121976" data-permalink="https://blog.logrocket.com/using-css-subgrids-container-queries/attachment/example-card-grid-system/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2022/06/example-card-grid-system.png" data-orig-size="730,328" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="example card grid system" data-image-description="" data-image-caption="" data-medium-file="https://blog.logrocket.com/wp-content/uploads/2022/06/example-card-grid-system-300x135.png" data-large-file="https://blog.logrocket.com/wp-content/uploads/2022/06/example-card-grid-system.png" loading="lazy" class="size-full wp-image-121976 aligncenter" src="https://blog.logrocket.com/wp-content/uploads/2022/06/example-card-grid-system.png" alt="example card grid system" width="730" height="328" srcset="https://blog.logrocket.com/wp-content/uploads/2022/06/example-card-grid-system.png 730w, https://blog.logrocket.com/wp-content/uploads/2022/06/example-card-grid-system-300x135.png 300w" sizes="(max-width: 730px) 100vw, 730px" /></p>
<p>To make this system more responsive, we had to target the section and set some container query rules that apply to the articles as their descendants. You may notice that we queried the <code>inline-size</code> property of the section because we want the article (child) components to grow or shrink inline with the section’s (container) width.</p>
<p>In this case, we made the articles flex in the column direction when the section’s width is at a maximum of <code>80ch</code>. This enables our articles to respond not to the viewport size but their container’s width.</p>
<p>Here’s the result:</p>
<p><img data-attachment-id="121978" data-permalink="https://blog.logrocket.com/using-css-subgrids-container-queries/attachment/container-queries-subgrids-working-together/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2022/06/container-queries-subgrids-working-together.gif" data-orig-size="600,322" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="container queries subgrids working together" data-image-description="" data-image-caption="" data-medium-file="https://blog.logrocket.com/wp-content/uploads/2022/06/container-queries-subgrids-working-together-300x161.gif" data-large-file="https://blog.logrocket.com/wp-content/uploads/2022/06/container-queries-subgrids-working-together.gif" loading="lazy" class="size-full wp-image-121978 aligncenter" src="https://blog.logrocket.com/wp-content/uploads/2022/06/container-queries-subgrids-working-together.gif" alt="container queries subgrids working together" width="600" height="322" /></p>
<h2>Conclusion</h2>
<p>This article covered CSS subgrids and container queries, their workings, and use cases. We were also able to experiment with both concepts and combine them to bring about a responsive layout. Container queries and CSS subgrids are currently in their first public working draft, but they are features that have proven helpful and are likely to be incorporated in most new browser versions.</p>
<p>I hope this article was valuable to you. Happy coding!</p>
<p>The post <a rel="nofollow" href="https://blog.logrocket.com/using-css-subgrids-container-queries/">Using CSS subgrids with container queries</a> appeared first on <a rel="nofollow" href="https://blog.logrocket.com">LogRocket Blog</a>.</p>
]]>
      </content:encoded>

      <wfw:commentRss>https://blog.logrocket.com/using-css-subgrids-container-queries/feed/</wfw:commentRss>
      <slash:comments>0</slash:comments>


      <post-id xmlns="com-wordpress:feed-additions:1">121952</post-id>
    </item>
    <item>
      <title>React command palette with Tailwind CSS and Headless UI</title>
      <link>https://blog.logrocket.com/react-command-palette-tailwind-css-headless-ui/</link>
      <comments>https://blog.logrocket.com/react-command-palette-tailwind-css-headless-ui/#respond</comments>

      <dc:creator>
        <![CDATA[Mayowa Ojo]]>
      </dc:creator>
      <pubDate>Wed, 29 Jun 2022 16:00:09 +0000</pubDate>
      <category>
        <![CDATA[Uncategorized]]>
      </category>
      <category>
        <![CDATA[css]]>
      </category>
      <category>
        <![CDATA[react]]>
      </category>
      <guid isPermaLink="false">https://blog.logrocket.com/?p=115329</guid>

      <description>
        <![CDATA[<p>A command palette is a tool that enables quick navigation, easy access to commands, and shortcuts, among other things.</p>
<p>The post <a rel="nofollow" href="https://blog.logrocket.com/react-command-palette-tailwind-css-headless-ui/">React command palette with Tailwind CSS and Headless UI</a> appeared first on <a rel="nofollow" href="https://blog.logrocket.com">LogRocket Blog</a>.</p>
]]>
      </description>
      <content:encoded>
        <![CDATA[<p>As developers, we often strive to optimize our workflows as much as possible, saving time by leveraging tools like the terminal. A command palette is one such tool that displays recent activity in a web or desktop application, enabling quick navigation, easy access to commands, and shortcuts, among other things.</p>
<p>To elevate your productivity level, a command palette is essentially a UI component that takes the form of a modal. A command palette is especially useful in large, complex applications with many moving parts, for example, where it might take you several clicks or skimming through multiple dropdowns to access a resource.</p>
<p>In this tutorial, we’ll explore how to build a fully functional command palette from scratch using the <a href="https://headlessui.dev/react/combobox">Headless UI Combobox component</a> and Tailwind CSS.</p>
<ul style="margin-bottom: 0px; padding-bottom: 0px;">
<li><a href="#real-world-use-cases-command-palette">Real world use cases for a command palette</a>
<ul style="margin-bottom: 0px; padding-bottom: 0px;">
<li><a href="#the-github-app">The GitHub app</a></li>
<li><a href="#the-linear-app">The Linear app</a></li>
</ul>
</li>
<li><a href="#command-palette-essential-features">Essential features of a command palette</a></li>
<li><a href="#building-component">Building the component</a>
<ul style="margin-bottom: 0px; padding-bottom: 0px;">
<li><a href="#project-setup">Setting up the project</a></li>
<li><a href="#commandpalette-component">The <code>CommandPalette</code> component</a></li>
<li><a href="#commandgroup-component">The <code>CommandGroup</code> component</a></li>
<li><a href="#implementing-search-functionality">Implementing the search functionality</a></li>
</ul>
</li>
<li><a href="#prebuilt-components">react-command-palette: Prebuilt component</a></li>
</ul>
<h2></h2>
<h2 id="real-world-use-cases-command-palette">Real-world use cases for a command palette</h2>
<p>As a developer, there’s a very high chance that you’ve used a command palette before. The most popular one is the <a href="https://code.visualstudio.com/docs/getstarted/userinterface#_command-palette">VS C</a><a href="https://code.visualstudio.com/docs/getstarted/userinterface#_command-palette">ode command palette</a>, but there are many other examples, including the GitHub Command Palette, Linear, Figma, Slack, <a href="https://monkeytype.com">monkeytype</a>, and more.</p>
<h3 id="the-github-app">The GitHub app</h3>
<p><a href="https://docs.github.com/en/get-started/using-github/github-command-palette">GitHub recently released a command palette</a> feature that is still in public beta at the time of writing. It lets you quickly jump to different pages, search for commands, and get suggestions based on your current context. You can also narrow the scope of the resources you’re looking for by tabbing into one of the options or using a special character:</p>
<p><img data-attachment-id="115342" data-permalink="https://blog.logrocket.com/react-command-palette-tailwind-css-headless-ui/attachment/github-command-palette/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2022/06/github-command-palette.png" data-orig-size="730,405" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="github-command-palette" data-image-description="" data-image-caption="" data-medium-file="https://blog.logrocket.com/wp-content/uploads/2022/06/github-command-palette-300x166.png" data-large-file="https://blog.logrocket.com/wp-content/uploads/2022/06/github-command-palette.png" loading="lazy" class="aligncenter wp-image-115342 size-full" src="https://blog.logrocket.com/wp-content/uploads/2022/06/github-command-palette.png" alt="Github Command Palette" width="730" height="405" srcset="https://blog.logrocket.com/wp-content/uploads/2022/06/github-command-palette.png 730w, https://blog.logrocket.com/wp-content/uploads/2022/06/github-command-palette-300x166.png 300w" sizes="(max-width: 730px) 100vw, 730px" /></p>
<h3 id="the-linear-app">The Linear app</h3>
<p>If you’re not familiar with <a href="https://linear.app">Linear</a>, it’s a project management tool similar to Jira and Asana that offers a really great user experience. Linear has a very intuitive command palette that lets you access the entire application’s functionality with its keyboard-first design. In this tutorial, we&#8217;ll build a command palette similar to Linear:</p>
<p><img data-attachment-id="115344" data-permalink="https://blog.logrocket.com/react-command-palette-tailwind-css-headless-ui/attachment/linear-app-command-palette/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2022/06/linear-app-command-palette.png" data-orig-size="713,476" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="linear-app-command-palette" data-image-description="" data-image-caption="" data-medium-file="https://blog.logrocket.com/wp-content/uploads/2022/06/linear-app-command-palette-300x200.png" data-large-file="https://blog.logrocket.com/wp-content/uploads/2022/06/linear-app-command-palette.png" loading="lazy" class="aligncenter wp-image-115344 size-full" src="https://blog.logrocket.com/wp-content/uploads/2022/06/linear-app-command-palette.png" alt="Linear App Command Palette" width="713" height="476" srcset="https://blog.logrocket.com/wp-content/uploads/2022/06/linear-app-command-palette.png 713w, https://blog.logrocket.com/wp-content/uploads/2022/06/linear-app-command-palette-300x200.png 300w" sizes="(max-width: 713px) 100vw, 713px" /></p>
<h2 id="command-palette-essential-features">Essential features of a command palette</h2>
<p>Several modern applications are implementing command palettes as a feature, but what makes a good command palette component? Here’s a concise list of things to look out for:</p>
<ul>
<li>A simple shortcut to open the palette, i.e., <code>ctrl + k</code></li>
<li>It can be accessible from anywhere in the application</li>
<li>It has extensive search features, such as fuzzy search</li>
<li>Commands communicate intent and are easy to understand</li>
<li>It provides access to every part of the application from one place</li>
</ul>
<p>In the next section, we’ll build our own component that includes all the features listed above. Let’s get into it!</p>
<h2 id="building-component">Building the component</h2>
<p>The command palette is not actually as complex as it seems, and anyone can build one quickly. I’ve prepared a <a href="https://github.com/Mayowa-Ojo/command-palette/tree/starter-project">starter project</a> for this tutorial so that you can easily follow along. The starter project is a React and Vite SPA that replicates the Linear issues page.</p>
<h3 id="project-setup">Setting up the project</h3>
<p>To get started, clone the repository into your local directory, install the necessary dependencies, and start the development server. The project uses Yarn, but if you’re more comfortable with npm or pnPm, you can delete the <code>yarn.lock</code> file before running <code>npm install</code> or <code>pnpm install</code>:</p>
<pre class="language-javascript">// clone repository
$ git clone https://github.com/Mayowa-Ojo/command-palette
// switch to the 'starter-project' branch
$ git checkout starter-project
// install dependencies
$ yarn
// start dev server
$ yarn dev
</pre>
<p>If you visit <code>localhost:3000</code>, you&#8217;ll see the following page:</p>
<p><img data-attachment-id="115346" data-permalink="https://blog.logrocket.com/react-command-palette-tailwind-css-headless-ui/attachment/github-repository-clone/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2022/06/github-repository-clone.png" data-orig-size="730,380" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="github-repository-clone" data-image-description="" data-image-caption="" data-medium-file="https://blog.logrocket.com/wp-content/uploads/2022/06/github-repository-clone-300x156.png" data-large-file="https://blog.logrocket.com/wp-content/uploads/2022/06/github-repository-clone.png" loading="lazy" class="aligncenter wp-image-115346 size-full" src="https://blog.logrocket.com/wp-content/uploads/2022/06/github-repository-clone.png" alt="Github Repository Clone" width="730" height="380" srcset="https://blog.logrocket.com/wp-content/uploads/2022/06/github-repository-clone.png 730w, https://blog.logrocket.com/wp-content/uploads/2022/06/github-repository-clone-300x156.png 300w" sizes="(max-width: 730px) 100vw, 730px" /></p>
<h3 id="&quot;commandpalette-component">The <code>CommandPalette</code> component</h3>
<p>Next, we’ll build the component. We’ll use the Headless UI <code>combobox</code> and <code>dialog</code> components. <code>combobox</code> will be the base component for our command palette. It has built-in features like focus management and keyboard interaction. We’ll use the <code>dialog</code> component to render our command palette in a modal.</p>
<p>To style the components, we’ll use Tailwind CSS. Tailwind is a CSS utility library that lets you easily add inline styles in your HTML or JSX files. The starter project already includes the configuration for Tailwind.</p>
<p>Install the necessary dependencies as follows:</p>
<pre class="language-bash">$ yarn add @headlessui/react @heroicons/react
</pre>
<p>In the <code>components</code> folder, create a <code>CommandPalette.jsx</code> file and add the following code block:</p>
<pre class="language-javascript">import { Dialog, Combobox } from "@headlessui/react";

export const CommandPalette = ({ commands }) =&gt; {
  const [isOpen, setIsOpen] = useState(true);

  return (
    &lt;Dialog
      open={isOpen}
      onClose={setIsOpen}
      className="fixed inset-0 p-4 pt-[15vh] overflow-y-auto"
    &gt;
      &lt;Dialog.Overlay className="fixed inset-0 backdrop-blur-[1px]" /&gt;
      &lt;Combobox
         as="div"
         className="bg-accent-dark max-w-2xl mx-auto rounded-lg shadow-2xl relative flex flex-col"
         onChange={(command) =&gt; {
            // we have access to the selected command
            // a redirect can happen here or any action can be executed
            setIsOpen(false);
         }}
      &gt;
         &lt;div className="mx-4 mt-4 px-2 h-[25px] text-xs text-slate-100 bg-primary/30 rounded self-start flex items-center flex-shrink-0"&gt;
            Issue
         &lt;/div&gt;
         &lt;div className="flex items-center text-lg font-medium border-b border-slate-500"&gt;
            &lt;Combobox.Input
               className="p-5 text-white placeholder-gray-200 w-full bg-transparent border-0 outline-none"
               placeholder="Type a command or search..."
            /&gt;
         &lt;/div&gt;
         &lt;Combobox.Options
            className="max-h-72 overflow-y-auto flex flex-col"
            static
         &gt;&lt;/Combobox.Options&gt;
      &lt;/Combobox&gt;
   &lt;/Dialog&gt;
  );
};
</pre>
<p>A few things are happening here. First, we import the <code>Dialog</code> and <code>Combobox</code> components. <code>Dialog</code> is rendered as a wrapper around the <code>Combobox</code>, and we initialize a local state called <code>isOpen</code> to control the modal.</p>
<p>We render a <code>Dialog.Overlay</code> inside the <code>Dialog</code> component to serve as the overlay for the modal. You can style this however you want, but here, we’re just using <code>backdrop-blur</code>. Then, we render the <code>Combobox</code> component and pass in a handler function to the <code>onChange</code> prop. This handler is called whenever an item is selected in the <code>Combobox</code>. You’d typically want to navigate to a page or execute an action here, but for now, we just close the <code>Dialog</code>.</p>
<p><code>Combobox.Input</code> will handle the search functionality, which we’ll add later in this section. <code>Combobox.Options</code> renders a <code>ul</code> element that wraps the list of results we’ll render. We pass in a <code>static</code> prop that indicates we want to ignore the internally managed state of the component.</p>
<p>Next, we render our <code>CommandPalette</code> in the <code>App.jsx</code> file:</p>
<pre class="language-javascript">const App = () =&gt; {
   return (
      &lt;div className="flex w-full bg-primary h-screen max-h-screen min-h-screen overflow-hidden"&gt;
         &lt;Drawer teams={teams} /&gt;
         &lt;AllIssues issues={issues} /&gt;
         &lt;CommandPalette commands={commands}/&gt;
      &lt;/div&gt;
   );
};
</pre>
<p>Let’s talk about how our command palette will function. We have a list of predefined commands in the <code>data/seed.json</code> file. These commands will be displayed in the palette when it’s opened and can be filtered based on the search query. Fairly simple, right?</p>
<h3 id="commandgroup-component">The <code>CommandGroup</code> component</h3>
<p><code>CommandPalette</code> receives a <code>commands</code> prop, which is the list of commands we imported from <code>seed.json</code>. Now, create a <code>CommandGroup.jsx</code> file in the <code>components</code> folder and add the following code:</p>
<pre class="language-javascript">// CommandGroup.jsx
import React from "react";
import clsx from "clsx";
import { Combobox } from "@headlessui/react";
import { PlusIcon, ArrowSmRightIcon } from "@heroicons/react/solid";
import {
   CogIcon,
   UserCircleIcon,
   FastForwardIcon,
} from "@heroicons/react/outline";
import { ProjectIcon } from "../icons/ProjectIcon";
import { ViewsIcon } from "../icons/ViewsIcon";
import { TemplatesIcon } from "../icons/TemplatesIcon";
import { TeamIcon } from "../icons/TeamIcon";

export const CommandGroup = ({ commands, group }) =&gt; {
   return (
      &lt;React.Fragment&gt;
         {/* only show the header when there are commands belonging to this group */}
         {commands.filter((command) =&gt; command.group === group).length &gt;= 1 &amp;&amp; (
            &lt;div className="flex items-center h-6 flex-shrink-0 bg-accent/50"&gt;
               &lt;span className="text-xs text-slate-100 px-3.5"&gt;{group}&lt;/span&gt;
            &lt;/div&gt;
         )}
         {commands
            .filter((command) =&gt; command.group === group)
            .map((command, idx) =&gt; (
               &lt;Combobox.Option key={idx} value={command}&gt;
                  {({ active }) =&gt; (
                     &lt;div
                        className={clsx(
                           "w-full h-[46px] text-white flex items-center hover:bg-primary/40 cursor-default transition-colors duration-100 ease-in",
                           active ? "bg-primary/40" : ""
                        )}
                     &gt;
                        &lt;div className="px-3.5 flex items-center w-full"&gt;
                           &lt;div className="mr-3 flex items-center justify-center w-4"&gt;
                              {mapCommandGroupToIcon(
                                 command.group.toLowerCase()
                              )}
                           &lt;/div&gt;
                           &lt;span className="text-sm text-left flex flex-auto"&gt;
                              {command.name}
                           &lt;/span&gt;
                           &lt;span className="text-[10px]"&gt;{command.shortcut}&lt;/span&gt;
                        &lt;/div&gt;
                     &lt;/div&gt;
                  )}
               &lt;/Combobox.Option&gt;
            ))}
      &lt;/React.Fragment&gt;
   );
};
</pre>
<p>We’re simply using the <code>CommandGroup</code> component to avoid some repetitive code. If you look at the Linear command palette, you’ll see that the commands are grouped based on context. To implement this, we need to filter out the commands that belong to the same group and repeat that logic for each group.</p>
<p>The <code>CommandGroup</code> component receives two props, <code>commands</code> and <code>group</code>. We’ll filter the commands based on the current group and render them using the <code>Combobox.Option</code> component. Using render props, we can get the <code>active</code> item and style it accordingly, allowing us to render the <code>CommandGroup</code> for each group in the <code>CommandPalette</code> while keeping the code clean.</p>
<p>Note that we have a <code>mapCommandGroupToIcon</code> function somewhere in the code block above. This is because each group has a different icon, and the function is just a helper to render the correct icon for the current group. Now, add the function just below the <code>CommandGroup</code> component in the same file:</p>
<pre class="language-javascript">const mapCommandGroupToIcon = (group) =&gt; {
   switch (group) {
      case "issue":
         return &lt;PlusIcon className="w-4 h-4 text-white"/&gt;;
      case "project":
</pre>
<p>Now, we need to render the <code>CommandGroup</code> component in <code>CommandPalette</code>.<br />
Import the component as follows:</p>
<pre>import { CommandGroup } from "./CommandGroup";
</pre>
<p>Render it inside the <code>Combobox.Options</code> for each group:</p>
<pre>&lt;Combobox.Options
   className="max-h-72 overflow-y-auto flex flex-col"
   static
>
   &lt;CommandGroup commands={commands} group="Issue"/&gt;
   &lt;CommandGroup commands={commands} group="Project"/&gt;
   &lt;CommandGroup commands={commands} group="Views"/&gt;
   &lt;CommandGroup commands={commands} group="Team"/&gt;
   &lt;CommandGroup commands={commands} group="Templates"/&gt;
   &lt;CommandGroup commands={commands} group="Navigation"/&gt;
   &lt;CommandGroup commands={commands} group="Settings"/&gt;
   &lt;CommandGroup commands={commands} group="Account"/&gt;
&lt;/Combobox.Options&gt;
</pre>
<p>You should see the list of commands being rendered now. The next step is to wire up the search functionality.</p>
<h3 id="implementing-search-functionality">Implementing the search functionality</h3>
<p>Create a local state variable in <code>CommandPalette.jsx</code>:</p>
<pre class="language-javascript">// CommandPalette.jsx
const [query, setQuery] = useState("");
</pre>
<p>Pass the state update handler to the <code>onChange</code> prop in <code>Combobox.Input</code>. The <code>query</code> will be updated with every character you type in the input box:</p>
<pre class="language-javascript">&lt;Combobox.Input
  className="p-5 text-white placeholder-gray-200 w-full bg-transparent border-0 outline-none"
  placeholder="Type a command or search..."
  onChange={(e) =&gt; setQuery(e.target.value)}
/&gt;
</pre>
<p>One of the key properties of a good command palette is extensive search functionality. We can just do a simple string comparison of the search query with the commands, however that wouldn’t account for typos and context. A much better solution that doesn’t introduce too much complexity is a fuzzy search.</p>
<p>We’ll use the <a href="https://fusejs.io/">Fuse.js</a> library for this. <a href="https://blog.logrocket.com/fuse-js-dynamic-search-react-app/">Fuse.js is a powerful, lightweight, fuzzy search library</a> with zero dependencies. If you’re not familiar with fuzzy searching, it is a string matching technique that favors approximate matching over the exact match, implying that you can get correct suggestions even if the query has typos or misspellings.</p>
<p>First, install the Fuse.js library:</p>
<pre class="language-javascript">$ yarn add fuse.js
</pre>
<p>In <code>CommandPalette.jsx</code>, instantiate the <code>Fuse</code> class with a list of commands:</p>
<pre class="language-javascript">// CommandPalette.jsx
const fuse = new Fuse(commands, { includeScore: true, keys: ["name"] });
</pre>
<p>The <code>Fuse</code> class accepts an array of commands and configuration options. The <code>keys</code> field is where we register what fields are in the commands list to be indexed by Fuse.js. Now, create a function that will handle the search and return the filtered results:</p>
<pre class="language-javascript">// CommandPalette.jsx
const filteredCommands =
  query === ""
     ? commands
     : fuse.search(query).map((res) =&gt; ({ ...res.item }));
</pre>
<p>We check if the <code>query</code> is empty, return all the commands, and if not, run the <code>fuse.search</code> method with the query. Also, we’re mapping the results to create a new object. This is to maintain consistency because the results returned by Fuse.js have some new fields and will not match the structure we already have.</p>
<p>Now, pass the <code>filteredCommands</code> to the <code>commands</code> prop in each <code>CommandGroup</code> component. It should look like the code below:</p>
<pre class="language-javascript">// CommandPalette.jsx
&lt;CommandGroup commands={filteredCommands} group="Issue"/&gt;
&lt;CommandGroup commands={filteredCommands} group="Project"/&gt;
&lt;CommandGroup commands={filteredCommands} group="Views"/&gt;
&lt;CommandGroup commands={filteredCommands} group="Team"/&gt;
&lt;CommandGroup commands={filteredCommands} group="Templates"/&gt;
&lt;CommandGroup commands={filteredCommands} group="Navigation"/&gt;
&lt;CommandGroup commands={filteredCommands} group="Settings"/&gt;
&lt;CommandGroup commands={filteredCommands} group="Account"/&gt;
</pre>
<p>Try searching in the command palette and see if the results are being filtered:</p>
<p><img data-attachment-id="115348" data-permalink="https://blog.logrocket.com/react-command-palette-tailwind-css-headless-ui/attachment/command-palette-search-filter/" data-orig-file="https://blog.logrocket.com/wp-content/uploads/2022/06/command-palette-search-filter.gif" data-orig-size="600,374" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="command-palette-search-filter" data-image-description="" data-image-caption="" data-medium-file="https://blog.logrocket.com/wp-content/uploads/2022/06/command-palette-search-filter-300x187.gif" data-large-file="https://blog.logrocket.com/wp-content/uploads/2022/06/command-palette-search-filter.gif" loading="lazy" class="aligncenter wp-image-115348 size-full" src="https://blog.logrocket.com/wp-content/uploads/2022/06/command-palette-search-filter.gif" alt="Command Palette Search Filter" width="600" height="374" /></p>
<p>We have a fully functional command palette, but you might notice that it’s always open. We need to be able to control its open state. Let’s define a keyboard event that will listen for a key combination and update the open state. Add the following code to <code>CommandPalette.jsx</code>:</p>
<pre class="language-javascript">// CommandPalette.jsx
useEffect(() =&gt; {
  const onKeydown = (e) =&gt; {
     if (e.key === "k" &amp;&amp; (e.metaKey || e.ctrlKey)) {
        e.preventDefault();
        setIsOpen(true);
     }
  };
  window.addEventListener("keydown", onKeydown);
  return () =&gt; {
     window.removeEventListener("keydown", onKeydown);
  };
}, []);
</pre>
<p>We’re using a <code>useEffect</code> Hook to register a <code>keydown</code> keyboard event when the component is mounted, and we use a clean-up function to remove the listener when the component unmounts.</p>
<p>In the Hook, we check if the key combination matches <code>ctrl + k</code>. If it does, then the open state is set to <code>true</code>. You can also use a different key combination, but it’s important not to use combinations that clash with the native browser shortcuts.</p>
<p>That’s it! You can find the finished version of this project on the <a href="https://github.com/Mayowa-Ojo/command-palette/tree/finished-project">finished-project</a> branch.</p>
<h2 id="prebuilt-components">react-command-palette: Prebuilt component</h2>
<p>We’ve explored how to build a command palette component from scratch. However, you’d probably rather not build your own every time you need a command palette. That’s where a prebuilt component can be useful. Most component libraries do not offer a command palette, but <a href="https://github.com/asabaylus/react-command-palette">react-command-palette</a> is a well written component that is accessible and browser compatible.</p>
<p>To use this component, install it as a dependency in your project:</p>
<pre class="language-bash">$ yarn add react-command-palette
</pre>
<p>Import the component and pass your list of commands to it as follows:</p>
<pre class="language-javascript">import React from "react";
import CommandPalette from 'react-command-palette';

const commands = [{
  name: "Foo",
  command() {}
},{
  name: "Bar",
  command() {}
}]

export default function App() {
  return (
    &lt;div&gt;
      &lt;CommandPalette commands={commands} /&gt;
    &lt;/div&gt;
  );
}
</pre>
<p>There are a lot of config options that you can use to customize the look and behavior to meet your requirements. For example, the <code>theme</code> config lets you choose from a number of built-in themes or create your own custom theme.</p>
<h2 id="nextsteps">Next steps</h2>
<p>In this article, you’ve learned about command palettes, the ideal use cases for them, and what features make up a good command palette. You’ve also explored in detailed steps how to build one using the Headless UI combobox component and Tailwind CSS.</p>
<p>If you just want to quickly ship this feature in your application, then a prebuilt component like react-command-palette is the way to go. Thanks for reading, and be sure to leave a comment if you have any questions.</p>
<p>The post <a rel="nofollow" href="https://blog.logrocket.com/react-command-palette-tailwind-css-headless-ui/">React command palette with Tailwind CSS and Headless UI</a> appeared first on <a rel="nofollow" href="https://blog.logrocket.com">LogRocket Blog</a>.</p>
]]>
      </content:encoded>

      <wfw:commentRss>https://blog.logrocket.com/react-command-palette-tailwind-css-headless-ui/feed/</wfw:commentRss>
      <slash:comments>0</slash:comments>


      <post-id xmlns="com-wordpress:feed-additions:1">115329</post-id>
    </item>
  </channel>
</rss>